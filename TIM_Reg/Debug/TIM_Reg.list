
TIM_Reg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000528  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080006d0  080006d0  000106d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080006d8  080006d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080006d8  080006d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006d8  080006d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006d8  080006d8  000106d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006dc  080006dc  000106dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080006e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000001c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000006e5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001cc  00000000  00000000  00020721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000080  00000000  00000000  000208f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000068  00000000  00000000  00020970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018108  00000000  00000000  000209d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000077b  00000000  00000000  00038ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087a8a  00000000  00000000  0003925b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000c0ce5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000144  00000000  00000000  000c0d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080006b8 	.word	0x080006b8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000010 	.word	0x20000010
 80001e4:	080006b8 	.word	0x080006b8

080001e8 <SystemClock_config>:

/*
 * Initialize default system clock
 * */
void SystemClock_config()
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSION;				// enable HSI
 80001ec:	4b15      	ldr	r3, [pc, #84]	; (8000244 <SystemClock_config+0x5c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a14      	ldr	r2, [pc, #80]	; (8000244 <SystemClock_config+0x5c>)
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSIRDY));		// see that HSI is ready or not
 80001f8:	bf00      	nop
 80001fa:	4b12      	ldr	r3, [pc, #72]	; (8000244 <SystemClock_config+0x5c>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f003 0302 	and.w	r3, r3, #2
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <SystemClock_config+0x12>

	// Power regulator
	PWR->CR |= PWR_CR_VOS;
 8000206:	4b10      	ldr	r3, [pc, #64]	; (8000248 <SystemClock_config+0x60>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a0f      	ldr	r2, [pc, #60]	; (8000248 <SystemClock_config+0x60>)
 800020c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000210:	6013      	str	r3, [r2, #0]

	// Flash latency setup
	FLASH->ACR |= FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_5WS;
 8000212:	4b0e      	ldr	r3, [pc, #56]	; (800024c <SystemClock_config+0x64>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a0d      	ldr	r2, [pc, #52]	; (800024c <SystemClock_config+0x64>)
 8000218:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800021c:	f043 0305 	orr.w	r3, r3, #5
 8000220:	6013      	str	r3, [r2, #0]

	// HSI oscillator used as system clock
	RCC->CFGR |= RCC_CFGR_SW_HSI;
 8000222:	4b08      	ldr	r3, [pc, #32]	; (8000244 <SystemClock_config+0x5c>)
 8000224:	4a07      	ldr	r2, [pc, #28]	; (8000244 <SystemClock_config+0x5c>)
 8000226:	689b      	ldr	r3, [r3, #8]
 8000228:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);
 800022a:	bf00      	nop
 800022c:	4b05      	ldr	r3, [pc, #20]	; (8000244 <SystemClock_config+0x5c>)
 800022e:	689b      	ldr	r3, [r3, #8]
 8000230:	f003 030c 	and.w	r3, r3, #12
 8000234:	2b00      	cmp	r3, #0
 8000236:	d1f9      	bne.n	800022c <SystemClock_config+0x44>
}
 8000238:	bf00      	nop
 800023a:	bf00      	nop
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr
 8000244:	40023800 	.word	0x40023800
 8000248:	40007000 	.word	0x40007000
 800024c:	40023c00 	.word	0x40023c00

08000250 <Get_HCLK_freq>:

/*
 * Returns the HCLK frequency
 */
uint32_t Get_HCLK_freq(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000254:	4b03      	ldr	r3, [pc, #12]	; (8000264 <Get_HCLK_freq+0x14>)
 8000256:	681b      	ldr	r3, [r3, #0]
}
 8000258:	4618      	mov	r0, r3
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	20000000 	.word	0x20000000

08000268 <Get_PCLK1_freq>:

/*
 * Returns the PCLK1 frequency
 */
uint32_t Get_PCLK1_freq(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (Get_HCLK_freq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800026c:	f7ff fff0 	bl	8000250 <Get_HCLK_freq>
 8000270:	4602      	mov	r2, r0
 8000272:	4b05      	ldr	r3, [pc, #20]	; (8000288 <Get_PCLK1_freq+0x20>)
 8000274:	689b      	ldr	r3, [r3, #8]
 8000276:	0a9b      	lsrs	r3, r3, #10
 8000278:	f003 0307 	and.w	r3, r3, #7
 800027c:	4903      	ldr	r1, [pc, #12]	; (800028c <Get_PCLK1_freq+0x24>)
 800027e:	5ccb      	ldrb	r3, [r1, r3]
 8000280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000284:	4618      	mov	r0, r3
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40023800 	.word	0x40023800
 800028c:	080006d0 	.word	0x080006d0

08000290 <Get_PCLK2_freq>:

/*
 * Returns the PCLK2 frequency
 */
uint32_t Get_PCLK2_freq(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (Get_HCLK_freq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000294:	f7ff ffdc 	bl	8000250 <Get_HCLK_freq>
 8000298:	4602      	mov	r2, r0
 800029a:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <Get_PCLK2_freq+0x20>)
 800029c:	689b      	ldr	r3, [r3, #8]
 800029e:	0b5b      	lsrs	r3, r3, #13
 80002a0:	f003 0307 	and.w	r3, r3, #7
 80002a4:	4903      	ldr	r1, [pc, #12]	; (80002b4 <Get_PCLK2_freq+0x24>)
 80002a6:	5ccb      	ldrb	r3, [r1, r3]
 80002a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	40023800 	.word	0x40023800
 80002b4:	080006d0 	.word	0x080006d0

080002b8 <LED_init>:

/*
 * Init LED
 * */
void LED_init(user_led LD)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;	// IO port D clock enable
 80002c2:	4b1c      	ldr	r3, [pc, #112]	; (8000334 <LED_init+0x7c>)
 80002c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c6:	4a1b      	ldr	r2, [pc, #108]	; (8000334 <LED_init+0x7c>)
 80002c8:	f043 0308 	orr.w	r3, r3, #8
 80002cc:	6313      	str	r3, [r2, #48]	; 0x30

	// set general purpose output mode
	switch (LD)
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	3b0c      	subs	r3, #12
 80002d2:	2b03      	cmp	r3, #3
 80002d4:	d826      	bhi.n	8000324 <LED_init+0x6c>
 80002d6:	a201      	add	r2, pc, #4	; (adr r2, 80002dc <LED_init+0x24>)
 80002d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002dc:	080002fb 	.word	0x080002fb
 80002e0:	080002ed 	.word	0x080002ed
 80002e4:	08000309 	.word	0x08000309
 80002e8:	08000317 	.word	0x08000317
	{
		case LD3:
			GPIOD->MODER |= GPIO_MODER_MODER13_0;
 80002ec:	4b12      	ldr	r3, [pc, #72]	; (8000338 <LED_init+0x80>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a11      	ldr	r2, [pc, #68]	; (8000338 <LED_init+0x80>)
 80002f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002f6:	6013      	str	r3, [r2, #0]
	 		break;
 80002f8:	e015      	b.n	8000326 <LED_init+0x6e>
		case LD4:
			GPIOD->MODER |= GPIO_MODER_MODER12_0;
 80002fa:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <LED_init+0x80>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <LED_init+0x80>)
 8000300:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000304:	6013      	str	r3, [r2, #0]
			break;
 8000306:	e00e      	b.n	8000326 <LED_init+0x6e>
		case LD5:
			GPIOD->MODER |= GPIO_MODER_MODER14_0;
 8000308:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <LED_init+0x80>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <LED_init+0x80>)
 800030e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000312:	6013      	str	r3, [r2, #0]
			break;
 8000314:	e007      	b.n	8000326 <LED_init+0x6e>
		case LD6:
			GPIOD->MODER |= GPIO_MODER_MODER15_0;
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <LED_init+0x80>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a07      	ldr	r2, [pc, #28]	; (8000338 <LED_init+0x80>)
 800031c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000320:	6013      	str	r3, [r2, #0]
			break;
 8000322:	e000      	b.n	8000326 <LED_init+0x6e>
		default:
			break;
 8000324:	bf00      	nop
	}
}
 8000326:	bf00      	nop
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	40023800 	.word	0x40023800
 8000338:	40020c00 	.word	0x40020c00

0800033c <Timer_init>:

/*
 * Initialize Timer
 * */
void Timer_init(TIM_TypeDef *TIM)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b086      	sub	sp, #24
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	uint32_t F_timer, prescaler, f_CLK;

	// get frequency of CLK
	if (TIM == TIM1 || TIM == TIM8 || TIM == TIM9 || TIM == TIM10 || TIM == TIM11)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a7d      	ldr	r2, [pc, #500]	; (800053c <Timer_init+0x200>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d00f      	beq.n	800036c <Timer_init+0x30>
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a7c      	ldr	r2, [pc, #496]	; (8000540 <Timer_init+0x204>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d00b      	beq.n	800036c <Timer_init+0x30>
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a7b      	ldr	r2, [pc, #492]	; (8000544 <Timer_init+0x208>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d007      	beq.n	800036c <Timer_init+0x30>
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a7a      	ldr	r2, [pc, #488]	; (8000548 <Timer_init+0x20c>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d003      	beq.n	800036c <Timer_init+0x30>
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a79      	ldr	r2, [pc, #484]	; (800054c <Timer_init+0x210>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d103      	bne.n	8000374 <Timer_init+0x38>
		f_CLK = Get_PCLK2_freq();
 800036c:	f7ff ff90 	bl	8000290 <Get_PCLK2_freq>
 8000370:	6178      	str	r0, [r7, #20]
 8000372:	e026      	b.n	80003c2 <Timer_init+0x86>
	else if (TIM == TIM2 || TIM == TIM3 || TIM == TIM4 || TIM == TIM5 || TIM == TIM6 || TIM == TIM7 || TIM == TIM12 || TIM == TIM13 || TIM == TIM14)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800037a:	d01f      	beq.n	80003bc <Timer_init+0x80>
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a74      	ldr	r2, [pc, #464]	; (8000550 <Timer_init+0x214>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d01b      	beq.n	80003bc <Timer_init+0x80>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a73      	ldr	r2, [pc, #460]	; (8000554 <Timer_init+0x218>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d017      	beq.n	80003bc <Timer_init+0x80>
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a72      	ldr	r2, [pc, #456]	; (8000558 <Timer_init+0x21c>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d013      	beq.n	80003bc <Timer_init+0x80>
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a71      	ldr	r2, [pc, #452]	; (800055c <Timer_init+0x220>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d00f      	beq.n	80003bc <Timer_init+0x80>
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a70      	ldr	r2, [pc, #448]	; (8000560 <Timer_init+0x224>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d00b      	beq.n	80003bc <Timer_init+0x80>
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a6f      	ldr	r2, [pc, #444]	; (8000564 <Timer_init+0x228>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d007      	beq.n	80003bc <Timer_init+0x80>
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a6e      	ldr	r2, [pc, #440]	; (8000568 <Timer_init+0x22c>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d003      	beq.n	80003bc <Timer_init+0x80>
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a6d      	ldr	r2, [pc, #436]	; (800056c <Timer_init+0x230>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d102      	bne.n	80003c2 <Timer_init+0x86>
		f_CLK = Get_PCLK1_freq();
 80003bc:	f7ff ff54 	bl	8000268 <Get_PCLK1_freq>
 80003c0:	6178      	str	r0, [r7, #20]

	// TIM clock enable
	if (TIM == TIM1)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a5d      	ldr	r2, [pc, #372]	; (800053c <Timer_init+0x200>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d106      	bne.n	80003d8 <Timer_init+0x9c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80003ca:	4b69      	ldr	r3, [pc, #420]	; (8000570 <Timer_init+0x234>)
 80003cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003ce:	4a68      	ldr	r2, [pc, #416]	; (8000570 <Timer_init+0x234>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6453      	str	r3, [r2, #68]	; 0x44
 80003d6:	e08d      	b.n	80004f4 <Timer_init+0x1b8>
	else if (TIM == TIM8)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a59      	ldr	r2, [pc, #356]	; (8000540 <Timer_init+0x204>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d106      	bne.n	80003ee <Timer_init+0xb2>
		RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 80003e0:	4b63      	ldr	r3, [pc, #396]	; (8000570 <Timer_init+0x234>)
 80003e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003e4:	4a62      	ldr	r2, [pc, #392]	; (8000570 <Timer_init+0x234>)
 80003e6:	f043 0302 	orr.w	r3, r3, #2
 80003ea:	6453      	str	r3, [r2, #68]	; 0x44
 80003ec:	e082      	b.n	80004f4 <Timer_init+0x1b8>
	else if (TIM == TIM9)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a54      	ldr	r2, [pc, #336]	; (8000544 <Timer_init+0x208>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d106      	bne.n	8000404 <Timer_init+0xc8>
		RCC->APB2ENR |= RCC_APB2ENR_TIM9EN;
 80003f6:	4b5e      	ldr	r3, [pc, #376]	; (8000570 <Timer_init+0x234>)
 80003f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003fa:	4a5d      	ldr	r2, [pc, #372]	; (8000570 <Timer_init+0x234>)
 80003fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000400:	6453      	str	r3, [r2, #68]	; 0x44
 8000402:	e077      	b.n	80004f4 <Timer_init+0x1b8>
	else if (TIM == TIM10)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a50      	ldr	r2, [pc, #320]	; (8000548 <Timer_init+0x20c>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d106      	bne.n	800041a <Timer_init+0xde>
		RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 800040c:	4b58      	ldr	r3, [pc, #352]	; (8000570 <Timer_init+0x234>)
 800040e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000410:	4a57      	ldr	r2, [pc, #348]	; (8000570 <Timer_init+0x234>)
 8000412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000416:	6453      	str	r3, [r2, #68]	; 0x44
 8000418:	e06c      	b.n	80004f4 <Timer_init+0x1b8>
	else if (TIM == TIM11)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a4b      	ldr	r2, [pc, #300]	; (800054c <Timer_init+0x210>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d106      	bne.n	8000430 <Timer_init+0xf4>
		RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
 8000422:	4b53      	ldr	r3, [pc, #332]	; (8000570 <Timer_init+0x234>)
 8000424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000426:	4a52      	ldr	r2, [pc, #328]	; (8000570 <Timer_init+0x234>)
 8000428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800042c:	6453      	str	r3, [r2, #68]	; 0x44
 800042e:	e061      	b.n	80004f4 <Timer_init+0x1b8>
	else if (TIM == TIM2)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000436:	d106      	bne.n	8000446 <Timer_init+0x10a>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000438:	4b4d      	ldr	r3, [pc, #308]	; (8000570 <Timer_init+0x234>)
 800043a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800043c:	4a4c      	ldr	r2, [pc, #304]	; (8000570 <Timer_init+0x234>)
 800043e:	f043 0301 	orr.w	r3, r3, #1
 8000442:	6413      	str	r3, [r2, #64]	; 0x40
 8000444:	e056      	b.n	80004f4 <Timer_init+0x1b8>
	else if (TIM == TIM3)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a41      	ldr	r2, [pc, #260]	; (8000550 <Timer_init+0x214>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d106      	bne.n	800045c <Timer_init+0x120>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800044e:	4b48      	ldr	r3, [pc, #288]	; (8000570 <Timer_init+0x234>)
 8000450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000452:	4a47      	ldr	r2, [pc, #284]	; (8000570 <Timer_init+0x234>)
 8000454:	f043 0302 	orr.w	r3, r3, #2
 8000458:	6413      	str	r3, [r2, #64]	; 0x40
 800045a:	e04b      	b.n	80004f4 <Timer_init+0x1b8>
	else if (TIM == TIM4)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a3d      	ldr	r2, [pc, #244]	; (8000554 <Timer_init+0x218>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d106      	bne.n	8000472 <Timer_init+0x136>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000464:	4b42      	ldr	r3, [pc, #264]	; (8000570 <Timer_init+0x234>)
 8000466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000468:	4a41      	ldr	r2, [pc, #260]	; (8000570 <Timer_init+0x234>)
 800046a:	f043 0304 	orr.w	r3, r3, #4
 800046e:	6413      	str	r3, [r2, #64]	; 0x40
 8000470:	e040      	b.n	80004f4 <Timer_init+0x1b8>
	else if (TIM == TIM5)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4a38      	ldr	r2, [pc, #224]	; (8000558 <Timer_init+0x21c>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d106      	bne.n	8000488 <Timer_init+0x14c>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800047a:	4b3d      	ldr	r3, [pc, #244]	; (8000570 <Timer_init+0x234>)
 800047c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800047e:	4a3c      	ldr	r2, [pc, #240]	; (8000570 <Timer_init+0x234>)
 8000480:	f043 0308 	orr.w	r3, r3, #8
 8000484:	6413      	str	r3, [r2, #64]	; 0x40
 8000486:	e035      	b.n	80004f4 <Timer_init+0x1b8>
	else if (TIM == TIM6)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a34      	ldr	r2, [pc, #208]	; (800055c <Timer_init+0x220>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d106      	bne.n	800049e <Timer_init+0x162>
		RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8000490:	4b37      	ldr	r3, [pc, #220]	; (8000570 <Timer_init+0x234>)
 8000492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000494:	4a36      	ldr	r2, [pc, #216]	; (8000570 <Timer_init+0x234>)
 8000496:	f043 0310 	orr.w	r3, r3, #16
 800049a:	6413      	str	r3, [r2, #64]	; 0x40
 800049c:	e02a      	b.n	80004f4 <Timer_init+0x1b8>
	else if (TIM == TIM7)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a2f      	ldr	r2, [pc, #188]	; (8000560 <Timer_init+0x224>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d106      	bne.n	80004b4 <Timer_init+0x178>
		RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 80004a6:	4b32      	ldr	r3, [pc, #200]	; (8000570 <Timer_init+0x234>)
 80004a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004aa:	4a31      	ldr	r2, [pc, #196]	; (8000570 <Timer_init+0x234>)
 80004ac:	f043 0320 	orr.w	r3, r3, #32
 80004b0:	6413      	str	r3, [r2, #64]	; 0x40
 80004b2:	e01f      	b.n	80004f4 <Timer_init+0x1b8>
	else if (TIM == TIM12)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a2b      	ldr	r2, [pc, #172]	; (8000564 <Timer_init+0x228>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d106      	bne.n	80004ca <Timer_init+0x18e>
		RCC->APB1ENR |= RCC_APB1ENR_TIM12EN;
 80004bc:	4b2c      	ldr	r3, [pc, #176]	; (8000570 <Timer_init+0x234>)
 80004be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004c0:	4a2b      	ldr	r2, [pc, #172]	; (8000570 <Timer_init+0x234>)
 80004c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004c6:	6413      	str	r3, [r2, #64]	; 0x40
 80004c8:	e014      	b.n	80004f4 <Timer_init+0x1b8>
	else if (TIM == TIM13)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a26      	ldr	r2, [pc, #152]	; (8000568 <Timer_init+0x22c>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d106      	bne.n	80004e0 <Timer_init+0x1a4>
		RCC->APB1ENR |= RCC_APB1ENR_TIM13EN;
 80004d2:	4b27      	ldr	r3, [pc, #156]	; (8000570 <Timer_init+0x234>)
 80004d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004d6:	4a26      	ldr	r2, [pc, #152]	; (8000570 <Timer_init+0x234>)
 80004d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004dc:	6413      	str	r3, [r2, #64]	; 0x40
 80004de:	e009      	b.n	80004f4 <Timer_init+0x1b8>
	else if (TIM == TIM14)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a22      	ldr	r2, [pc, #136]	; (800056c <Timer_init+0x230>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d105      	bne.n	80004f4 <Timer_init+0x1b8>
		RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 80004e8:	4b21      	ldr	r3, [pc, #132]	; (8000570 <Timer_init+0x234>)
 80004ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004ec:	4a20      	ldr	r2, [pc, #128]	; (8000570 <Timer_init+0x234>)
 80004ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f2:	6413      	str	r3, [r2, #64]	; 0x40

	// F_timer = f_CLK / (PSC + 1)
	F_timer = 1 / T_timer;
 80004f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f8:	613b      	str	r3, [r7, #16]
	prescaler = f_CLK / F_timer - 1;
 80004fa:	697a      	ldr	r2, [r7, #20]
 80004fc:	693b      	ldr	r3, [r7, #16]
 80004fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000502:	3b01      	subs	r3, #1
 8000504:	60fb      	str	r3, [r7, #12]

	TIM->PSC |= prescaler;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	431a      	orrs	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	629a      	str	r2, [r3, #40]	; 0x28
	TIM->ARR = AutoReload;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000518:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM->CR1 |= TIM_CR1_CEN;		// Counter enable
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f043 0201 	orr.w	r2, r3, #1
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	601a      	str	r2, [r3, #0]
	TIM->CR1 &= ~(TIM_CR1_DIR);		// Counter used as up counter
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f023 0210 	bic.w	r2, r3, #16
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	601a      	str	r2, [r3, #0]
}
 8000532:	bf00      	nop
 8000534:	3718      	adds	r7, #24
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40010000 	.word	0x40010000
 8000540:	40010400 	.word	0x40010400
 8000544:	40014000 	.word	0x40014000
 8000548:	40014400 	.word	0x40014400
 800054c:	40014800 	.word	0x40014800
 8000550:	40000400 	.word	0x40000400
 8000554:	40000800 	.word	0x40000800
 8000558:	40000c00 	.word	0x40000c00
 800055c:	40001000 	.word	0x40001000
 8000560:	40001400 	.word	0x40001400
 8000564:	40001800 	.word	0x40001800
 8000568:	40001c00 	.word	0x40001c00
 800056c:	40002000 	.word	0x40002000
 8000570:	40023800 	.word	0x40023800

08000574 <Timer_delay_ms>:

/*
 * delay by ms
 * */
void Timer_delay_ms(TIM_TypeDef *TIM, int ms)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
	TIM->CNT = 0;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2200      	movs	r2, #0
 8000582:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM->CNT < ms);
 8000584:	bf00      	nop
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	429a      	cmp	r2, r3
 800058e:	d3fa      	bcc.n	8000586 <Timer_delay_ms+0x12>
}
 8000590:	bf00      	nop
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
	...

080005a0 <main>:



/* MAIN */
int main()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	SystemClock_config();
 80005a4:	f7ff fe20 	bl	80001e8 <SystemClock_config>
	LED_init(led);
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <main+0x70>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff fe83 	bl	80002b8 <LED_init>
	Timer_init(TIM);
 80005b2:	4b18      	ldr	r3, [pc, #96]	; (8000614 <main+0x74>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff fec0 	bl	800033c <Timer_init>

	while(1)
	{
		toggle_led(led);
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <main+0x78>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	4a13      	ldr	r2, [pc, #76]	; (8000610 <main+0x70>)
 80005c2:	7812      	ldrb	r2, [r2, #0]
 80005c4:	4611      	mov	r1, r2
 80005c6:	2201      	movs	r2, #1
 80005c8:	408a      	lsls	r2, r1
 80005ca:	4013      	ands	r3, r2
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d10b      	bne.n	80005e8 <main+0x48>
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <main+0x78>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <main+0x70>)
 80005d6:	7812      	ldrb	r2, [r2, #0]
 80005d8:	4611      	mov	r1, r2
 80005da:	2201      	movs	r2, #1
 80005dc:	408a      	lsls	r2, r1
 80005de:	4611      	mov	r1, r2
 80005e0:	4a0d      	ldr	r2, [pc, #52]	; (8000618 <main+0x78>)
 80005e2:	430b      	orrs	r3, r1
 80005e4:	6193      	str	r3, [r2, #24]
 80005e6:	e00b      	b.n	8000600 <main+0x60>
 80005e8:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <main+0x78>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <main+0x70>)
 80005ee:	7812      	ldrb	r2, [r2, #0]
 80005f0:	3210      	adds	r2, #16
 80005f2:	2101      	movs	r1, #1
 80005f4:	fa01 f202 	lsl.w	r2, r1, r2
 80005f8:	4611      	mov	r1, r2
 80005fa:	4a07      	ldr	r2, [pc, #28]	; (8000618 <main+0x78>)
 80005fc:	430b      	orrs	r3, r1
 80005fe:	6193      	str	r3, [r2, #24]
		Timer_delay_ms(TIM, 500);
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <main+0x74>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ffb3 	bl	8000574 <Timer_delay_ms>
		toggle_led(led);
 800060e:	e7d5      	b.n	80005bc <main+0x1c>
 8000610:	20000004 	.word	0x20000004
 8000614:	20000008 	.word	0x20000008
 8000618:	40020c00 	.word	0x40020c00

0800061c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800061e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000620:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000624:	480c      	ldr	r0, [pc, #48]	; (8000658 <LoopForever+0x6>)
  ldr r1, =_edata
 8000626:	490d      	ldr	r1, [pc, #52]	; (800065c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000628:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <LoopForever+0xe>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800062c:	e002      	b.n	8000634 <LoopCopyDataInit>

0800062e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000632:	3304      	adds	r3, #4

08000634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000638:	d3f9      	bcc.n	800062e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <LoopForever+0x12>)
  ldr r4, =_ebss
 800063c:	4c0a      	ldr	r4, [pc, #40]	; (8000668 <LoopForever+0x16>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000640:	e001      	b.n	8000646 <LoopFillZerobss>

08000642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000644:	3204      	adds	r2, #4

08000646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000648:	d3fb      	bcc.n	8000642 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800064a:	f000 f811 	bl	8000670 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064e:	f7ff ffa7 	bl	80005a0 <main>

08000652 <LoopForever>:

LoopForever:
  b LoopForever
 8000652:	e7fe      	b.n	8000652 <LoopForever>
  ldr   r0, =_estack
 8000654:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800065c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000660:	080006e0 	.word	0x080006e0
  ldr r2, =_sbss
 8000664:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000668:	20000028 	.word	0x20000028

0800066c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800066c:	e7fe      	b.n	800066c <ADC_IRQHandler>
	...

08000670 <__libc_init_array>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	4d0d      	ldr	r5, [pc, #52]	; (80006a8 <__libc_init_array+0x38>)
 8000674:	4c0d      	ldr	r4, [pc, #52]	; (80006ac <__libc_init_array+0x3c>)
 8000676:	1b64      	subs	r4, r4, r5
 8000678:	10a4      	asrs	r4, r4, #2
 800067a:	2600      	movs	r6, #0
 800067c:	42a6      	cmp	r6, r4
 800067e:	d109      	bne.n	8000694 <__libc_init_array+0x24>
 8000680:	4d0b      	ldr	r5, [pc, #44]	; (80006b0 <__libc_init_array+0x40>)
 8000682:	4c0c      	ldr	r4, [pc, #48]	; (80006b4 <__libc_init_array+0x44>)
 8000684:	f000 f818 	bl	80006b8 <_init>
 8000688:	1b64      	subs	r4, r4, r5
 800068a:	10a4      	asrs	r4, r4, #2
 800068c:	2600      	movs	r6, #0
 800068e:	42a6      	cmp	r6, r4
 8000690:	d105      	bne.n	800069e <__libc_init_array+0x2e>
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f855 3b04 	ldr.w	r3, [r5], #4
 8000698:	4798      	blx	r3
 800069a:	3601      	adds	r6, #1
 800069c:	e7ee      	b.n	800067c <__libc_init_array+0xc>
 800069e:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a2:	4798      	blx	r3
 80006a4:	3601      	adds	r6, #1
 80006a6:	e7f2      	b.n	800068e <__libc_init_array+0x1e>
 80006a8:	080006d8 	.word	0x080006d8
 80006ac:	080006d8 	.word	0x080006d8
 80006b0:	080006d8 	.word	0x080006d8
 80006b4:	080006dc 	.word	0x080006dc

080006b8 <_init>:
 80006b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ba:	bf00      	nop
 80006bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006be:	bc08      	pop	{r3}
 80006c0:	469e      	mov	lr, r3
 80006c2:	4770      	bx	lr

080006c4 <_fini>:
 80006c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c6:	bf00      	nop
 80006c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ca:	bc08      	pop	{r3}
 80006cc:	469e      	mov	lr, r3
 80006ce:	4770      	bx	lr
