
ADC_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080030c0  080030c0  000130c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800317c  0800317c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800317c  0800317c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003184  08003184  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003184  08003184  00013184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003188  08003188  00013188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800318c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000080  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f0  200000f0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005c93  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001471  00000000  00000000  00025d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005c8  00000000  00000000  000271a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000510  00000000  00000000  00027770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021986  00000000  00000000  00027c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006e28  00000000  00000000  00049606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdef8  00000000  00000000  0005042e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011e326  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d8c  00000000  00000000  0011e378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080030a8 	.word	0x080030a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080030a8 	.word	0x080030a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800057c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000580:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	2b00      	cmp	r3, #0
 800058a:	d013      	beq.n	80005b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000594:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00b      	beq.n	80005b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	e000      	b.n	80005a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800059e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f9      	beq.n	800059e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b086      	sub	sp, #24
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	60f8      	str	r0, [r7, #12]
 80005ca:	60b9      	str	r1, [r7, #8]
 80005cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
 80005d2:	e009      	b.n	80005e8 <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	1c5a      	adds	r2, r3, #1
 80005d8:	60ba      	str	r2, [r7, #8]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ffc9 	bl	8000574 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	3301      	adds	r3, #1
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	697a      	ldr	r2, [r7, #20]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	dbf1      	blt.n	80005d4 <_write+0x12>
  }

  return len;
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3718      	adds	r7, #24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fa56 	bl	8000ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f82a 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 f8d8 	bl	80007bc <MX_GPIO_Init>
  MX_ADC1_Init();
 800060c:	f000 f884 	bl	8000718 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000610:	480f      	ldr	r0, [pc, #60]	; (8000650 <main+0x54>)
 8000612:	f000 fb27 	bl	8000c64 <HAL_ADC_Start>

	  if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK)
 8000616:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800061a:	480d      	ldr	r0, [pc, #52]	; (8000650 <main+0x54>)
 800061c:	f000 fc27 	bl	8000e6e <HAL_ADC_PollForConversion>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d106      	bne.n	8000634 <main+0x38>
		  ADC_value = HAL_ADC_GetValue(&hadc1);
 8000626:	480a      	ldr	r0, [pc, #40]	; (8000650 <main+0x54>)
 8000628:	f000 fcac 	bl	8000f84 <HAL_ADC_GetValue>
 800062c:	4603      	mov	r3, r0
 800062e:	b29a      	uxth	r2, r3
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <main+0x58>)
 8000632:	801a      	strh	r2, [r3, #0]

	  printf("ADC Value is %d\n", ADC_value);
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <main+0x58>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	4807      	ldr	r0, [pc, #28]	; (8000658 <main+0x5c>)
 800063c:	f001 fda6 	bl	800218c <iprintf>

	  HAL_ADC_Stop(&hadc1);
 8000640:	4803      	ldr	r0, [pc, #12]	; (8000650 <main+0x54>)
 8000642:	f000 fbe1 	bl	8000e08 <HAL_ADC_Stop>

	  HAL_Delay(1000);
 8000646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064a:	f000 faa3 	bl	8000b94 <HAL_Delay>
  {
 800064e:	e7df      	b.n	8000610 <main+0x14>
 8000650:	2000008c 	.word	0x2000008c
 8000654:	200000d4 	.word	0x200000d4
 8000658:	080030c0 	.word	0x080030c0

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fd86 	bl	800217c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <SystemClock_Config+0xb4>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <SystemClock_Config+0xb4>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <SystemClock_Config+0xb4>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <SystemClock_Config+0xb8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a1b      	ldr	r2, [pc, #108]	; (8000714 <SystemClock_Config+0xb8>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <SystemClock_Config+0xb8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 f907 	bl	80018e0 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006d8:	f000 f88a 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fb6a 	bl	8001dd0 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000702:	f000 f875 	bl	80007f0 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800071e:	463b      	mov	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800072a:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <MX_ADC1_Init+0x98>)
 800072c:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <MX_ADC1_Init+0x9c>)
 800072e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000730:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000736:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800073c:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_ADC1_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000742:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MX_ADC1_Init+0x98>)
 800074a:	2200      	movs	r2, #0
 800074c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000750:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000752:	2200      	movs	r2, #0
 8000754:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000758:	4a17      	ldr	r2, [pc, #92]	; (80007b8 <MX_ADC1_Init+0xa0>)
 800075a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_ADC1_Init+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000764:	2201      	movs	r2, #1
 8000766:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_ADC1_Init+0x98>)
 800076a:	2200      	movs	r2, #0
 800076c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000772:	2201      	movs	r2, #1
 8000774:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000776:	480e      	ldr	r0, [pc, #56]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000778:	f000 fa30 	bl	8000bdc <HAL_ADC_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000782:	f000 f835 	bl	80007f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000786:	2301      	movs	r3, #1
 8000788:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800078a:	2301      	movs	r3, #1
 800078c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000792:	463b      	mov	r3, r7
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000798:	f000 fc02 	bl	8000fa0 <HAL_ADC_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007a2:	f000 f825 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	2000008c 	.word	0x2000008c
 80007b4:	40012000 	.word	0x40012000
 80007b8:	0f000001 	.word	0x0f000001

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_GPIO_Init+0x30>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <MX_GPIO_Init+0x30>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_GPIO_Init+0x30>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <Error_Handler+0x8>
	...

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <HAL_MspInit+0x4c>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	4a0f      	ldr	r2, [pc, #60]	; (8000848 <HAL_MspInit+0x4c>)
 800080c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000810:	6453      	str	r3, [r2, #68]	; 0x44
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <HAL_MspInit+0x4c>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <HAL_MspInit+0x4c>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	4a08      	ldr	r2, [pc, #32]	; (8000848 <HAL_MspInit+0x4c>)
 8000828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082c:	6413      	str	r3, [r2, #64]	; 0x40
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_MspInit+0x4c>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800

0800084c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <HAL_ADC_MspInit+0x7c>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d127      	bne.n	80008be <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <HAL_ADC_MspInit+0x80>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <HAL_ADC_MspInit+0x80>)
 8000878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800087c:	6453      	str	r3, [r2, #68]	; 0x44
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <HAL_ADC_MspInit+0x80>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <HAL_ADC_MspInit+0x80>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <HAL_ADC_MspInit+0x80>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <HAL_ADC_MspInit+0x80>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008a6:	2302      	movs	r3, #2
 80008a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008aa:	2303      	movs	r3, #3
 80008ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <HAL_ADC_MspInit+0x84>)
 80008ba:	f000 fe75 	bl	80015a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008be:	bf00      	nop
 80008c0:	3728      	adds	r7, #40	; 0x28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40012000 	.word	0x40012000
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020000 	.word	0x40020000

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <NMI_Handler+0x4>

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <MemManage_Handler+0x4>

080008e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000920:	f000 f918 	bl	8000b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}

08000928 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	e00a      	b.n	8000950 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800093a:	f3af 8000 	nop.w
 800093e:	4601      	mov	r1, r0
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	60ba      	str	r2, [r7, #8]
 8000946:	b2ca      	uxtb	r2, r1
 8000948:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	3301      	adds	r3, #1
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697a      	ldr	r2, [r7, #20]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	429a      	cmp	r2, r3
 8000956:	dbf0      	blt.n	800093a <_read+0x12>
  }

  return len;
 8000958:	687b      	ldr	r3, [r7, #4]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800096a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
 8000982:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800098a:	605a      	str	r2, [r3, #4]
  return 0;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <_isatty>:

int _isatty(int file)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
	...

080009cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d4:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <_sbrk+0x5c>)
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <_sbrk+0x60>)
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <_sbrk+0x64>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d102      	bne.n	80009ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <_sbrk+0x64>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <_sbrk+0x68>)
 80009ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <_sbrk+0x64>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4413      	add	r3, r2
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d207      	bcs.n	8000a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009fc:	f001 fb94 	bl	8002128 <__errno>
 8000a00:	4603      	mov	r3, r0
 8000a02:	220c      	movs	r2, #12
 8000a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0a:	e009      	b.n	8000a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <_sbrk+0x64>)
 8000a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20020000 	.word	0x20020000
 8000a2c:	00000400 	.word	0x00000400
 8000a30:	200000d8 	.word	0x200000d8
 8000a34:	200000f0 	.word	0x200000f0

08000a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <SystemInit+0x20>)
 8000a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a42:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <SystemInit+0x20>)
 8000a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a62:	490e      	ldr	r1, [pc, #56]	; (8000a9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a64:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a78:	4c0b      	ldr	r4, [pc, #44]	; (8000aa8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a86:	f7ff ffd7 	bl	8000a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f001 fb53 	bl	8002134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8e:	f7ff fdb5 	bl	80005fc <main>
  bx  lr    
 8000a92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a9c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000aa0:	0800318c 	.word	0x0800318c
  ldr r2, =_sbss
 8000aa4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000aa8:	200000f0 	.word	0x200000f0

08000aac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC_IRQHandler>
	...

08000ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <HAL_Init+0x40>)
 8000aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <HAL_Init+0x40>)
 8000ac6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <HAL_Init+0x40>)
 8000ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f000 fd31 	bl	8001540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ade:	200f      	movs	r0, #15
 8000ae0:	f000 f808 	bl	8000af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae4:	f7ff fe8a 	bl	80007fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023c00 	.word	0x40023c00

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_InitTick+0x54>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_InitTick+0x58>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fd3b 	bl	800158e <HAL_SYSTICK_Config>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00e      	b.n	8000b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	d80a      	bhi.n	8000b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f000 fd11 	bl	8001556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b34:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <HAL_InitTick+0x5c>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e000      	b.n	8000b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	20000004 	.word	0x20000004

08000b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x20>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x24>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <HAL_IncTick+0x24>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000008 	.word	0x20000008
 8000b78:	200000dc 	.word	0x200000dc

08000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <HAL_GetTick+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	200000dc 	.word	0x200000dc

08000b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b9c:	f7ff ffee 	bl	8000b7c <HAL_GetTick>
 8000ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bac:	d005      	beq.n	8000bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <HAL_Delay+0x44>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bba:	bf00      	nop
 8000bbc:	f7ff ffde 	bl	8000b7c <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d8f7      	bhi.n	8000bbc <HAL_Delay+0x28>
  {
  }
}
 8000bcc:	bf00      	nop
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000008 	.word	0x20000008

08000bdc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e033      	b.n	8000c5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d109      	bne.n	8000c0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff fe26 	bl	800084c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 0310 	and.w	r3, r3, #16
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d118      	bne.n	8000c4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c22:	f023 0302 	bic.w	r3, r3, #2
 8000c26:	f043 0202 	orr.w	r2, r3, #2
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f000 fad8 	bl	80011e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f023 0303 	bic.w	r3, r3, #3
 8000c42:	f043 0201 	orr.w	r2, r3, #1
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	641a      	str	r2, [r3, #64]	; 0x40
 8000c4a:	e001      	b.n	8000c50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d101      	bne.n	8000c7e <HAL_ADC_Start+0x1a>
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	e0b2      	b.n	8000de4 <HAL_ADC_Start+0x180>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2201      	movs	r2, #1
 8000c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d018      	beq.n	8000cc6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f042 0201 	orr.w	r2, r2, #1
 8000ca2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ca4:	4b52      	ldr	r3, [pc, #328]	; (8000df0 <HAL_ADC_Start+0x18c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a52      	ldr	r2, [pc, #328]	; (8000df4 <HAL_ADC_Start+0x190>)
 8000caa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cae:	0c9a      	lsrs	r2, r3, #18
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000cb8:	e002      	b.n	8000cc0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d1f9      	bne.n	8000cba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d17a      	bne.n	8000dca <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cdc:	f023 0301 	bic.w	r3, r3, #1
 8000ce0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d007      	beq.n	8000d06 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cfe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d12:	d106      	bne.n	8000d22 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d18:	f023 0206 	bic.w	r2, r3, #6
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	645a      	str	r2, [r3, #68]	; 0x44
 8000d20:	e002      	b.n	8000d28 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d30:	4b31      	ldr	r3, [pc, #196]	; (8000df8 <HAL_ADC_Start+0x194>)
 8000d32:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d3c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 031f 	and.w	r3, r3, #31
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d12a      	bne.n	8000da0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a2b      	ldr	r2, [pc, #172]	; (8000dfc <HAL_ADC_Start+0x198>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d015      	beq.n	8000d80 <HAL_ADC_Start+0x11c>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a29      	ldr	r2, [pc, #164]	; (8000e00 <HAL_ADC_Start+0x19c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d105      	bne.n	8000d6a <HAL_ADC_Start+0x106>
 8000d5e:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <HAL_ADC_Start+0x194>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 031f 	and.w	r3, r3, #31
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d00a      	beq.n	8000d80 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a25      	ldr	r2, [pc, #148]	; (8000e04 <HAL_ADC_Start+0x1a0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d136      	bne.n	8000de2 <HAL_ADC_Start+0x17e>
 8000d74:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <HAL_ADC_Start+0x194>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0310 	and.w	r3, r3, #16
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d130      	bne.n	8000de2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d129      	bne.n	8000de2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	e020      	b.n	8000de2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a15      	ldr	r2, [pc, #84]	; (8000dfc <HAL_ADC_Start+0x198>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d11b      	bne.n	8000de2 <HAL_ADC_Start+0x17e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d114      	bne.n	8000de2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	e00b      	b.n	8000de2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f043 0210 	orr.w	r2, r3, #16
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f043 0201 	orr.w	r2, r3, #1
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	20000000 	.word	0x20000000
 8000df4:	431bde83 	.word	0x431bde83
 8000df8:	40012300 	.word	0x40012300
 8000dfc:	40012000 	.word	0x40012000
 8000e00:	40012100 	.word	0x40012100
 8000e04:	40012200 	.word	0x40012200

08000e08 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d101      	bne.n	8000e1e <HAL_ADC_Stop+0x16>
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	e021      	b.n	8000e62 <HAL_ADC_Stop+0x5a>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2201      	movs	r2, #1
 8000e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f022 0201 	bic.w	r2, r2, #1
 8000e34:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d109      	bne.n	8000e58 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e4c:	f023 0301 	bic.w	r3, r3, #1
 8000e50:	f043 0201 	orr.w	r2, r3, #1
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b084      	sub	sp, #16
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e8a:	d113      	bne.n	8000eb4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e9a:	d10b      	bne.n	8000eb4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	f043 0220 	orr.w	r2, r3, #32
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e063      	b.n	8000f7c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000eb4:	f7ff fe62 	bl	8000b7c <HAL_GetTick>
 8000eb8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000eba:	e021      	b.n	8000f00 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec2:	d01d      	beq.n	8000f00 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d007      	beq.n	8000eda <HAL_ADC_PollForConversion+0x6c>
 8000eca:	f7ff fe57 	bl	8000b7c <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d212      	bcs.n	8000f00 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d00b      	beq.n	8000f00 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	f043 0204 	orr.w	r2, r3, #4
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e03d      	b.n	8000f7c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d1d6      	bne.n	8000ebc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f06f 0212 	mvn.w	r2, #18
 8000f16:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d123      	bne.n	8000f7a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d11f      	bne.n	8000f7a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f40:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d006      	beq.n	8000f56 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d111      	bne.n	8000f7a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d105      	bne.n	8000f7a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f043 0201 	orr.w	r2, r3, #1
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d101      	bne.n	8000fbc <HAL_ADC_ConfigChannel+0x1c>
 8000fb8:	2302      	movs	r3, #2
 8000fba:	e105      	b.n	80011c8 <HAL_ADC_ConfigChannel+0x228>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b09      	cmp	r3, #9
 8000fca:	d925      	bls.n	8001018 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68d9      	ldr	r1, [r3, #12]
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	3b1e      	subs	r3, #30
 8000fe2:	2207      	movs	r2, #7
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43da      	mvns	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	400a      	ands	r2, r1
 8000ff0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68d9      	ldr	r1, [r3, #12]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	b29b      	uxth	r3, r3
 8001002:	4618      	mov	r0, r3
 8001004:	4603      	mov	r3, r0
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4403      	add	r3, r0
 800100a:	3b1e      	subs	r3, #30
 800100c:	409a      	lsls	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	430a      	orrs	r2, r1
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	e022      	b.n	800105e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6919      	ldr	r1, [r3, #16]
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	b29b      	uxth	r3, r3
 8001024:	461a      	mov	r2, r3
 8001026:	4613      	mov	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4413      	add	r3, r2
 800102c:	2207      	movs	r2, #7
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	400a      	ands	r2, r1
 800103a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6919      	ldr	r1, [r3, #16]
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	b29b      	uxth	r3, r3
 800104c:	4618      	mov	r0, r3
 800104e:	4603      	mov	r3, r0
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4403      	add	r3, r0
 8001054:	409a      	lsls	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	430a      	orrs	r2, r1
 800105c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b06      	cmp	r3, #6
 8001064:	d824      	bhi.n	80010b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	3b05      	subs	r3, #5
 8001078:	221f      	movs	r2, #31
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	400a      	ands	r2, r1
 8001086:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	b29b      	uxth	r3, r3
 8001094:	4618      	mov	r0, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	3b05      	subs	r3, #5
 80010a2:	fa00 f203 	lsl.w	r2, r0, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	430a      	orrs	r2, r1
 80010ac:	635a      	str	r2, [r3, #52]	; 0x34
 80010ae:	e04c      	b.n	800114a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b0c      	cmp	r3, #12
 80010b6:	d824      	bhi.n	8001102 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	3b23      	subs	r3, #35	; 0x23
 80010ca:	221f      	movs	r2, #31
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43da      	mvns	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	400a      	ands	r2, r1
 80010d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	4613      	mov	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	3b23      	subs	r3, #35	; 0x23
 80010f4:	fa00 f203 	lsl.w	r2, r0, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001100:	e023      	b.n	800114a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	3b41      	subs	r3, #65	; 0x41
 8001114:	221f      	movs	r2, #31
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	400a      	ands	r2, r1
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	4618      	mov	r0, r3
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	3b41      	subs	r3, #65	; 0x41
 800113e:	fa00 f203 	lsl.w	r2, r0, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	430a      	orrs	r2, r1
 8001148:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800114a:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <HAL_ADC_ConfigChannel+0x234>)
 800114c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <HAL_ADC_ConfigChannel+0x238>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d109      	bne.n	800116c <HAL_ADC_ConfigChannel+0x1cc>
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b12      	cmp	r3, #18
 800115e:	d105      	bne.n	800116c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a19      	ldr	r2, [pc, #100]	; (80011d8 <HAL_ADC_ConfigChannel+0x238>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d123      	bne.n	80011be <HAL_ADC_ConfigChannel+0x21e>
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b10      	cmp	r3, #16
 800117c:	d003      	beq.n	8001186 <HAL_ADC_ConfigChannel+0x1e6>
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b11      	cmp	r3, #17
 8001184:	d11b      	bne.n	80011be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b10      	cmp	r3, #16
 8001198:	d111      	bne.n	80011be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <HAL_ADC_ConfigChannel+0x23c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a10      	ldr	r2, [pc, #64]	; (80011e0 <HAL_ADC_ConfigChannel+0x240>)
 80011a0:	fba2 2303 	umull	r2, r3, r2, r3
 80011a4:	0c9a      	lsrs	r2, r3, #18
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011b0:	e002      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f9      	bne.n	80011b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	40012300 	.word	0x40012300
 80011d8:	40012000 	.word	0x40012000
 80011dc:	20000000 	.word	0x20000000
 80011e0:	431bde83 	.word	0x431bde83

080011e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011ec:	4b79      	ldr	r3, [pc, #484]	; (80013d4 <ADC_Init+0x1f0>)
 80011ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	431a      	orrs	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001218:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6859      	ldr	r1, [r3, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	021a      	lsls	r2, r3, #8
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	430a      	orrs	r2, r1
 800122c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800123c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6859      	ldr	r1, [r3, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800125e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6899      	ldr	r1, [r3, #8]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	430a      	orrs	r2, r1
 8001270:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001276:	4a58      	ldr	r2, [pc, #352]	; (80013d8 <ADC_Init+0x1f4>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d022      	beq.n	80012c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800128a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6899      	ldr	r1, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6899      	ldr	r1, [r3, #8]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	430a      	orrs	r2, r1
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	e00f      	b.n	80012e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 0202 	bic.w	r2, r2, #2
 80012f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6899      	ldr	r1, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	7e1b      	ldrb	r3, [r3, #24]
 80012fc:	005a      	lsls	r2, r3, #1
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	430a      	orrs	r2, r1
 8001304:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d01b      	beq.n	8001348 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800131e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800132e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6859      	ldr	r1, [r3, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	3b01      	subs	r3, #1
 800133c:	035a      	lsls	r2, r3, #13
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	430a      	orrs	r2, r1
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	e007      	b.n	8001358 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001356:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001366:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	3b01      	subs	r3, #1
 8001374:	051a      	lsls	r2, r3, #20
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800138c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6899      	ldr	r1, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800139a:	025a      	lsls	r2, r3, #9
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6899      	ldr	r1, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	029a      	lsls	r2, r3, #10
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	609a      	str	r2, [r3, #8]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	40012300 	.word	0x40012300
 80013d8:	0f000001 	.word	0x0f000001

080013dc <__NVIC_SetPriorityGrouping>:
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f8:	4013      	ands	r3, r2
 80013fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	60d3      	str	r3, [r2, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_GetPriorityGrouping>:
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <__NVIC_GetPriorityGrouping+0x18>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	f003 0307 	and.w	r3, r3, #7
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_SetPriority>:
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	db0a      	blt.n	800146a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	b2da      	uxtb	r2, r3
 8001458:	490c      	ldr	r1, [pc, #48]	; (800148c <__NVIC_SetPriority+0x4c>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	0112      	lsls	r2, r2, #4
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	440b      	add	r3, r1
 8001464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001468:	e00a      	b.n	8001480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <__NVIC_SetPriority+0x50>)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	3b04      	subs	r3, #4
 8001478:	0112      	lsls	r2, r2, #4
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	440b      	add	r3, r1
 800147e:	761a      	strb	r2, [r3, #24]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000e100 	.word	0xe000e100
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <NVIC_EncodePriority>:
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f1c3 0307 	rsb	r3, r3, #7
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	bf28      	it	cs
 80014b2:	2304      	movcs	r3, #4
 80014b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3304      	adds	r3, #4
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d902      	bls.n	80014c4 <NVIC_EncodePriority+0x30>
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3b03      	subs	r3, #3
 80014c2:	e000      	b.n	80014c6 <NVIC_EncodePriority+0x32>
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	401a      	ands	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43d9      	mvns	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	4313      	orrs	r3, r2
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3724      	adds	r7, #36	; 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <SysTick_Config>:
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800150c:	d301      	bcc.n	8001512 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800150e:	2301      	movs	r3, #1
 8001510:	e00f      	b.n	8001532 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <SysTick_Config+0x40>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151a:	210f      	movs	r1, #15
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f7ff ff8e 	bl	8001440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <SysTick_Config+0x40>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152a:	4b04      	ldr	r3, [pc, #16]	; (800153c <SysTick_Config+0x40>)
 800152c:	2207      	movs	r2, #7
 800152e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	e000e010 	.word	0xe000e010

08001540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ff47 	bl	80013dc <__NVIC_SetPriorityGrouping>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001568:	f7ff ff5c 	bl	8001424 <__NVIC_GetPriorityGrouping>
 800156c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	6978      	ldr	r0, [r7, #20]
 8001574:	f7ff ff8e 	bl	8001494 <NVIC_EncodePriority>
 8001578:	4602      	mov	r2, r0
 800157a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff5d 	bl	8001440 <__NVIC_SetPriority>
}
 8001586:	bf00      	nop
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffb0 	bl	80014fc <SysTick_Config>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
 80015c2:	e16b      	b.n	800189c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015c4:	2201      	movs	r2, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	429a      	cmp	r2, r3
 80015de:	f040 815a 	bne.w	8001896 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d005      	beq.n	80015fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d130      	bne.n	800165c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001630:	2201      	movs	r2, #1
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f003 0201 	and.w	r2, r3, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b03      	cmp	r3, #3
 8001666:	d017      	beq.n	8001698 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d123      	bne.n	80016ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	08da      	lsrs	r2, r3, #3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3208      	adds	r2, #8
 80016ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	220f      	movs	r2, #15
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	08da      	lsrs	r2, r3, #3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3208      	adds	r2, #8
 80016e6:	69b9      	ldr	r1, [r7, #24]
 80016e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2203      	movs	r2, #3
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0203 	and.w	r2, r3, #3
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80b4 	beq.w	8001896 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b60      	ldr	r3, [pc, #384]	; (80018b4 <HAL_GPIO_Init+0x30c>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	4a5f      	ldr	r2, [pc, #380]	; (80018b4 <HAL_GPIO_Init+0x30c>)
 8001738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173c:	6453      	str	r3, [r2, #68]	; 0x44
 800173e:	4b5d      	ldr	r3, [pc, #372]	; (80018b4 <HAL_GPIO_Init+0x30c>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800174a:	4a5b      	ldr	r2, [pc, #364]	; (80018b8 <HAL_GPIO_Init+0x310>)
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	220f      	movs	r2, #15
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a52      	ldr	r2, [pc, #328]	; (80018bc <HAL_GPIO_Init+0x314>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d02b      	beq.n	80017ce <HAL_GPIO_Init+0x226>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a51      	ldr	r2, [pc, #324]	; (80018c0 <HAL_GPIO_Init+0x318>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d025      	beq.n	80017ca <HAL_GPIO_Init+0x222>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a50      	ldr	r2, [pc, #320]	; (80018c4 <HAL_GPIO_Init+0x31c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d01f      	beq.n	80017c6 <HAL_GPIO_Init+0x21e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4f      	ldr	r2, [pc, #316]	; (80018c8 <HAL_GPIO_Init+0x320>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d019      	beq.n	80017c2 <HAL_GPIO_Init+0x21a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4e      	ldr	r2, [pc, #312]	; (80018cc <HAL_GPIO_Init+0x324>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d013      	beq.n	80017be <HAL_GPIO_Init+0x216>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4d      	ldr	r2, [pc, #308]	; (80018d0 <HAL_GPIO_Init+0x328>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d00d      	beq.n	80017ba <HAL_GPIO_Init+0x212>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4c      	ldr	r2, [pc, #304]	; (80018d4 <HAL_GPIO_Init+0x32c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d007      	beq.n	80017b6 <HAL_GPIO_Init+0x20e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4b      	ldr	r2, [pc, #300]	; (80018d8 <HAL_GPIO_Init+0x330>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d101      	bne.n	80017b2 <HAL_GPIO_Init+0x20a>
 80017ae:	2307      	movs	r3, #7
 80017b0:	e00e      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017b2:	2308      	movs	r3, #8
 80017b4:	e00c      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017b6:	2306      	movs	r3, #6
 80017b8:	e00a      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017ba:	2305      	movs	r3, #5
 80017bc:	e008      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017be:	2304      	movs	r3, #4
 80017c0:	e006      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017c2:	2303      	movs	r3, #3
 80017c4:	e004      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017c6:	2302      	movs	r3, #2
 80017c8:	e002      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017ce:	2300      	movs	r3, #0
 80017d0:	69fa      	ldr	r2, [r7, #28]
 80017d2:	f002 0203 	and.w	r2, r2, #3
 80017d6:	0092      	lsls	r2, r2, #2
 80017d8:	4093      	lsls	r3, r2
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017e0:	4935      	ldr	r1, [pc, #212]	; (80018b8 <HAL_GPIO_Init+0x310>)
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	3302      	adds	r3, #2
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ee:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <HAL_GPIO_Init+0x334>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001812:	4a32      	ldr	r2, [pc, #200]	; (80018dc <HAL_GPIO_Init+0x334>)
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001818:	4b30      	ldr	r3, [pc, #192]	; (80018dc <HAL_GPIO_Init+0x334>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800183c:	4a27      	ldr	r2, [pc, #156]	; (80018dc <HAL_GPIO_Init+0x334>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001842:	4b26      	ldr	r3, [pc, #152]	; (80018dc <HAL_GPIO_Init+0x334>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	43db      	mvns	r3, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4013      	ands	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001866:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <HAL_GPIO_Init+0x334>)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_GPIO_Init+0x334>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001890:	4a12      	ldr	r2, [pc, #72]	; (80018dc <HAL_GPIO_Init+0x334>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3301      	adds	r3, #1
 800189a:	61fb      	str	r3, [r7, #28]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	2b0f      	cmp	r3, #15
 80018a0:	f67f ae90 	bls.w	80015c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	3724      	adds	r7, #36	; 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40013800 	.word	0x40013800
 80018bc:	40020000 	.word	0x40020000
 80018c0:	40020400 	.word	0x40020400
 80018c4:	40020800 	.word	0x40020800
 80018c8:	40020c00 	.word	0x40020c00
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40021400 	.word	0x40021400
 80018d4:	40021800 	.word	0x40021800
 80018d8:	40021c00 	.word	0x40021c00
 80018dc:	40013c00 	.word	0x40013c00

080018e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e267      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d075      	beq.n	80019ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018fe:	4b88      	ldr	r3, [pc, #544]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 030c 	and.w	r3, r3, #12
 8001906:	2b04      	cmp	r3, #4
 8001908:	d00c      	beq.n	8001924 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800190a:	4b85      	ldr	r3, [pc, #532]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001912:	2b08      	cmp	r3, #8
 8001914:	d112      	bne.n	800193c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001916:	4b82      	ldr	r3, [pc, #520]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001922:	d10b      	bne.n	800193c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	4b7e      	ldr	r3, [pc, #504]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d05b      	beq.n	80019e8 <HAL_RCC_OscConfig+0x108>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d157      	bne.n	80019e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e242      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001944:	d106      	bne.n	8001954 <HAL_RCC_OscConfig+0x74>
 8001946:	4b76      	ldr	r3, [pc, #472]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a75      	ldr	r2, [pc, #468]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 800194c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e01d      	b.n	8001990 <HAL_RCC_OscConfig+0xb0>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x98>
 800195e:	4b70      	ldr	r3, [pc, #448]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a6f      	ldr	r2, [pc, #444]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 8001964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	4b6d      	ldr	r3, [pc, #436]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a6c      	ldr	r2, [pc, #432]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 8001970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e00b      	b.n	8001990 <HAL_RCC_OscConfig+0xb0>
 8001978:	4b69      	ldr	r3, [pc, #420]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a68      	ldr	r2, [pc, #416]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 800197e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	4b66      	ldr	r3, [pc, #408]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a65      	ldr	r2, [pc, #404]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 800198a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d013      	beq.n	80019c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff f8f0 	bl	8000b7c <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a0:	f7ff f8ec 	bl	8000b7c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e207      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b2:	4b5b      	ldr	r3, [pc, #364]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0xc0>
 80019be:	e014      	b.n	80019ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7ff f8dc 	bl	8000b7c <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c8:	f7ff f8d8 	bl	8000b7c <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	; 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e1f3      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019da:	4b51      	ldr	r3, [pc, #324]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0xe8>
 80019e6:	e000      	b.n	80019ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d063      	beq.n	8001abe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019f6:	4b4a      	ldr	r3, [pc, #296]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00b      	beq.n	8001a1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a02:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d11c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d116      	bne.n	8001a48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1a:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <HAL_RCC_OscConfig+0x152>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e1c7      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a32:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4937      	ldr	r1, [pc, #220]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a46:	e03a      	b.n	8001abe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d020      	beq.n	8001a92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a50:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <HAL_RCC_OscConfig+0x244>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a56:	f7ff f891 	bl	8000b7c <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a5e:	f7ff f88d 	bl	8000b7c <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e1a8      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a70:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f0      	beq.n	8001a5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7c:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4925      	ldr	r1, [pc, #148]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]
 8001a90:	e015      	b.n	8001abe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a92:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <HAL_RCC_OscConfig+0x244>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff f870 	bl	8000b7c <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa0:	f7ff f86c 	bl	8000b7c <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e187      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d036      	beq.n	8001b38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d016      	beq.n	8001b00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <HAL_RCC_OscConfig+0x248>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad8:	f7ff f850 	bl	8000b7c <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae0:	f7ff f84c 	bl	8000b7c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e167      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_RCC_OscConfig+0x240>)
 8001af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x200>
 8001afe:	e01b      	b.n	8001b38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_RCC_OscConfig+0x248>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b06:	f7ff f839 	bl	8000b7c <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0c:	e00e      	b.n	8001b2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b0e:	f7ff f835 	bl	8000b7c <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d907      	bls.n	8001b2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e150      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4e2>
 8001b20:	40023800 	.word	0x40023800
 8001b24:	42470000 	.word	0x42470000
 8001b28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2c:	4b88      	ldr	r3, [pc, #544]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1ea      	bne.n	8001b0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 8097 	beq.w	8001c74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4a:	4b81      	ldr	r3, [pc, #516]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10f      	bne.n	8001b76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	4b7d      	ldr	r3, [pc, #500]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a7c      	ldr	r2, [pc, #496]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b7a      	ldr	r3, [pc, #488]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b72:	2301      	movs	r3, #1
 8001b74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b76:	4b77      	ldr	r3, [pc, #476]	; (8001d54 <HAL_RCC_OscConfig+0x474>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d118      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b82:	4b74      	ldr	r3, [pc, #464]	; (8001d54 <HAL_RCC_OscConfig+0x474>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a73      	ldr	r2, [pc, #460]	; (8001d54 <HAL_RCC_OscConfig+0x474>)
 8001b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8e:	f7fe fff5 	bl	8000b7c <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b96:	f7fe fff1 	bl	8000b7c <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e10c      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba8:	4b6a      	ldr	r3, [pc, #424]	; (8001d54 <HAL_RCC_OscConfig+0x474>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d106      	bne.n	8001bca <HAL_RCC_OscConfig+0x2ea>
 8001bbc:	4b64      	ldr	r3, [pc, #400]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc0:	4a63      	ldr	r2, [pc, #396]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc8:	e01c      	b.n	8001c04 <HAL_RCC_OscConfig+0x324>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2b05      	cmp	r3, #5
 8001bd0:	d10c      	bne.n	8001bec <HAL_RCC_OscConfig+0x30c>
 8001bd2:	4b5f      	ldr	r3, [pc, #380]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd6:	4a5e      	ldr	r2, [pc, #376]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bde:	4b5c      	ldr	r3, [pc, #368]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	4a5b      	ldr	r2, [pc, #364]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bea:	e00b      	b.n	8001c04 <HAL_RCC_OscConfig+0x324>
 8001bec:	4b58      	ldr	r3, [pc, #352]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf0:	4a57      	ldr	r2, [pc, #348]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001bf2:	f023 0301 	bic.w	r3, r3, #1
 8001bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf8:	4b55      	ldr	r3, [pc, #340]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfc:	4a54      	ldr	r2, [pc, #336]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001bfe:	f023 0304 	bic.w	r3, r3, #4
 8001c02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d015      	beq.n	8001c38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0c:	f7fe ffb6 	bl	8000b7c <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c12:	e00a      	b.n	8001c2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c14:	f7fe ffb2 	bl	8000b7c <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e0cb      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2a:	4b49      	ldr	r3, [pc, #292]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0ee      	beq.n	8001c14 <HAL_RCC_OscConfig+0x334>
 8001c36:	e014      	b.n	8001c62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c38:	f7fe ffa0 	bl	8000b7c <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3e:	e00a      	b.n	8001c56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c40:	f7fe ff9c 	bl	8000b7c <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e0b5      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c56:	4b3e      	ldr	r3, [pc, #248]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1ee      	bne.n	8001c40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c62:	7dfb      	ldrb	r3, [r7, #23]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d105      	bne.n	8001c74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c68:	4b39      	ldr	r3, [pc, #228]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	4a38      	ldr	r2, [pc, #224]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 80a1 	beq.w	8001dc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c7e:	4b34      	ldr	r3, [pc, #208]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d05c      	beq.n	8001d44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d141      	bne.n	8001d16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c92:	4b31      	ldr	r3, [pc, #196]	; (8001d58 <HAL_RCC_OscConfig+0x478>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7fe ff70 	bl	8000b7c <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7fe ff6c 	bl	8000b7c <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e087      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb2:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69da      	ldr	r2, [r3, #28]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	019b      	lsls	r3, r3, #6
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	085b      	lsrs	r3, r3, #1
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	041b      	lsls	r3, r3, #16
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	061b      	lsls	r3, r3, #24
 8001ce2:	491b      	ldr	r1, [pc, #108]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce8:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <HAL_RCC_OscConfig+0x478>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cee:	f7fe ff45 	bl	8000b7c <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7fe ff41 	bl	8000b7c <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e05c      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x416>
 8001d14:	e054      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_RCC_OscConfig+0x478>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7fe ff2e 	bl	8000b7c <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d24:	f7fe ff2a 	bl	8000b7c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e045      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_RCC_OscConfig+0x470>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x444>
 8001d42:	e03d      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d107      	bne.n	8001d5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e038      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4e2>
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40007000 	.word	0x40007000
 8001d58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <HAL_RCC_OscConfig+0x4ec>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d028      	beq.n	8001dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d121      	bne.n	8001dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d11a      	bne.n	8001dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d111      	bne.n	8001dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da2:	085b      	lsrs	r3, r3, #1
 8001da4:	3b01      	subs	r3, #1
 8001da6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d107      	bne.n	8001dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800

08001dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0cc      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001de4:	4b68      	ldr	r3, [pc, #416]	; (8001f88 <HAL_RCC_ClockConfig+0x1b8>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d90c      	bls.n	8001e0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	4b65      	ldr	r3, [pc, #404]	; (8001f88 <HAL_RCC_ClockConfig+0x1b8>)
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfa:	4b63      	ldr	r3, [pc, #396]	; (8001f88 <HAL_RCC_ClockConfig+0x1b8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d001      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0b8      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d020      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e24:	4b59      	ldr	r3, [pc, #356]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4a58      	ldr	r2, [pc, #352]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e3c:	4b53      	ldr	r3, [pc, #332]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	4a52      	ldr	r2, [pc, #328]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e48:	4b50      	ldr	r3, [pc, #320]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	494d      	ldr	r1, [pc, #308]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d044      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d107      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	4b47      	ldr	r3, [pc, #284]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d119      	bne.n	8001eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e07f      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d003      	beq.n	8001e8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d107      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8e:	4b3f      	ldr	r3, [pc, #252]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d109      	bne.n	8001eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e06f      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9e:	4b3b      	ldr	r3, [pc, #236]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e067      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eae:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f023 0203 	bic.w	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	4934      	ldr	r1, [pc, #208]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec0:	f7fe fe5c 	bl	8000b7c <HAL_GetTick>
 8001ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	e00a      	b.n	8001ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec8:	f7fe fe58 	bl	8000b7c <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e04f      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ede:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 020c 	and.w	r2, r3, #12
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d1eb      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef0:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d20c      	bcs.n	8001f18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	4b22      	ldr	r3, [pc, #136]	; (8001f88 <HAL_RCC_ClockConfig+0x1b8>)
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_RCC_ClockConfig+0x1b8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e032      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f24:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	4916      	ldr	r1, [pc, #88]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d009      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f42:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	490e      	ldr	r1, [pc, #56]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f56:	f000 f821 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	490a      	ldr	r1, [pc, #40]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001f68:	5ccb      	ldrb	r3, [r1, r3]
 8001f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6e:	4a09      	ldr	r2, [pc, #36]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <HAL_RCC_ClockConfig+0x1c8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fdbc 	bl	8000af4 <HAL_InitTick>

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40023c00 	.word	0x40023c00
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	080030d4 	.word	0x080030d4
 8001f94:	20000000 	.word	0x20000000
 8001f98:	20000004 	.word	0x20000004

08001f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fa0:	b090      	sub	sp, #64	; 0x40
 8001fa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8001fa8:	2300      	movs	r3, #0
 8001faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fac:	2300      	movs	r3, #0
 8001fae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fb4:	4b59      	ldr	r3, [pc, #356]	; (800211c <HAL_RCC_GetSysClockFreq+0x180>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d00d      	beq.n	8001fdc <HAL_RCC_GetSysClockFreq+0x40>
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	f200 80a1 	bhi.w	8002108 <HAL_RCC_GetSysClockFreq+0x16c>
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x34>
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d003      	beq.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001fce:	e09b      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fd0:	4b53      	ldr	r3, [pc, #332]	; (8002120 <HAL_RCC_GetSysClockFreq+0x184>)
 8001fd2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001fd4:	e09b      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fd6:	4b53      	ldr	r3, [pc, #332]	; (8002124 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fda:	e098      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fdc:	4b4f      	ldr	r3, [pc, #316]	; (800211c <HAL_RCC_GetSysClockFreq+0x180>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fe4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fe6:	4b4d      	ldr	r3, [pc, #308]	; (800211c <HAL_RCC_GetSysClockFreq+0x180>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d028      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff2:	4b4a      	ldr	r3, [pc, #296]	; (800211c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	099b      	lsrs	r3, r3, #6
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	623b      	str	r3, [r7, #32]
 8001ffc:	627a      	str	r2, [r7, #36]	; 0x24
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002004:	2100      	movs	r1, #0
 8002006:	4b47      	ldr	r3, [pc, #284]	; (8002124 <HAL_RCC_GetSysClockFreq+0x188>)
 8002008:	fb03 f201 	mul.w	r2, r3, r1
 800200c:	2300      	movs	r3, #0
 800200e:	fb00 f303 	mul.w	r3, r0, r3
 8002012:	4413      	add	r3, r2
 8002014:	4a43      	ldr	r2, [pc, #268]	; (8002124 <HAL_RCC_GetSysClockFreq+0x188>)
 8002016:	fba0 1202 	umull	r1, r2, r0, r2
 800201a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800201c:	460a      	mov	r2, r1
 800201e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002022:	4413      	add	r3, r2
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002028:	2200      	movs	r2, #0
 800202a:	61bb      	str	r3, [r7, #24]
 800202c:	61fa      	str	r2, [r7, #28]
 800202e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002032:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002036:	f7fe f91b 	bl	8000270 <__aeabi_uldivmod>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4613      	mov	r3, r2
 8002040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002042:	e053      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002044:	4b35      	ldr	r3, [pc, #212]	; (800211c <HAL_RCC_GetSysClockFreq+0x180>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	099b      	lsrs	r3, r3, #6
 800204a:	2200      	movs	r2, #0
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	617a      	str	r2, [r7, #20]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002056:	f04f 0b00 	mov.w	fp, #0
 800205a:	4652      	mov	r2, sl
 800205c:	465b      	mov	r3, fp
 800205e:	f04f 0000 	mov.w	r0, #0
 8002062:	f04f 0100 	mov.w	r1, #0
 8002066:	0159      	lsls	r1, r3, #5
 8002068:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800206c:	0150      	lsls	r0, r2, #5
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	ebb2 080a 	subs.w	r8, r2, sl
 8002076:	eb63 090b 	sbc.w	r9, r3, fp
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002086:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800208a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800208e:	ebb2 0408 	subs.w	r4, r2, r8
 8002092:	eb63 0509 	sbc.w	r5, r3, r9
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	00eb      	lsls	r3, r5, #3
 80020a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020a4:	00e2      	lsls	r2, r4, #3
 80020a6:	4614      	mov	r4, r2
 80020a8:	461d      	mov	r5, r3
 80020aa:	eb14 030a 	adds.w	r3, r4, sl
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	eb45 030b 	adc.w	r3, r5, fp
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020c2:	4629      	mov	r1, r5
 80020c4:	028b      	lsls	r3, r1, #10
 80020c6:	4621      	mov	r1, r4
 80020c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020cc:	4621      	mov	r1, r4
 80020ce:	028a      	lsls	r2, r1, #10
 80020d0:	4610      	mov	r0, r2
 80020d2:	4619      	mov	r1, r3
 80020d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d6:	2200      	movs	r2, #0
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	60fa      	str	r2, [r7, #12]
 80020dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020e0:	f7fe f8c6 	bl	8000270 <__aeabi_uldivmod>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4613      	mov	r3, r2
 80020ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_RCC_GetSysClockFreq+0x180>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	0c1b      	lsrs	r3, r3, #16
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	3301      	adds	r3, #1
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80020fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002106:	e002      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_RCC_GetSysClockFreq+0x184>)
 800210a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800210c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800210e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002110:	4618      	mov	r0, r3
 8002112:	3740      	adds	r7, #64	; 0x40
 8002114:	46bd      	mov	sp, r7
 8002116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	00f42400 	.word	0x00f42400
 8002124:	017d7840 	.word	0x017d7840

08002128 <__errno>:
 8002128:	4b01      	ldr	r3, [pc, #4]	; (8002130 <__errno+0x8>)
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	2000000c 	.word	0x2000000c

08002134 <__libc_init_array>:
 8002134:	b570      	push	{r4, r5, r6, lr}
 8002136:	4d0d      	ldr	r5, [pc, #52]	; (800216c <__libc_init_array+0x38>)
 8002138:	4c0d      	ldr	r4, [pc, #52]	; (8002170 <__libc_init_array+0x3c>)
 800213a:	1b64      	subs	r4, r4, r5
 800213c:	10a4      	asrs	r4, r4, #2
 800213e:	2600      	movs	r6, #0
 8002140:	42a6      	cmp	r6, r4
 8002142:	d109      	bne.n	8002158 <__libc_init_array+0x24>
 8002144:	4d0b      	ldr	r5, [pc, #44]	; (8002174 <__libc_init_array+0x40>)
 8002146:	4c0c      	ldr	r4, [pc, #48]	; (8002178 <__libc_init_array+0x44>)
 8002148:	f000 ffae 	bl	80030a8 <_init>
 800214c:	1b64      	subs	r4, r4, r5
 800214e:	10a4      	asrs	r4, r4, #2
 8002150:	2600      	movs	r6, #0
 8002152:	42a6      	cmp	r6, r4
 8002154:	d105      	bne.n	8002162 <__libc_init_array+0x2e>
 8002156:	bd70      	pop	{r4, r5, r6, pc}
 8002158:	f855 3b04 	ldr.w	r3, [r5], #4
 800215c:	4798      	blx	r3
 800215e:	3601      	adds	r6, #1
 8002160:	e7ee      	b.n	8002140 <__libc_init_array+0xc>
 8002162:	f855 3b04 	ldr.w	r3, [r5], #4
 8002166:	4798      	blx	r3
 8002168:	3601      	adds	r6, #1
 800216a:	e7f2      	b.n	8002152 <__libc_init_array+0x1e>
 800216c:	08003184 	.word	0x08003184
 8002170:	08003184 	.word	0x08003184
 8002174:	08003184 	.word	0x08003184
 8002178:	08003188 	.word	0x08003188

0800217c <memset>:
 800217c:	4402      	add	r2, r0
 800217e:	4603      	mov	r3, r0
 8002180:	4293      	cmp	r3, r2
 8002182:	d100      	bne.n	8002186 <memset+0xa>
 8002184:	4770      	bx	lr
 8002186:	f803 1b01 	strb.w	r1, [r3], #1
 800218a:	e7f9      	b.n	8002180 <memset+0x4>

0800218c <iprintf>:
 800218c:	b40f      	push	{r0, r1, r2, r3}
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <iprintf+0x2c>)
 8002190:	b513      	push	{r0, r1, r4, lr}
 8002192:	681c      	ldr	r4, [r3, #0]
 8002194:	b124      	cbz	r4, 80021a0 <iprintf+0x14>
 8002196:	69a3      	ldr	r3, [r4, #24]
 8002198:	b913      	cbnz	r3, 80021a0 <iprintf+0x14>
 800219a:	4620      	mov	r0, r4
 800219c:	f000 f866 	bl	800226c <__sinit>
 80021a0:	ab05      	add	r3, sp, #20
 80021a2:	9a04      	ldr	r2, [sp, #16]
 80021a4:	68a1      	ldr	r1, [r4, #8]
 80021a6:	9301      	str	r3, [sp, #4]
 80021a8:	4620      	mov	r0, r4
 80021aa:	f000 f9bd 	bl	8002528 <_vfiprintf_r>
 80021ae:	b002      	add	sp, #8
 80021b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021b4:	b004      	add	sp, #16
 80021b6:	4770      	bx	lr
 80021b8:	2000000c 	.word	0x2000000c

080021bc <std>:
 80021bc:	2300      	movs	r3, #0
 80021be:	b510      	push	{r4, lr}
 80021c0:	4604      	mov	r4, r0
 80021c2:	e9c0 3300 	strd	r3, r3, [r0]
 80021c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80021ca:	6083      	str	r3, [r0, #8]
 80021cc:	8181      	strh	r1, [r0, #12]
 80021ce:	6643      	str	r3, [r0, #100]	; 0x64
 80021d0:	81c2      	strh	r2, [r0, #14]
 80021d2:	6183      	str	r3, [r0, #24]
 80021d4:	4619      	mov	r1, r3
 80021d6:	2208      	movs	r2, #8
 80021d8:	305c      	adds	r0, #92	; 0x5c
 80021da:	f7ff ffcf 	bl	800217c <memset>
 80021de:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <std+0x38>)
 80021e0:	6263      	str	r3, [r4, #36]	; 0x24
 80021e2:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <std+0x3c>)
 80021e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <std+0x40>)
 80021e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80021ea:	4b05      	ldr	r3, [pc, #20]	; (8002200 <std+0x44>)
 80021ec:	6224      	str	r4, [r4, #32]
 80021ee:	6323      	str	r3, [r4, #48]	; 0x30
 80021f0:	bd10      	pop	{r4, pc}
 80021f2:	bf00      	nop
 80021f4:	08002ad1 	.word	0x08002ad1
 80021f8:	08002af3 	.word	0x08002af3
 80021fc:	08002b2b 	.word	0x08002b2b
 8002200:	08002b4f 	.word	0x08002b4f

08002204 <_cleanup_r>:
 8002204:	4901      	ldr	r1, [pc, #4]	; (800220c <_cleanup_r+0x8>)
 8002206:	f000 b8af 	b.w	8002368 <_fwalk_reent>
 800220a:	bf00      	nop
 800220c:	08002e29 	.word	0x08002e29

08002210 <__sfmoreglue>:
 8002210:	b570      	push	{r4, r5, r6, lr}
 8002212:	2268      	movs	r2, #104	; 0x68
 8002214:	1e4d      	subs	r5, r1, #1
 8002216:	4355      	muls	r5, r2
 8002218:	460e      	mov	r6, r1
 800221a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800221e:	f000 f8e5 	bl	80023ec <_malloc_r>
 8002222:	4604      	mov	r4, r0
 8002224:	b140      	cbz	r0, 8002238 <__sfmoreglue+0x28>
 8002226:	2100      	movs	r1, #0
 8002228:	e9c0 1600 	strd	r1, r6, [r0]
 800222c:	300c      	adds	r0, #12
 800222e:	60a0      	str	r0, [r4, #8]
 8002230:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002234:	f7ff ffa2 	bl	800217c <memset>
 8002238:	4620      	mov	r0, r4
 800223a:	bd70      	pop	{r4, r5, r6, pc}

0800223c <__sfp_lock_acquire>:
 800223c:	4801      	ldr	r0, [pc, #4]	; (8002244 <__sfp_lock_acquire+0x8>)
 800223e:	f000 b8b3 	b.w	80023a8 <__retarget_lock_acquire_recursive>
 8002242:	bf00      	nop
 8002244:	200000e1 	.word	0x200000e1

08002248 <__sfp_lock_release>:
 8002248:	4801      	ldr	r0, [pc, #4]	; (8002250 <__sfp_lock_release+0x8>)
 800224a:	f000 b8ae 	b.w	80023aa <__retarget_lock_release_recursive>
 800224e:	bf00      	nop
 8002250:	200000e1 	.word	0x200000e1

08002254 <__sinit_lock_acquire>:
 8002254:	4801      	ldr	r0, [pc, #4]	; (800225c <__sinit_lock_acquire+0x8>)
 8002256:	f000 b8a7 	b.w	80023a8 <__retarget_lock_acquire_recursive>
 800225a:	bf00      	nop
 800225c:	200000e2 	.word	0x200000e2

08002260 <__sinit_lock_release>:
 8002260:	4801      	ldr	r0, [pc, #4]	; (8002268 <__sinit_lock_release+0x8>)
 8002262:	f000 b8a2 	b.w	80023aa <__retarget_lock_release_recursive>
 8002266:	bf00      	nop
 8002268:	200000e2 	.word	0x200000e2

0800226c <__sinit>:
 800226c:	b510      	push	{r4, lr}
 800226e:	4604      	mov	r4, r0
 8002270:	f7ff fff0 	bl	8002254 <__sinit_lock_acquire>
 8002274:	69a3      	ldr	r3, [r4, #24]
 8002276:	b11b      	cbz	r3, 8002280 <__sinit+0x14>
 8002278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800227c:	f7ff bff0 	b.w	8002260 <__sinit_lock_release>
 8002280:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002284:	6523      	str	r3, [r4, #80]	; 0x50
 8002286:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <__sinit+0x68>)
 8002288:	4a13      	ldr	r2, [pc, #76]	; (80022d8 <__sinit+0x6c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	62a2      	str	r2, [r4, #40]	; 0x28
 800228e:	42a3      	cmp	r3, r4
 8002290:	bf04      	itt	eq
 8002292:	2301      	moveq	r3, #1
 8002294:	61a3      	streq	r3, [r4, #24]
 8002296:	4620      	mov	r0, r4
 8002298:	f000 f820 	bl	80022dc <__sfp>
 800229c:	6060      	str	r0, [r4, #4]
 800229e:	4620      	mov	r0, r4
 80022a0:	f000 f81c 	bl	80022dc <__sfp>
 80022a4:	60a0      	str	r0, [r4, #8]
 80022a6:	4620      	mov	r0, r4
 80022a8:	f000 f818 	bl	80022dc <__sfp>
 80022ac:	2200      	movs	r2, #0
 80022ae:	60e0      	str	r0, [r4, #12]
 80022b0:	2104      	movs	r1, #4
 80022b2:	6860      	ldr	r0, [r4, #4]
 80022b4:	f7ff ff82 	bl	80021bc <std>
 80022b8:	68a0      	ldr	r0, [r4, #8]
 80022ba:	2201      	movs	r2, #1
 80022bc:	2109      	movs	r1, #9
 80022be:	f7ff ff7d 	bl	80021bc <std>
 80022c2:	68e0      	ldr	r0, [r4, #12]
 80022c4:	2202      	movs	r2, #2
 80022c6:	2112      	movs	r1, #18
 80022c8:	f7ff ff78 	bl	80021bc <std>
 80022cc:	2301      	movs	r3, #1
 80022ce:	61a3      	str	r3, [r4, #24]
 80022d0:	e7d2      	b.n	8002278 <__sinit+0xc>
 80022d2:	bf00      	nop
 80022d4:	080030e4 	.word	0x080030e4
 80022d8:	08002205 	.word	0x08002205

080022dc <__sfp>:
 80022dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022de:	4607      	mov	r7, r0
 80022e0:	f7ff ffac 	bl	800223c <__sfp_lock_acquire>
 80022e4:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <__sfp+0x84>)
 80022e6:	681e      	ldr	r6, [r3, #0]
 80022e8:	69b3      	ldr	r3, [r6, #24]
 80022ea:	b913      	cbnz	r3, 80022f2 <__sfp+0x16>
 80022ec:	4630      	mov	r0, r6
 80022ee:	f7ff ffbd 	bl	800226c <__sinit>
 80022f2:	3648      	adds	r6, #72	; 0x48
 80022f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	d503      	bpl.n	8002304 <__sfp+0x28>
 80022fc:	6833      	ldr	r3, [r6, #0]
 80022fe:	b30b      	cbz	r3, 8002344 <__sfp+0x68>
 8002300:	6836      	ldr	r6, [r6, #0]
 8002302:	e7f7      	b.n	80022f4 <__sfp+0x18>
 8002304:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002308:	b9d5      	cbnz	r5, 8002340 <__sfp+0x64>
 800230a:	4b16      	ldr	r3, [pc, #88]	; (8002364 <__sfp+0x88>)
 800230c:	60e3      	str	r3, [r4, #12]
 800230e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002312:	6665      	str	r5, [r4, #100]	; 0x64
 8002314:	f000 f847 	bl	80023a6 <__retarget_lock_init_recursive>
 8002318:	f7ff ff96 	bl	8002248 <__sfp_lock_release>
 800231c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002320:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002324:	6025      	str	r5, [r4, #0]
 8002326:	61a5      	str	r5, [r4, #24]
 8002328:	2208      	movs	r2, #8
 800232a:	4629      	mov	r1, r5
 800232c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002330:	f7ff ff24 	bl	800217c <memset>
 8002334:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002338:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800233c:	4620      	mov	r0, r4
 800233e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002340:	3468      	adds	r4, #104	; 0x68
 8002342:	e7d9      	b.n	80022f8 <__sfp+0x1c>
 8002344:	2104      	movs	r1, #4
 8002346:	4638      	mov	r0, r7
 8002348:	f7ff ff62 	bl	8002210 <__sfmoreglue>
 800234c:	4604      	mov	r4, r0
 800234e:	6030      	str	r0, [r6, #0]
 8002350:	2800      	cmp	r0, #0
 8002352:	d1d5      	bne.n	8002300 <__sfp+0x24>
 8002354:	f7ff ff78 	bl	8002248 <__sfp_lock_release>
 8002358:	230c      	movs	r3, #12
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	e7ee      	b.n	800233c <__sfp+0x60>
 800235e:	bf00      	nop
 8002360:	080030e4 	.word	0x080030e4
 8002364:	ffff0001 	.word	0xffff0001

08002368 <_fwalk_reent>:
 8002368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800236c:	4606      	mov	r6, r0
 800236e:	4688      	mov	r8, r1
 8002370:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002374:	2700      	movs	r7, #0
 8002376:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800237a:	f1b9 0901 	subs.w	r9, r9, #1
 800237e:	d505      	bpl.n	800238c <_fwalk_reent+0x24>
 8002380:	6824      	ldr	r4, [r4, #0]
 8002382:	2c00      	cmp	r4, #0
 8002384:	d1f7      	bne.n	8002376 <_fwalk_reent+0xe>
 8002386:	4638      	mov	r0, r7
 8002388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800238c:	89ab      	ldrh	r3, [r5, #12]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d907      	bls.n	80023a2 <_fwalk_reent+0x3a>
 8002392:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002396:	3301      	adds	r3, #1
 8002398:	d003      	beq.n	80023a2 <_fwalk_reent+0x3a>
 800239a:	4629      	mov	r1, r5
 800239c:	4630      	mov	r0, r6
 800239e:	47c0      	blx	r8
 80023a0:	4307      	orrs	r7, r0
 80023a2:	3568      	adds	r5, #104	; 0x68
 80023a4:	e7e9      	b.n	800237a <_fwalk_reent+0x12>

080023a6 <__retarget_lock_init_recursive>:
 80023a6:	4770      	bx	lr

080023a8 <__retarget_lock_acquire_recursive>:
 80023a8:	4770      	bx	lr

080023aa <__retarget_lock_release_recursive>:
 80023aa:	4770      	bx	lr

080023ac <sbrk_aligned>:
 80023ac:	b570      	push	{r4, r5, r6, lr}
 80023ae:	4e0e      	ldr	r6, [pc, #56]	; (80023e8 <sbrk_aligned+0x3c>)
 80023b0:	460c      	mov	r4, r1
 80023b2:	6831      	ldr	r1, [r6, #0]
 80023b4:	4605      	mov	r5, r0
 80023b6:	b911      	cbnz	r1, 80023be <sbrk_aligned+0x12>
 80023b8:	f000 fb7a 	bl	8002ab0 <_sbrk_r>
 80023bc:	6030      	str	r0, [r6, #0]
 80023be:	4621      	mov	r1, r4
 80023c0:	4628      	mov	r0, r5
 80023c2:	f000 fb75 	bl	8002ab0 <_sbrk_r>
 80023c6:	1c43      	adds	r3, r0, #1
 80023c8:	d00a      	beq.n	80023e0 <sbrk_aligned+0x34>
 80023ca:	1cc4      	adds	r4, r0, #3
 80023cc:	f024 0403 	bic.w	r4, r4, #3
 80023d0:	42a0      	cmp	r0, r4
 80023d2:	d007      	beq.n	80023e4 <sbrk_aligned+0x38>
 80023d4:	1a21      	subs	r1, r4, r0
 80023d6:	4628      	mov	r0, r5
 80023d8:	f000 fb6a 	bl	8002ab0 <_sbrk_r>
 80023dc:	3001      	adds	r0, #1
 80023de:	d101      	bne.n	80023e4 <sbrk_aligned+0x38>
 80023e0:	f04f 34ff 	mov.w	r4, #4294967295
 80023e4:	4620      	mov	r0, r4
 80023e6:	bd70      	pop	{r4, r5, r6, pc}
 80023e8:	200000e8 	.word	0x200000e8

080023ec <_malloc_r>:
 80023ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023f0:	1ccd      	adds	r5, r1, #3
 80023f2:	f025 0503 	bic.w	r5, r5, #3
 80023f6:	3508      	adds	r5, #8
 80023f8:	2d0c      	cmp	r5, #12
 80023fa:	bf38      	it	cc
 80023fc:	250c      	movcc	r5, #12
 80023fe:	2d00      	cmp	r5, #0
 8002400:	4607      	mov	r7, r0
 8002402:	db01      	blt.n	8002408 <_malloc_r+0x1c>
 8002404:	42a9      	cmp	r1, r5
 8002406:	d905      	bls.n	8002414 <_malloc_r+0x28>
 8002408:	230c      	movs	r3, #12
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	2600      	movs	r6, #0
 800240e:	4630      	mov	r0, r6
 8002410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002414:	4e2e      	ldr	r6, [pc, #184]	; (80024d0 <_malloc_r+0xe4>)
 8002416:	f000 fdbb 	bl	8002f90 <__malloc_lock>
 800241a:	6833      	ldr	r3, [r6, #0]
 800241c:	461c      	mov	r4, r3
 800241e:	bb34      	cbnz	r4, 800246e <_malloc_r+0x82>
 8002420:	4629      	mov	r1, r5
 8002422:	4638      	mov	r0, r7
 8002424:	f7ff ffc2 	bl	80023ac <sbrk_aligned>
 8002428:	1c43      	adds	r3, r0, #1
 800242a:	4604      	mov	r4, r0
 800242c:	d14d      	bne.n	80024ca <_malloc_r+0xde>
 800242e:	6834      	ldr	r4, [r6, #0]
 8002430:	4626      	mov	r6, r4
 8002432:	2e00      	cmp	r6, #0
 8002434:	d140      	bne.n	80024b8 <_malloc_r+0xcc>
 8002436:	6823      	ldr	r3, [r4, #0]
 8002438:	4631      	mov	r1, r6
 800243a:	4638      	mov	r0, r7
 800243c:	eb04 0803 	add.w	r8, r4, r3
 8002440:	f000 fb36 	bl	8002ab0 <_sbrk_r>
 8002444:	4580      	cmp	r8, r0
 8002446:	d13a      	bne.n	80024be <_malloc_r+0xd2>
 8002448:	6821      	ldr	r1, [r4, #0]
 800244a:	3503      	adds	r5, #3
 800244c:	1a6d      	subs	r5, r5, r1
 800244e:	f025 0503 	bic.w	r5, r5, #3
 8002452:	3508      	adds	r5, #8
 8002454:	2d0c      	cmp	r5, #12
 8002456:	bf38      	it	cc
 8002458:	250c      	movcc	r5, #12
 800245a:	4629      	mov	r1, r5
 800245c:	4638      	mov	r0, r7
 800245e:	f7ff ffa5 	bl	80023ac <sbrk_aligned>
 8002462:	3001      	adds	r0, #1
 8002464:	d02b      	beq.n	80024be <_malloc_r+0xd2>
 8002466:	6823      	ldr	r3, [r4, #0]
 8002468:	442b      	add	r3, r5
 800246a:	6023      	str	r3, [r4, #0]
 800246c:	e00e      	b.n	800248c <_malloc_r+0xa0>
 800246e:	6822      	ldr	r2, [r4, #0]
 8002470:	1b52      	subs	r2, r2, r5
 8002472:	d41e      	bmi.n	80024b2 <_malloc_r+0xc6>
 8002474:	2a0b      	cmp	r2, #11
 8002476:	d916      	bls.n	80024a6 <_malloc_r+0xba>
 8002478:	1961      	adds	r1, r4, r5
 800247a:	42a3      	cmp	r3, r4
 800247c:	6025      	str	r5, [r4, #0]
 800247e:	bf18      	it	ne
 8002480:	6059      	strne	r1, [r3, #4]
 8002482:	6863      	ldr	r3, [r4, #4]
 8002484:	bf08      	it	eq
 8002486:	6031      	streq	r1, [r6, #0]
 8002488:	5162      	str	r2, [r4, r5]
 800248a:	604b      	str	r3, [r1, #4]
 800248c:	4638      	mov	r0, r7
 800248e:	f104 060b 	add.w	r6, r4, #11
 8002492:	f000 fd83 	bl	8002f9c <__malloc_unlock>
 8002496:	f026 0607 	bic.w	r6, r6, #7
 800249a:	1d23      	adds	r3, r4, #4
 800249c:	1af2      	subs	r2, r6, r3
 800249e:	d0b6      	beq.n	800240e <_malloc_r+0x22>
 80024a0:	1b9b      	subs	r3, r3, r6
 80024a2:	50a3      	str	r3, [r4, r2]
 80024a4:	e7b3      	b.n	800240e <_malloc_r+0x22>
 80024a6:	6862      	ldr	r2, [r4, #4]
 80024a8:	42a3      	cmp	r3, r4
 80024aa:	bf0c      	ite	eq
 80024ac:	6032      	streq	r2, [r6, #0]
 80024ae:	605a      	strne	r2, [r3, #4]
 80024b0:	e7ec      	b.n	800248c <_malloc_r+0xa0>
 80024b2:	4623      	mov	r3, r4
 80024b4:	6864      	ldr	r4, [r4, #4]
 80024b6:	e7b2      	b.n	800241e <_malloc_r+0x32>
 80024b8:	4634      	mov	r4, r6
 80024ba:	6876      	ldr	r6, [r6, #4]
 80024bc:	e7b9      	b.n	8002432 <_malloc_r+0x46>
 80024be:	230c      	movs	r3, #12
 80024c0:	603b      	str	r3, [r7, #0]
 80024c2:	4638      	mov	r0, r7
 80024c4:	f000 fd6a 	bl	8002f9c <__malloc_unlock>
 80024c8:	e7a1      	b.n	800240e <_malloc_r+0x22>
 80024ca:	6025      	str	r5, [r4, #0]
 80024cc:	e7de      	b.n	800248c <_malloc_r+0xa0>
 80024ce:	bf00      	nop
 80024d0:	200000e4 	.word	0x200000e4

080024d4 <__sfputc_r>:
 80024d4:	6893      	ldr	r3, [r2, #8]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	b410      	push	{r4}
 80024dc:	6093      	str	r3, [r2, #8]
 80024de:	da08      	bge.n	80024f2 <__sfputc_r+0x1e>
 80024e0:	6994      	ldr	r4, [r2, #24]
 80024e2:	42a3      	cmp	r3, r4
 80024e4:	db01      	blt.n	80024ea <__sfputc_r+0x16>
 80024e6:	290a      	cmp	r1, #10
 80024e8:	d103      	bne.n	80024f2 <__sfputc_r+0x1e>
 80024ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024ee:	f000 bb33 	b.w	8002b58 <__swbuf_r>
 80024f2:	6813      	ldr	r3, [r2, #0]
 80024f4:	1c58      	adds	r0, r3, #1
 80024f6:	6010      	str	r0, [r2, #0]
 80024f8:	7019      	strb	r1, [r3, #0]
 80024fa:	4608      	mov	r0, r1
 80024fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002500:	4770      	bx	lr

08002502 <__sfputs_r>:
 8002502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002504:	4606      	mov	r6, r0
 8002506:	460f      	mov	r7, r1
 8002508:	4614      	mov	r4, r2
 800250a:	18d5      	adds	r5, r2, r3
 800250c:	42ac      	cmp	r4, r5
 800250e:	d101      	bne.n	8002514 <__sfputs_r+0x12>
 8002510:	2000      	movs	r0, #0
 8002512:	e007      	b.n	8002524 <__sfputs_r+0x22>
 8002514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002518:	463a      	mov	r2, r7
 800251a:	4630      	mov	r0, r6
 800251c:	f7ff ffda 	bl	80024d4 <__sfputc_r>
 8002520:	1c43      	adds	r3, r0, #1
 8002522:	d1f3      	bne.n	800250c <__sfputs_r+0xa>
 8002524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002528 <_vfiprintf_r>:
 8002528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800252c:	460d      	mov	r5, r1
 800252e:	b09d      	sub	sp, #116	; 0x74
 8002530:	4614      	mov	r4, r2
 8002532:	4698      	mov	r8, r3
 8002534:	4606      	mov	r6, r0
 8002536:	b118      	cbz	r0, 8002540 <_vfiprintf_r+0x18>
 8002538:	6983      	ldr	r3, [r0, #24]
 800253a:	b90b      	cbnz	r3, 8002540 <_vfiprintf_r+0x18>
 800253c:	f7ff fe96 	bl	800226c <__sinit>
 8002540:	4b89      	ldr	r3, [pc, #548]	; (8002768 <_vfiprintf_r+0x240>)
 8002542:	429d      	cmp	r5, r3
 8002544:	d11b      	bne.n	800257e <_vfiprintf_r+0x56>
 8002546:	6875      	ldr	r5, [r6, #4]
 8002548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800254a:	07d9      	lsls	r1, r3, #31
 800254c:	d405      	bmi.n	800255a <_vfiprintf_r+0x32>
 800254e:	89ab      	ldrh	r3, [r5, #12]
 8002550:	059a      	lsls	r2, r3, #22
 8002552:	d402      	bmi.n	800255a <_vfiprintf_r+0x32>
 8002554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002556:	f7ff ff27 	bl	80023a8 <__retarget_lock_acquire_recursive>
 800255a:	89ab      	ldrh	r3, [r5, #12]
 800255c:	071b      	lsls	r3, r3, #28
 800255e:	d501      	bpl.n	8002564 <_vfiprintf_r+0x3c>
 8002560:	692b      	ldr	r3, [r5, #16]
 8002562:	b9eb      	cbnz	r3, 80025a0 <_vfiprintf_r+0x78>
 8002564:	4629      	mov	r1, r5
 8002566:	4630      	mov	r0, r6
 8002568:	f000 fb5a 	bl	8002c20 <__swsetup_r>
 800256c:	b1c0      	cbz	r0, 80025a0 <_vfiprintf_r+0x78>
 800256e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002570:	07dc      	lsls	r4, r3, #31
 8002572:	d50e      	bpl.n	8002592 <_vfiprintf_r+0x6a>
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	b01d      	add	sp, #116	; 0x74
 800257a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800257e:	4b7b      	ldr	r3, [pc, #492]	; (800276c <_vfiprintf_r+0x244>)
 8002580:	429d      	cmp	r5, r3
 8002582:	d101      	bne.n	8002588 <_vfiprintf_r+0x60>
 8002584:	68b5      	ldr	r5, [r6, #8]
 8002586:	e7df      	b.n	8002548 <_vfiprintf_r+0x20>
 8002588:	4b79      	ldr	r3, [pc, #484]	; (8002770 <_vfiprintf_r+0x248>)
 800258a:	429d      	cmp	r5, r3
 800258c:	bf08      	it	eq
 800258e:	68f5      	ldreq	r5, [r6, #12]
 8002590:	e7da      	b.n	8002548 <_vfiprintf_r+0x20>
 8002592:	89ab      	ldrh	r3, [r5, #12]
 8002594:	0598      	lsls	r0, r3, #22
 8002596:	d4ed      	bmi.n	8002574 <_vfiprintf_r+0x4c>
 8002598:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800259a:	f7ff ff06 	bl	80023aa <__retarget_lock_release_recursive>
 800259e:	e7e9      	b.n	8002574 <_vfiprintf_r+0x4c>
 80025a0:	2300      	movs	r3, #0
 80025a2:	9309      	str	r3, [sp, #36]	; 0x24
 80025a4:	2320      	movs	r3, #32
 80025a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80025ae:	2330      	movs	r3, #48	; 0x30
 80025b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002774 <_vfiprintf_r+0x24c>
 80025b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025b8:	f04f 0901 	mov.w	r9, #1
 80025bc:	4623      	mov	r3, r4
 80025be:	469a      	mov	sl, r3
 80025c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80025c4:	b10a      	cbz	r2, 80025ca <_vfiprintf_r+0xa2>
 80025c6:	2a25      	cmp	r2, #37	; 0x25
 80025c8:	d1f9      	bne.n	80025be <_vfiprintf_r+0x96>
 80025ca:	ebba 0b04 	subs.w	fp, sl, r4
 80025ce:	d00b      	beq.n	80025e8 <_vfiprintf_r+0xc0>
 80025d0:	465b      	mov	r3, fp
 80025d2:	4622      	mov	r2, r4
 80025d4:	4629      	mov	r1, r5
 80025d6:	4630      	mov	r0, r6
 80025d8:	f7ff ff93 	bl	8002502 <__sfputs_r>
 80025dc:	3001      	adds	r0, #1
 80025de:	f000 80aa 	beq.w	8002736 <_vfiprintf_r+0x20e>
 80025e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80025e4:	445a      	add	r2, fp
 80025e6:	9209      	str	r2, [sp, #36]	; 0x24
 80025e8:	f89a 3000 	ldrb.w	r3, [sl]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 80a2 	beq.w	8002736 <_vfiprintf_r+0x20e>
 80025f2:	2300      	movs	r3, #0
 80025f4:	f04f 32ff 	mov.w	r2, #4294967295
 80025f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025fc:	f10a 0a01 	add.w	sl, sl, #1
 8002600:	9304      	str	r3, [sp, #16]
 8002602:	9307      	str	r3, [sp, #28]
 8002604:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002608:	931a      	str	r3, [sp, #104]	; 0x68
 800260a:	4654      	mov	r4, sl
 800260c:	2205      	movs	r2, #5
 800260e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002612:	4858      	ldr	r0, [pc, #352]	; (8002774 <_vfiprintf_r+0x24c>)
 8002614:	f7fd fddc 	bl	80001d0 <memchr>
 8002618:	9a04      	ldr	r2, [sp, #16]
 800261a:	b9d8      	cbnz	r0, 8002654 <_vfiprintf_r+0x12c>
 800261c:	06d1      	lsls	r1, r2, #27
 800261e:	bf44      	itt	mi
 8002620:	2320      	movmi	r3, #32
 8002622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002626:	0713      	lsls	r3, r2, #28
 8002628:	bf44      	itt	mi
 800262a:	232b      	movmi	r3, #43	; 0x2b
 800262c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002630:	f89a 3000 	ldrb.w	r3, [sl]
 8002634:	2b2a      	cmp	r3, #42	; 0x2a
 8002636:	d015      	beq.n	8002664 <_vfiprintf_r+0x13c>
 8002638:	9a07      	ldr	r2, [sp, #28]
 800263a:	4654      	mov	r4, sl
 800263c:	2000      	movs	r0, #0
 800263e:	f04f 0c0a 	mov.w	ip, #10
 8002642:	4621      	mov	r1, r4
 8002644:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002648:	3b30      	subs	r3, #48	; 0x30
 800264a:	2b09      	cmp	r3, #9
 800264c:	d94e      	bls.n	80026ec <_vfiprintf_r+0x1c4>
 800264e:	b1b0      	cbz	r0, 800267e <_vfiprintf_r+0x156>
 8002650:	9207      	str	r2, [sp, #28]
 8002652:	e014      	b.n	800267e <_vfiprintf_r+0x156>
 8002654:	eba0 0308 	sub.w	r3, r0, r8
 8002658:	fa09 f303 	lsl.w	r3, r9, r3
 800265c:	4313      	orrs	r3, r2
 800265e:	9304      	str	r3, [sp, #16]
 8002660:	46a2      	mov	sl, r4
 8002662:	e7d2      	b.n	800260a <_vfiprintf_r+0xe2>
 8002664:	9b03      	ldr	r3, [sp, #12]
 8002666:	1d19      	adds	r1, r3, #4
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	9103      	str	r1, [sp, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	bfbb      	ittet	lt
 8002670:	425b      	neglt	r3, r3
 8002672:	f042 0202 	orrlt.w	r2, r2, #2
 8002676:	9307      	strge	r3, [sp, #28]
 8002678:	9307      	strlt	r3, [sp, #28]
 800267a:	bfb8      	it	lt
 800267c:	9204      	strlt	r2, [sp, #16]
 800267e:	7823      	ldrb	r3, [r4, #0]
 8002680:	2b2e      	cmp	r3, #46	; 0x2e
 8002682:	d10c      	bne.n	800269e <_vfiprintf_r+0x176>
 8002684:	7863      	ldrb	r3, [r4, #1]
 8002686:	2b2a      	cmp	r3, #42	; 0x2a
 8002688:	d135      	bne.n	80026f6 <_vfiprintf_r+0x1ce>
 800268a:	9b03      	ldr	r3, [sp, #12]
 800268c:	1d1a      	adds	r2, r3, #4
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	9203      	str	r2, [sp, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	bfb8      	it	lt
 8002696:	f04f 33ff 	movlt.w	r3, #4294967295
 800269a:	3402      	adds	r4, #2
 800269c:	9305      	str	r3, [sp, #20]
 800269e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002784 <_vfiprintf_r+0x25c>
 80026a2:	7821      	ldrb	r1, [r4, #0]
 80026a4:	2203      	movs	r2, #3
 80026a6:	4650      	mov	r0, sl
 80026a8:	f7fd fd92 	bl	80001d0 <memchr>
 80026ac:	b140      	cbz	r0, 80026c0 <_vfiprintf_r+0x198>
 80026ae:	2340      	movs	r3, #64	; 0x40
 80026b0:	eba0 000a 	sub.w	r0, r0, sl
 80026b4:	fa03 f000 	lsl.w	r0, r3, r0
 80026b8:	9b04      	ldr	r3, [sp, #16]
 80026ba:	4303      	orrs	r3, r0
 80026bc:	3401      	adds	r4, #1
 80026be:	9304      	str	r3, [sp, #16]
 80026c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026c4:	482c      	ldr	r0, [pc, #176]	; (8002778 <_vfiprintf_r+0x250>)
 80026c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80026ca:	2206      	movs	r2, #6
 80026cc:	f7fd fd80 	bl	80001d0 <memchr>
 80026d0:	2800      	cmp	r0, #0
 80026d2:	d03f      	beq.n	8002754 <_vfiprintf_r+0x22c>
 80026d4:	4b29      	ldr	r3, [pc, #164]	; (800277c <_vfiprintf_r+0x254>)
 80026d6:	bb1b      	cbnz	r3, 8002720 <_vfiprintf_r+0x1f8>
 80026d8:	9b03      	ldr	r3, [sp, #12]
 80026da:	3307      	adds	r3, #7
 80026dc:	f023 0307 	bic.w	r3, r3, #7
 80026e0:	3308      	adds	r3, #8
 80026e2:	9303      	str	r3, [sp, #12]
 80026e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026e6:	443b      	add	r3, r7
 80026e8:	9309      	str	r3, [sp, #36]	; 0x24
 80026ea:	e767      	b.n	80025bc <_vfiprintf_r+0x94>
 80026ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80026f0:	460c      	mov	r4, r1
 80026f2:	2001      	movs	r0, #1
 80026f4:	e7a5      	b.n	8002642 <_vfiprintf_r+0x11a>
 80026f6:	2300      	movs	r3, #0
 80026f8:	3401      	adds	r4, #1
 80026fa:	9305      	str	r3, [sp, #20]
 80026fc:	4619      	mov	r1, r3
 80026fe:	f04f 0c0a 	mov.w	ip, #10
 8002702:	4620      	mov	r0, r4
 8002704:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002708:	3a30      	subs	r2, #48	; 0x30
 800270a:	2a09      	cmp	r2, #9
 800270c:	d903      	bls.n	8002716 <_vfiprintf_r+0x1ee>
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0c5      	beq.n	800269e <_vfiprintf_r+0x176>
 8002712:	9105      	str	r1, [sp, #20]
 8002714:	e7c3      	b.n	800269e <_vfiprintf_r+0x176>
 8002716:	fb0c 2101 	mla	r1, ip, r1, r2
 800271a:	4604      	mov	r4, r0
 800271c:	2301      	movs	r3, #1
 800271e:	e7f0      	b.n	8002702 <_vfiprintf_r+0x1da>
 8002720:	ab03      	add	r3, sp, #12
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	462a      	mov	r2, r5
 8002726:	4b16      	ldr	r3, [pc, #88]	; (8002780 <_vfiprintf_r+0x258>)
 8002728:	a904      	add	r1, sp, #16
 800272a:	4630      	mov	r0, r6
 800272c:	f3af 8000 	nop.w
 8002730:	4607      	mov	r7, r0
 8002732:	1c78      	adds	r0, r7, #1
 8002734:	d1d6      	bne.n	80026e4 <_vfiprintf_r+0x1bc>
 8002736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002738:	07d9      	lsls	r1, r3, #31
 800273a:	d405      	bmi.n	8002748 <_vfiprintf_r+0x220>
 800273c:	89ab      	ldrh	r3, [r5, #12]
 800273e:	059a      	lsls	r2, r3, #22
 8002740:	d402      	bmi.n	8002748 <_vfiprintf_r+0x220>
 8002742:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002744:	f7ff fe31 	bl	80023aa <__retarget_lock_release_recursive>
 8002748:	89ab      	ldrh	r3, [r5, #12]
 800274a:	065b      	lsls	r3, r3, #25
 800274c:	f53f af12 	bmi.w	8002574 <_vfiprintf_r+0x4c>
 8002750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002752:	e711      	b.n	8002578 <_vfiprintf_r+0x50>
 8002754:	ab03      	add	r3, sp, #12
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	462a      	mov	r2, r5
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <_vfiprintf_r+0x258>)
 800275c:	a904      	add	r1, sp, #16
 800275e:	4630      	mov	r0, r6
 8002760:	f000 f880 	bl	8002864 <_printf_i>
 8002764:	e7e4      	b.n	8002730 <_vfiprintf_r+0x208>
 8002766:	bf00      	nop
 8002768:	08003108 	.word	0x08003108
 800276c:	08003128 	.word	0x08003128
 8002770:	080030e8 	.word	0x080030e8
 8002774:	08003148 	.word	0x08003148
 8002778:	08003152 	.word	0x08003152
 800277c:	00000000 	.word	0x00000000
 8002780:	08002503 	.word	0x08002503
 8002784:	0800314e 	.word	0x0800314e

08002788 <_printf_common>:
 8002788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800278c:	4616      	mov	r6, r2
 800278e:	4699      	mov	r9, r3
 8002790:	688a      	ldr	r2, [r1, #8]
 8002792:	690b      	ldr	r3, [r1, #16]
 8002794:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002798:	4293      	cmp	r3, r2
 800279a:	bfb8      	it	lt
 800279c:	4613      	movlt	r3, r2
 800279e:	6033      	str	r3, [r6, #0]
 80027a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027a4:	4607      	mov	r7, r0
 80027a6:	460c      	mov	r4, r1
 80027a8:	b10a      	cbz	r2, 80027ae <_printf_common+0x26>
 80027aa:	3301      	adds	r3, #1
 80027ac:	6033      	str	r3, [r6, #0]
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	0699      	lsls	r1, r3, #26
 80027b2:	bf42      	ittt	mi
 80027b4:	6833      	ldrmi	r3, [r6, #0]
 80027b6:	3302      	addmi	r3, #2
 80027b8:	6033      	strmi	r3, [r6, #0]
 80027ba:	6825      	ldr	r5, [r4, #0]
 80027bc:	f015 0506 	ands.w	r5, r5, #6
 80027c0:	d106      	bne.n	80027d0 <_printf_common+0x48>
 80027c2:	f104 0a19 	add.w	sl, r4, #25
 80027c6:	68e3      	ldr	r3, [r4, #12]
 80027c8:	6832      	ldr	r2, [r6, #0]
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	42ab      	cmp	r3, r5
 80027ce:	dc26      	bgt.n	800281e <_printf_common+0x96>
 80027d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80027d4:	1e13      	subs	r3, r2, #0
 80027d6:	6822      	ldr	r2, [r4, #0]
 80027d8:	bf18      	it	ne
 80027da:	2301      	movne	r3, #1
 80027dc:	0692      	lsls	r2, r2, #26
 80027de:	d42b      	bmi.n	8002838 <_printf_common+0xb0>
 80027e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80027e4:	4649      	mov	r1, r9
 80027e6:	4638      	mov	r0, r7
 80027e8:	47c0      	blx	r8
 80027ea:	3001      	adds	r0, #1
 80027ec:	d01e      	beq.n	800282c <_printf_common+0xa4>
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	68e5      	ldr	r5, [r4, #12]
 80027f2:	6832      	ldr	r2, [r6, #0]
 80027f4:	f003 0306 	and.w	r3, r3, #6
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	bf08      	it	eq
 80027fc:	1aad      	subeq	r5, r5, r2
 80027fe:	68a3      	ldr	r3, [r4, #8]
 8002800:	6922      	ldr	r2, [r4, #16]
 8002802:	bf0c      	ite	eq
 8002804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002808:	2500      	movne	r5, #0
 800280a:	4293      	cmp	r3, r2
 800280c:	bfc4      	itt	gt
 800280e:	1a9b      	subgt	r3, r3, r2
 8002810:	18ed      	addgt	r5, r5, r3
 8002812:	2600      	movs	r6, #0
 8002814:	341a      	adds	r4, #26
 8002816:	42b5      	cmp	r5, r6
 8002818:	d11a      	bne.n	8002850 <_printf_common+0xc8>
 800281a:	2000      	movs	r0, #0
 800281c:	e008      	b.n	8002830 <_printf_common+0xa8>
 800281e:	2301      	movs	r3, #1
 8002820:	4652      	mov	r2, sl
 8002822:	4649      	mov	r1, r9
 8002824:	4638      	mov	r0, r7
 8002826:	47c0      	blx	r8
 8002828:	3001      	adds	r0, #1
 800282a:	d103      	bne.n	8002834 <_printf_common+0xac>
 800282c:	f04f 30ff 	mov.w	r0, #4294967295
 8002830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002834:	3501      	adds	r5, #1
 8002836:	e7c6      	b.n	80027c6 <_printf_common+0x3e>
 8002838:	18e1      	adds	r1, r4, r3
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	2030      	movs	r0, #48	; 0x30
 800283e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002842:	4422      	add	r2, r4
 8002844:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002848:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800284c:	3302      	adds	r3, #2
 800284e:	e7c7      	b.n	80027e0 <_printf_common+0x58>
 8002850:	2301      	movs	r3, #1
 8002852:	4622      	mov	r2, r4
 8002854:	4649      	mov	r1, r9
 8002856:	4638      	mov	r0, r7
 8002858:	47c0      	blx	r8
 800285a:	3001      	adds	r0, #1
 800285c:	d0e6      	beq.n	800282c <_printf_common+0xa4>
 800285e:	3601      	adds	r6, #1
 8002860:	e7d9      	b.n	8002816 <_printf_common+0x8e>
	...

08002864 <_printf_i>:
 8002864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002868:	7e0f      	ldrb	r7, [r1, #24]
 800286a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800286c:	2f78      	cmp	r7, #120	; 0x78
 800286e:	4691      	mov	r9, r2
 8002870:	4680      	mov	r8, r0
 8002872:	460c      	mov	r4, r1
 8002874:	469a      	mov	sl, r3
 8002876:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800287a:	d807      	bhi.n	800288c <_printf_i+0x28>
 800287c:	2f62      	cmp	r7, #98	; 0x62
 800287e:	d80a      	bhi.n	8002896 <_printf_i+0x32>
 8002880:	2f00      	cmp	r7, #0
 8002882:	f000 80d8 	beq.w	8002a36 <_printf_i+0x1d2>
 8002886:	2f58      	cmp	r7, #88	; 0x58
 8002888:	f000 80a3 	beq.w	80029d2 <_printf_i+0x16e>
 800288c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002890:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002894:	e03a      	b.n	800290c <_printf_i+0xa8>
 8002896:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800289a:	2b15      	cmp	r3, #21
 800289c:	d8f6      	bhi.n	800288c <_printf_i+0x28>
 800289e:	a101      	add	r1, pc, #4	; (adr r1, 80028a4 <_printf_i+0x40>)
 80028a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80028a4:	080028fd 	.word	0x080028fd
 80028a8:	08002911 	.word	0x08002911
 80028ac:	0800288d 	.word	0x0800288d
 80028b0:	0800288d 	.word	0x0800288d
 80028b4:	0800288d 	.word	0x0800288d
 80028b8:	0800288d 	.word	0x0800288d
 80028bc:	08002911 	.word	0x08002911
 80028c0:	0800288d 	.word	0x0800288d
 80028c4:	0800288d 	.word	0x0800288d
 80028c8:	0800288d 	.word	0x0800288d
 80028cc:	0800288d 	.word	0x0800288d
 80028d0:	08002a1d 	.word	0x08002a1d
 80028d4:	08002941 	.word	0x08002941
 80028d8:	080029ff 	.word	0x080029ff
 80028dc:	0800288d 	.word	0x0800288d
 80028e0:	0800288d 	.word	0x0800288d
 80028e4:	08002a3f 	.word	0x08002a3f
 80028e8:	0800288d 	.word	0x0800288d
 80028ec:	08002941 	.word	0x08002941
 80028f0:	0800288d 	.word	0x0800288d
 80028f4:	0800288d 	.word	0x0800288d
 80028f8:	08002a07 	.word	0x08002a07
 80028fc:	682b      	ldr	r3, [r5, #0]
 80028fe:	1d1a      	adds	r2, r3, #4
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	602a      	str	r2, [r5, #0]
 8002904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002908:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800290c:	2301      	movs	r3, #1
 800290e:	e0a3      	b.n	8002a58 <_printf_i+0x1f4>
 8002910:	6820      	ldr	r0, [r4, #0]
 8002912:	6829      	ldr	r1, [r5, #0]
 8002914:	0606      	lsls	r6, r0, #24
 8002916:	f101 0304 	add.w	r3, r1, #4
 800291a:	d50a      	bpl.n	8002932 <_printf_i+0xce>
 800291c:	680e      	ldr	r6, [r1, #0]
 800291e:	602b      	str	r3, [r5, #0]
 8002920:	2e00      	cmp	r6, #0
 8002922:	da03      	bge.n	800292c <_printf_i+0xc8>
 8002924:	232d      	movs	r3, #45	; 0x2d
 8002926:	4276      	negs	r6, r6
 8002928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800292c:	485e      	ldr	r0, [pc, #376]	; (8002aa8 <_printf_i+0x244>)
 800292e:	230a      	movs	r3, #10
 8002930:	e019      	b.n	8002966 <_printf_i+0x102>
 8002932:	680e      	ldr	r6, [r1, #0]
 8002934:	602b      	str	r3, [r5, #0]
 8002936:	f010 0f40 	tst.w	r0, #64	; 0x40
 800293a:	bf18      	it	ne
 800293c:	b236      	sxthne	r6, r6
 800293e:	e7ef      	b.n	8002920 <_printf_i+0xbc>
 8002940:	682b      	ldr	r3, [r5, #0]
 8002942:	6820      	ldr	r0, [r4, #0]
 8002944:	1d19      	adds	r1, r3, #4
 8002946:	6029      	str	r1, [r5, #0]
 8002948:	0601      	lsls	r1, r0, #24
 800294a:	d501      	bpl.n	8002950 <_printf_i+0xec>
 800294c:	681e      	ldr	r6, [r3, #0]
 800294e:	e002      	b.n	8002956 <_printf_i+0xf2>
 8002950:	0646      	lsls	r6, r0, #25
 8002952:	d5fb      	bpl.n	800294c <_printf_i+0xe8>
 8002954:	881e      	ldrh	r6, [r3, #0]
 8002956:	4854      	ldr	r0, [pc, #336]	; (8002aa8 <_printf_i+0x244>)
 8002958:	2f6f      	cmp	r7, #111	; 0x6f
 800295a:	bf0c      	ite	eq
 800295c:	2308      	moveq	r3, #8
 800295e:	230a      	movne	r3, #10
 8002960:	2100      	movs	r1, #0
 8002962:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002966:	6865      	ldr	r5, [r4, #4]
 8002968:	60a5      	str	r5, [r4, #8]
 800296a:	2d00      	cmp	r5, #0
 800296c:	bfa2      	ittt	ge
 800296e:	6821      	ldrge	r1, [r4, #0]
 8002970:	f021 0104 	bicge.w	r1, r1, #4
 8002974:	6021      	strge	r1, [r4, #0]
 8002976:	b90e      	cbnz	r6, 800297c <_printf_i+0x118>
 8002978:	2d00      	cmp	r5, #0
 800297a:	d04d      	beq.n	8002a18 <_printf_i+0x1b4>
 800297c:	4615      	mov	r5, r2
 800297e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002982:	fb03 6711 	mls	r7, r3, r1, r6
 8002986:	5dc7      	ldrb	r7, [r0, r7]
 8002988:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800298c:	4637      	mov	r7, r6
 800298e:	42bb      	cmp	r3, r7
 8002990:	460e      	mov	r6, r1
 8002992:	d9f4      	bls.n	800297e <_printf_i+0x11a>
 8002994:	2b08      	cmp	r3, #8
 8002996:	d10b      	bne.n	80029b0 <_printf_i+0x14c>
 8002998:	6823      	ldr	r3, [r4, #0]
 800299a:	07de      	lsls	r6, r3, #31
 800299c:	d508      	bpl.n	80029b0 <_printf_i+0x14c>
 800299e:	6923      	ldr	r3, [r4, #16]
 80029a0:	6861      	ldr	r1, [r4, #4]
 80029a2:	4299      	cmp	r1, r3
 80029a4:	bfde      	ittt	le
 80029a6:	2330      	movle	r3, #48	; 0x30
 80029a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80029b0:	1b52      	subs	r2, r2, r5
 80029b2:	6122      	str	r2, [r4, #16]
 80029b4:	f8cd a000 	str.w	sl, [sp]
 80029b8:	464b      	mov	r3, r9
 80029ba:	aa03      	add	r2, sp, #12
 80029bc:	4621      	mov	r1, r4
 80029be:	4640      	mov	r0, r8
 80029c0:	f7ff fee2 	bl	8002788 <_printf_common>
 80029c4:	3001      	adds	r0, #1
 80029c6:	d14c      	bne.n	8002a62 <_printf_i+0x1fe>
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	b004      	add	sp, #16
 80029ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029d2:	4835      	ldr	r0, [pc, #212]	; (8002aa8 <_printf_i+0x244>)
 80029d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80029d8:	6829      	ldr	r1, [r5, #0]
 80029da:	6823      	ldr	r3, [r4, #0]
 80029dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80029e0:	6029      	str	r1, [r5, #0]
 80029e2:	061d      	lsls	r5, r3, #24
 80029e4:	d514      	bpl.n	8002a10 <_printf_i+0x1ac>
 80029e6:	07df      	lsls	r7, r3, #31
 80029e8:	bf44      	itt	mi
 80029ea:	f043 0320 	orrmi.w	r3, r3, #32
 80029ee:	6023      	strmi	r3, [r4, #0]
 80029f0:	b91e      	cbnz	r6, 80029fa <_printf_i+0x196>
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	f023 0320 	bic.w	r3, r3, #32
 80029f8:	6023      	str	r3, [r4, #0]
 80029fa:	2310      	movs	r3, #16
 80029fc:	e7b0      	b.n	8002960 <_printf_i+0xfc>
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	f043 0320 	orr.w	r3, r3, #32
 8002a04:	6023      	str	r3, [r4, #0]
 8002a06:	2378      	movs	r3, #120	; 0x78
 8002a08:	4828      	ldr	r0, [pc, #160]	; (8002aac <_printf_i+0x248>)
 8002a0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a0e:	e7e3      	b.n	80029d8 <_printf_i+0x174>
 8002a10:	0659      	lsls	r1, r3, #25
 8002a12:	bf48      	it	mi
 8002a14:	b2b6      	uxthmi	r6, r6
 8002a16:	e7e6      	b.n	80029e6 <_printf_i+0x182>
 8002a18:	4615      	mov	r5, r2
 8002a1a:	e7bb      	b.n	8002994 <_printf_i+0x130>
 8002a1c:	682b      	ldr	r3, [r5, #0]
 8002a1e:	6826      	ldr	r6, [r4, #0]
 8002a20:	6961      	ldr	r1, [r4, #20]
 8002a22:	1d18      	adds	r0, r3, #4
 8002a24:	6028      	str	r0, [r5, #0]
 8002a26:	0635      	lsls	r5, r6, #24
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	d501      	bpl.n	8002a30 <_printf_i+0x1cc>
 8002a2c:	6019      	str	r1, [r3, #0]
 8002a2e:	e002      	b.n	8002a36 <_printf_i+0x1d2>
 8002a30:	0670      	lsls	r0, r6, #25
 8002a32:	d5fb      	bpl.n	8002a2c <_printf_i+0x1c8>
 8002a34:	8019      	strh	r1, [r3, #0]
 8002a36:	2300      	movs	r3, #0
 8002a38:	6123      	str	r3, [r4, #16]
 8002a3a:	4615      	mov	r5, r2
 8002a3c:	e7ba      	b.n	80029b4 <_printf_i+0x150>
 8002a3e:	682b      	ldr	r3, [r5, #0]
 8002a40:	1d1a      	adds	r2, r3, #4
 8002a42:	602a      	str	r2, [r5, #0]
 8002a44:	681d      	ldr	r5, [r3, #0]
 8002a46:	6862      	ldr	r2, [r4, #4]
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4628      	mov	r0, r5
 8002a4c:	f7fd fbc0 	bl	80001d0 <memchr>
 8002a50:	b108      	cbz	r0, 8002a56 <_printf_i+0x1f2>
 8002a52:	1b40      	subs	r0, r0, r5
 8002a54:	6060      	str	r0, [r4, #4]
 8002a56:	6863      	ldr	r3, [r4, #4]
 8002a58:	6123      	str	r3, [r4, #16]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a60:	e7a8      	b.n	80029b4 <_printf_i+0x150>
 8002a62:	6923      	ldr	r3, [r4, #16]
 8002a64:	462a      	mov	r2, r5
 8002a66:	4649      	mov	r1, r9
 8002a68:	4640      	mov	r0, r8
 8002a6a:	47d0      	blx	sl
 8002a6c:	3001      	adds	r0, #1
 8002a6e:	d0ab      	beq.n	80029c8 <_printf_i+0x164>
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	079b      	lsls	r3, r3, #30
 8002a74:	d413      	bmi.n	8002a9e <_printf_i+0x23a>
 8002a76:	68e0      	ldr	r0, [r4, #12]
 8002a78:	9b03      	ldr	r3, [sp, #12]
 8002a7a:	4298      	cmp	r0, r3
 8002a7c:	bfb8      	it	lt
 8002a7e:	4618      	movlt	r0, r3
 8002a80:	e7a4      	b.n	80029cc <_printf_i+0x168>
 8002a82:	2301      	movs	r3, #1
 8002a84:	4632      	mov	r2, r6
 8002a86:	4649      	mov	r1, r9
 8002a88:	4640      	mov	r0, r8
 8002a8a:	47d0      	blx	sl
 8002a8c:	3001      	adds	r0, #1
 8002a8e:	d09b      	beq.n	80029c8 <_printf_i+0x164>
 8002a90:	3501      	adds	r5, #1
 8002a92:	68e3      	ldr	r3, [r4, #12]
 8002a94:	9903      	ldr	r1, [sp, #12]
 8002a96:	1a5b      	subs	r3, r3, r1
 8002a98:	42ab      	cmp	r3, r5
 8002a9a:	dcf2      	bgt.n	8002a82 <_printf_i+0x21e>
 8002a9c:	e7eb      	b.n	8002a76 <_printf_i+0x212>
 8002a9e:	2500      	movs	r5, #0
 8002aa0:	f104 0619 	add.w	r6, r4, #25
 8002aa4:	e7f5      	b.n	8002a92 <_printf_i+0x22e>
 8002aa6:	bf00      	nop
 8002aa8:	08003159 	.word	0x08003159
 8002aac:	0800316a 	.word	0x0800316a

08002ab0 <_sbrk_r>:
 8002ab0:	b538      	push	{r3, r4, r5, lr}
 8002ab2:	4d06      	ldr	r5, [pc, #24]	; (8002acc <_sbrk_r+0x1c>)
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	4604      	mov	r4, r0
 8002ab8:	4608      	mov	r0, r1
 8002aba:	602b      	str	r3, [r5, #0]
 8002abc:	f7fd ff86 	bl	80009cc <_sbrk>
 8002ac0:	1c43      	adds	r3, r0, #1
 8002ac2:	d102      	bne.n	8002aca <_sbrk_r+0x1a>
 8002ac4:	682b      	ldr	r3, [r5, #0]
 8002ac6:	b103      	cbz	r3, 8002aca <_sbrk_r+0x1a>
 8002ac8:	6023      	str	r3, [r4, #0]
 8002aca:	bd38      	pop	{r3, r4, r5, pc}
 8002acc:	200000ec 	.word	0x200000ec

08002ad0 <__sread>:
 8002ad0:	b510      	push	{r4, lr}
 8002ad2:	460c      	mov	r4, r1
 8002ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ad8:	f000 fab2 	bl	8003040 <_read_r>
 8002adc:	2800      	cmp	r0, #0
 8002ade:	bfab      	itete	ge
 8002ae0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002ae2:	89a3      	ldrhlt	r3, [r4, #12]
 8002ae4:	181b      	addge	r3, r3, r0
 8002ae6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002aea:	bfac      	ite	ge
 8002aec:	6563      	strge	r3, [r4, #84]	; 0x54
 8002aee:	81a3      	strhlt	r3, [r4, #12]
 8002af0:	bd10      	pop	{r4, pc}

08002af2 <__swrite>:
 8002af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002af6:	461f      	mov	r7, r3
 8002af8:	898b      	ldrh	r3, [r1, #12]
 8002afa:	05db      	lsls	r3, r3, #23
 8002afc:	4605      	mov	r5, r0
 8002afe:	460c      	mov	r4, r1
 8002b00:	4616      	mov	r6, r2
 8002b02:	d505      	bpl.n	8002b10 <__swrite+0x1e>
 8002b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b08:	2302      	movs	r3, #2
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f000 f9c8 	bl	8002ea0 <_lseek_r>
 8002b10:	89a3      	ldrh	r3, [r4, #12]
 8002b12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b1a:	81a3      	strh	r3, [r4, #12]
 8002b1c:	4632      	mov	r2, r6
 8002b1e:	463b      	mov	r3, r7
 8002b20:	4628      	mov	r0, r5
 8002b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b26:	f000 b869 	b.w	8002bfc <_write_r>

08002b2a <__sseek>:
 8002b2a:	b510      	push	{r4, lr}
 8002b2c:	460c      	mov	r4, r1
 8002b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b32:	f000 f9b5 	bl	8002ea0 <_lseek_r>
 8002b36:	1c43      	adds	r3, r0, #1
 8002b38:	89a3      	ldrh	r3, [r4, #12]
 8002b3a:	bf15      	itete	ne
 8002b3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002b3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002b42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002b46:	81a3      	strheq	r3, [r4, #12]
 8002b48:	bf18      	it	ne
 8002b4a:	81a3      	strhne	r3, [r4, #12]
 8002b4c:	bd10      	pop	{r4, pc}

08002b4e <__sclose>:
 8002b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b52:	f000 b8d3 	b.w	8002cfc <_close_r>
	...

08002b58 <__swbuf_r>:
 8002b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b5a:	460e      	mov	r6, r1
 8002b5c:	4614      	mov	r4, r2
 8002b5e:	4605      	mov	r5, r0
 8002b60:	b118      	cbz	r0, 8002b6a <__swbuf_r+0x12>
 8002b62:	6983      	ldr	r3, [r0, #24]
 8002b64:	b90b      	cbnz	r3, 8002b6a <__swbuf_r+0x12>
 8002b66:	f7ff fb81 	bl	800226c <__sinit>
 8002b6a:	4b21      	ldr	r3, [pc, #132]	; (8002bf0 <__swbuf_r+0x98>)
 8002b6c:	429c      	cmp	r4, r3
 8002b6e:	d12b      	bne.n	8002bc8 <__swbuf_r+0x70>
 8002b70:	686c      	ldr	r4, [r5, #4]
 8002b72:	69a3      	ldr	r3, [r4, #24]
 8002b74:	60a3      	str	r3, [r4, #8]
 8002b76:	89a3      	ldrh	r3, [r4, #12]
 8002b78:	071a      	lsls	r2, r3, #28
 8002b7a:	d52f      	bpl.n	8002bdc <__swbuf_r+0x84>
 8002b7c:	6923      	ldr	r3, [r4, #16]
 8002b7e:	b36b      	cbz	r3, 8002bdc <__swbuf_r+0x84>
 8002b80:	6923      	ldr	r3, [r4, #16]
 8002b82:	6820      	ldr	r0, [r4, #0]
 8002b84:	1ac0      	subs	r0, r0, r3
 8002b86:	6963      	ldr	r3, [r4, #20]
 8002b88:	b2f6      	uxtb	r6, r6
 8002b8a:	4283      	cmp	r3, r0
 8002b8c:	4637      	mov	r7, r6
 8002b8e:	dc04      	bgt.n	8002b9a <__swbuf_r+0x42>
 8002b90:	4621      	mov	r1, r4
 8002b92:	4628      	mov	r0, r5
 8002b94:	f000 f948 	bl	8002e28 <_fflush_r>
 8002b98:	bb30      	cbnz	r0, 8002be8 <__swbuf_r+0x90>
 8002b9a:	68a3      	ldr	r3, [r4, #8]
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	60a3      	str	r3, [r4, #8]
 8002ba0:	6823      	ldr	r3, [r4, #0]
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	6022      	str	r2, [r4, #0]
 8002ba6:	701e      	strb	r6, [r3, #0]
 8002ba8:	6963      	ldr	r3, [r4, #20]
 8002baa:	3001      	adds	r0, #1
 8002bac:	4283      	cmp	r3, r0
 8002bae:	d004      	beq.n	8002bba <__swbuf_r+0x62>
 8002bb0:	89a3      	ldrh	r3, [r4, #12]
 8002bb2:	07db      	lsls	r3, r3, #31
 8002bb4:	d506      	bpl.n	8002bc4 <__swbuf_r+0x6c>
 8002bb6:	2e0a      	cmp	r6, #10
 8002bb8:	d104      	bne.n	8002bc4 <__swbuf_r+0x6c>
 8002bba:	4621      	mov	r1, r4
 8002bbc:	4628      	mov	r0, r5
 8002bbe:	f000 f933 	bl	8002e28 <_fflush_r>
 8002bc2:	b988      	cbnz	r0, 8002be8 <__swbuf_r+0x90>
 8002bc4:	4638      	mov	r0, r7
 8002bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <__swbuf_r+0x9c>)
 8002bca:	429c      	cmp	r4, r3
 8002bcc:	d101      	bne.n	8002bd2 <__swbuf_r+0x7a>
 8002bce:	68ac      	ldr	r4, [r5, #8]
 8002bd0:	e7cf      	b.n	8002b72 <__swbuf_r+0x1a>
 8002bd2:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <__swbuf_r+0xa0>)
 8002bd4:	429c      	cmp	r4, r3
 8002bd6:	bf08      	it	eq
 8002bd8:	68ec      	ldreq	r4, [r5, #12]
 8002bda:	e7ca      	b.n	8002b72 <__swbuf_r+0x1a>
 8002bdc:	4621      	mov	r1, r4
 8002bde:	4628      	mov	r0, r5
 8002be0:	f000 f81e 	bl	8002c20 <__swsetup_r>
 8002be4:	2800      	cmp	r0, #0
 8002be6:	d0cb      	beq.n	8002b80 <__swbuf_r+0x28>
 8002be8:	f04f 37ff 	mov.w	r7, #4294967295
 8002bec:	e7ea      	b.n	8002bc4 <__swbuf_r+0x6c>
 8002bee:	bf00      	nop
 8002bf0:	08003108 	.word	0x08003108
 8002bf4:	08003128 	.word	0x08003128
 8002bf8:	080030e8 	.word	0x080030e8

08002bfc <_write_r>:
 8002bfc:	b538      	push	{r3, r4, r5, lr}
 8002bfe:	4d07      	ldr	r5, [pc, #28]	; (8002c1c <_write_r+0x20>)
 8002c00:	4604      	mov	r4, r0
 8002c02:	4608      	mov	r0, r1
 8002c04:	4611      	mov	r1, r2
 8002c06:	2200      	movs	r2, #0
 8002c08:	602a      	str	r2, [r5, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f7fd fcd9 	bl	80005c2 <_write>
 8002c10:	1c43      	adds	r3, r0, #1
 8002c12:	d102      	bne.n	8002c1a <_write_r+0x1e>
 8002c14:	682b      	ldr	r3, [r5, #0]
 8002c16:	b103      	cbz	r3, 8002c1a <_write_r+0x1e>
 8002c18:	6023      	str	r3, [r4, #0]
 8002c1a:	bd38      	pop	{r3, r4, r5, pc}
 8002c1c:	200000ec 	.word	0x200000ec

08002c20 <__swsetup_r>:
 8002c20:	4b32      	ldr	r3, [pc, #200]	; (8002cec <__swsetup_r+0xcc>)
 8002c22:	b570      	push	{r4, r5, r6, lr}
 8002c24:	681d      	ldr	r5, [r3, #0]
 8002c26:	4606      	mov	r6, r0
 8002c28:	460c      	mov	r4, r1
 8002c2a:	b125      	cbz	r5, 8002c36 <__swsetup_r+0x16>
 8002c2c:	69ab      	ldr	r3, [r5, #24]
 8002c2e:	b913      	cbnz	r3, 8002c36 <__swsetup_r+0x16>
 8002c30:	4628      	mov	r0, r5
 8002c32:	f7ff fb1b 	bl	800226c <__sinit>
 8002c36:	4b2e      	ldr	r3, [pc, #184]	; (8002cf0 <__swsetup_r+0xd0>)
 8002c38:	429c      	cmp	r4, r3
 8002c3a:	d10f      	bne.n	8002c5c <__swsetup_r+0x3c>
 8002c3c:	686c      	ldr	r4, [r5, #4]
 8002c3e:	89a3      	ldrh	r3, [r4, #12]
 8002c40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c44:	0719      	lsls	r1, r3, #28
 8002c46:	d42c      	bmi.n	8002ca2 <__swsetup_r+0x82>
 8002c48:	06dd      	lsls	r5, r3, #27
 8002c4a:	d411      	bmi.n	8002c70 <__swsetup_r+0x50>
 8002c4c:	2309      	movs	r3, #9
 8002c4e:	6033      	str	r3, [r6, #0]
 8002c50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002c54:	81a3      	strh	r3, [r4, #12]
 8002c56:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5a:	e03e      	b.n	8002cda <__swsetup_r+0xba>
 8002c5c:	4b25      	ldr	r3, [pc, #148]	; (8002cf4 <__swsetup_r+0xd4>)
 8002c5e:	429c      	cmp	r4, r3
 8002c60:	d101      	bne.n	8002c66 <__swsetup_r+0x46>
 8002c62:	68ac      	ldr	r4, [r5, #8]
 8002c64:	e7eb      	b.n	8002c3e <__swsetup_r+0x1e>
 8002c66:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <__swsetup_r+0xd8>)
 8002c68:	429c      	cmp	r4, r3
 8002c6a:	bf08      	it	eq
 8002c6c:	68ec      	ldreq	r4, [r5, #12]
 8002c6e:	e7e6      	b.n	8002c3e <__swsetup_r+0x1e>
 8002c70:	0758      	lsls	r0, r3, #29
 8002c72:	d512      	bpl.n	8002c9a <__swsetup_r+0x7a>
 8002c74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c76:	b141      	cbz	r1, 8002c8a <__swsetup_r+0x6a>
 8002c78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c7c:	4299      	cmp	r1, r3
 8002c7e:	d002      	beq.n	8002c86 <__swsetup_r+0x66>
 8002c80:	4630      	mov	r0, r6
 8002c82:	f000 f991 	bl	8002fa8 <_free_r>
 8002c86:	2300      	movs	r3, #0
 8002c88:	6363      	str	r3, [r4, #52]	; 0x34
 8002c8a:	89a3      	ldrh	r3, [r4, #12]
 8002c8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c90:	81a3      	strh	r3, [r4, #12]
 8002c92:	2300      	movs	r3, #0
 8002c94:	6063      	str	r3, [r4, #4]
 8002c96:	6923      	ldr	r3, [r4, #16]
 8002c98:	6023      	str	r3, [r4, #0]
 8002c9a:	89a3      	ldrh	r3, [r4, #12]
 8002c9c:	f043 0308 	orr.w	r3, r3, #8
 8002ca0:	81a3      	strh	r3, [r4, #12]
 8002ca2:	6923      	ldr	r3, [r4, #16]
 8002ca4:	b94b      	cbnz	r3, 8002cba <__swsetup_r+0x9a>
 8002ca6:	89a3      	ldrh	r3, [r4, #12]
 8002ca8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cb0:	d003      	beq.n	8002cba <__swsetup_r+0x9a>
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	4630      	mov	r0, r6
 8002cb6:	f000 f92b 	bl	8002f10 <__smakebuf_r>
 8002cba:	89a0      	ldrh	r0, [r4, #12]
 8002cbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002cc0:	f010 0301 	ands.w	r3, r0, #1
 8002cc4:	d00a      	beq.n	8002cdc <__swsetup_r+0xbc>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60a3      	str	r3, [r4, #8]
 8002cca:	6963      	ldr	r3, [r4, #20]
 8002ccc:	425b      	negs	r3, r3
 8002cce:	61a3      	str	r3, [r4, #24]
 8002cd0:	6923      	ldr	r3, [r4, #16]
 8002cd2:	b943      	cbnz	r3, 8002ce6 <__swsetup_r+0xc6>
 8002cd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002cd8:	d1ba      	bne.n	8002c50 <__swsetup_r+0x30>
 8002cda:	bd70      	pop	{r4, r5, r6, pc}
 8002cdc:	0781      	lsls	r1, r0, #30
 8002cde:	bf58      	it	pl
 8002ce0:	6963      	ldrpl	r3, [r4, #20]
 8002ce2:	60a3      	str	r3, [r4, #8]
 8002ce4:	e7f4      	b.n	8002cd0 <__swsetup_r+0xb0>
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	e7f7      	b.n	8002cda <__swsetup_r+0xba>
 8002cea:	bf00      	nop
 8002cec:	2000000c 	.word	0x2000000c
 8002cf0:	08003108 	.word	0x08003108
 8002cf4:	08003128 	.word	0x08003128
 8002cf8:	080030e8 	.word	0x080030e8

08002cfc <_close_r>:
 8002cfc:	b538      	push	{r3, r4, r5, lr}
 8002cfe:	4d06      	ldr	r5, [pc, #24]	; (8002d18 <_close_r+0x1c>)
 8002d00:	2300      	movs	r3, #0
 8002d02:	4604      	mov	r4, r0
 8002d04:	4608      	mov	r0, r1
 8002d06:	602b      	str	r3, [r5, #0]
 8002d08:	f7fd fe2b 	bl	8000962 <_close>
 8002d0c:	1c43      	adds	r3, r0, #1
 8002d0e:	d102      	bne.n	8002d16 <_close_r+0x1a>
 8002d10:	682b      	ldr	r3, [r5, #0]
 8002d12:	b103      	cbz	r3, 8002d16 <_close_r+0x1a>
 8002d14:	6023      	str	r3, [r4, #0]
 8002d16:	bd38      	pop	{r3, r4, r5, pc}
 8002d18:	200000ec 	.word	0x200000ec

08002d1c <__sflush_r>:
 8002d1c:	898a      	ldrh	r2, [r1, #12]
 8002d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d22:	4605      	mov	r5, r0
 8002d24:	0710      	lsls	r0, r2, #28
 8002d26:	460c      	mov	r4, r1
 8002d28:	d458      	bmi.n	8002ddc <__sflush_r+0xc0>
 8002d2a:	684b      	ldr	r3, [r1, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	dc05      	bgt.n	8002d3c <__sflush_r+0x20>
 8002d30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	dc02      	bgt.n	8002d3c <__sflush_r+0x20>
 8002d36:	2000      	movs	r0, #0
 8002d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d3e:	2e00      	cmp	r6, #0
 8002d40:	d0f9      	beq.n	8002d36 <__sflush_r+0x1a>
 8002d42:	2300      	movs	r3, #0
 8002d44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d48:	682f      	ldr	r7, [r5, #0]
 8002d4a:	602b      	str	r3, [r5, #0]
 8002d4c:	d032      	beq.n	8002db4 <__sflush_r+0x98>
 8002d4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d50:	89a3      	ldrh	r3, [r4, #12]
 8002d52:	075a      	lsls	r2, r3, #29
 8002d54:	d505      	bpl.n	8002d62 <__sflush_r+0x46>
 8002d56:	6863      	ldr	r3, [r4, #4]
 8002d58:	1ac0      	subs	r0, r0, r3
 8002d5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d5c:	b10b      	cbz	r3, 8002d62 <__sflush_r+0x46>
 8002d5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d60:	1ac0      	subs	r0, r0, r3
 8002d62:	2300      	movs	r3, #0
 8002d64:	4602      	mov	r2, r0
 8002d66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d68:	6a21      	ldr	r1, [r4, #32]
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	47b0      	blx	r6
 8002d6e:	1c43      	adds	r3, r0, #1
 8002d70:	89a3      	ldrh	r3, [r4, #12]
 8002d72:	d106      	bne.n	8002d82 <__sflush_r+0x66>
 8002d74:	6829      	ldr	r1, [r5, #0]
 8002d76:	291d      	cmp	r1, #29
 8002d78:	d82c      	bhi.n	8002dd4 <__sflush_r+0xb8>
 8002d7a:	4a2a      	ldr	r2, [pc, #168]	; (8002e24 <__sflush_r+0x108>)
 8002d7c:	40ca      	lsrs	r2, r1
 8002d7e:	07d6      	lsls	r6, r2, #31
 8002d80:	d528      	bpl.n	8002dd4 <__sflush_r+0xb8>
 8002d82:	2200      	movs	r2, #0
 8002d84:	6062      	str	r2, [r4, #4]
 8002d86:	04d9      	lsls	r1, r3, #19
 8002d88:	6922      	ldr	r2, [r4, #16]
 8002d8a:	6022      	str	r2, [r4, #0]
 8002d8c:	d504      	bpl.n	8002d98 <__sflush_r+0x7c>
 8002d8e:	1c42      	adds	r2, r0, #1
 8002d90:	d101      	bne.n	8002d96 <__sflush_r+0x7a>
 8002d92:	682b      	ldr	r3, [r5, #0]
 8002d94:	b903      	cbnz	r3, 8002d98 <__sflush_r+0x7c>
 8002d96:	6560      	str	r0, [r4, #84]	; 0x54
 8002d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d9a:	602f      	str	r7, [r5, #0]
 8002d9c:	2900      	cmp	r1, #0
 8002d9e:	d0ca      	beq.n	8002d36 <__sflush_r+0x1a>
 8002da0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002da4:	4299      	cmp	r1, r3
 8002da6:	d002      	beq.n	8002dae <__sflush_r+0x92>
 8002da8:	4628      	mov	r0, r5
 8002daa:	f000 f8fd 	bl	8002fa8 <_free_r>
 8002dae:	2000      	movs	r0, #0
 8002db0:	6360      	str	r0, [r4, #52]	; 0x34
 8002db2:	e7c1      	b.n	8002d38 <__sflush_r+0x1c>
 8002db4:	6a21      	ldr	r1, [r4, #32]
 8002db6:	2301      	movs	r3, #1
 8002db8:	4628      	mov	r0, r5
 8002dba:	47b0      	blx	r6
 8002dbc:	1c41      	adds	r1, r0, #1
 8002dbe:	d1c7      	bne.n	8002d50 <__sflush_r+0x34>
 8002dc0:	682b      	ldr	r3, [r5, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0c4      	beq.n	8002d50 <__sflush_r+0x34>
 8002dc6:	2b1d      	cmp	r3, #29
 8002dc8:	d001      	beq.n	8002dce <__sflush_r+0xb2>
 8002dca:	2b16      	cmp	r3, #22
 8002dcc:	d101      	bne.n	8002dd2 <__sflush_r+0xb6>
 8002dce:	602f      	str	r7, [r5, #0]
 8002dd0:	e7b1      	b.n	8002d36 <__sflush_r+0x1a>
 8002dd2:	89a3      	ldrh	r3, [r4, #12]
 8002dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dd8:	81a3      	strh	r3, [r4, #12]
 8002dda:	e7ad      	b.n	8002d38 <__sflush_r+0x1c>
 8002ddc:	690f      	ldr	r7, [r1, #16]
 8002dde:	2f00      	cmp	r7, #0
 8002de0:	d0a9      	beq.n	8002d36 <__sflush_r+0x1a>
 8002de2:	0793      	lsls	r3, r2, #30
 8002de4:	680e      	ldr	r6, [r1, #0]
 8002de6:	bf08      	it	eq
 8002de8:	694b      	ldreq	r3, [r1, #20]
 8002dea:	600f      	str	r7, [r1, #0]
 8002dec:	bf18      	it	ne
 8002dee:	2300      	movne	r3, #0
 8002df0:	eba6 0807 	sub.w	r8, r6, r7
 8002df4:	608b      	str	r3, [r1, #8]
 8002df6:	f1b8 0f00 	cmp.w	r8, #0
 8002dfa:	dd9c      	ble.n	8002d36 <__sflush_r+0x1a>
 8002dfc:	6a21      	ldr	r1, [r4, #32]
 8002dfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002e00:	4643      	mov	r3, r8
 8002e02:	463a      	mov	r2, r7
 8002e04:	4628      	mov	r0, r5
 8002e06:	47b0      	blx	r6
 8002e08:	2800      	cmp	r0, #0
 8002e0a:	dc06      	bgt.n	8002e1a <__sflush_r+0xfe>
 8002e0c:	89a3      	ldrh	r3, [r4, #12]
 8002e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e12:	81a3      	strh	r3, [r4, #12]
 8002e14:	f04f 30ff 	mov.w	r0, #4294967295
 8002e18:	e78e      	b.n	8002d38 <__sflush_r+0x1c>
 8002e1a:	4407      	add	r7, r0
 8002e1c:	eba8 0800 	sub.w	r8, r8, r0
 8002e20:	e7e9      	b.n	8002df6 <__sflush_r+0xda>
 8002e22:	bf00      	nop
 8002e24:	20400001 	.word	0x20400001

08002e28 <_fflush_r>:
 8002e28:	b538      	push	{r3, r4, r5, lr}
 8002e2a:	690b      	ldr	r3, [r1, #16]
 8002e2c:	4605      	mov	r5, r0
 8002e2e:	460c      	mov	r4, r1
 8002e30:	b913      	cbnz	r3, 8002e38 <_fflush_r+0x10>
 8002e32:	2500      	movs	r5, #0
 8002e34:	4628      	mov	r0, r5
 8002e36:	bd38      	pop	{r3, r4, r5, pc}
 8002e38:	b118      	cbz	r0, 8002e42 <_fflush_r+0x1a>
 8002e3a:	6983      	ldr	r3, [r0, #24]
 8002e3c:	b90b      	cbnz	r3, 8002e42 <_fflush_r+0x1a>
 8002e3e:	f7ff fa15 	bl	800226c <__sinit>
 8002e42:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <_fflush_r+0x6c>)
 8002e44:	429c      	cmp	r4, r3
 8002e46:	d11b      	bne.n	8002e80 <_fflush_r+0x58>
 8002e48:	686c      	ldr	r4, [r5, #4]
 8002e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0ef      	beq.n	8002e32 <_fflush_r+0xa>
 8002e52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e54:	07d0      	lsls	r0, r2, #31
 8002e56:	d404      	bmi.n	8002e62 <_fflush_r+0x3a>
 8002e58:	0599      	lsls	r1, r3, #22
 8002e5a:	d402      	bmi.n	8002e62 <_fflush_r+0x3a>
 8002e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e5e:	f7ff faa3 	bl	80023a8 <__retarget_lock_acquire_recursive>
 8002e62:	4628      	mov	r0, r5
 8002e64:	4621      	mov	r1, r4
 8002e66:	f7ff ff59 	bl	8002d1c <__sflush_r>
 8002e6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e6c:	07da      	lsls	r2, r3, #31
 8002e6e:	4605      	mov	r5, r0
 8002e70:	d4e0      	bmi.n	8002e34 <_fflush_r+0xc>
 8002e72:	89a3      	ldrh	r3, [r4, #12]
 8002e74:	059b      	lsls	r3, r3, #22
 8002e76:	d4dd      	bmi.n	8002e34 <_fflush_r+0xc>
 8002e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e7a:	f7ff fa96 	bl	80023aa <__retarget_lock_release_recursive>
 8002e7e:	e7d9      	b.n	8002e34 <_fflush_r+0xc>
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <_fflush_r+0x70>)
 8002e82:	429c      	cmp	r4, r3
 8002e84:	d101      	bne.n	8002e8a <_fflush_r+0x62>
 8002e86:	68ac      	ldr	r4, [r5, #8]
 8002e88:	e7df      	b.n	8002e4a <_fflush_r+0x22>
 8002e8a:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <_fflush_r+0x74>)
 8002e8c:	429c      	cmp	r4, r3
 8002e8e:	bf08      	it	eq
 8002e90:	68ec      	ldreq	r4, [r5, #12]
 8002e92:	e7da      	b.n	8002e4a <_fflush_r+0x22>
 8002e94:	08003108 	.word	0x08003108
 8002e98:	08003128 	.word	0x08003128
 8002e9c:	080030e8 	.word	0x080030e8

08002ea0 <_lseek_r>:
 8002ea0:	b538      	push	{r3, r4, r5, lr}
 8002ea2:	4d07      	ldr	r5, [pc, #28]	; (8002ec0 <_lseek_r+0x20>)
 8002ea4:	4604      	mov	r4, r0
 8002ea6:	4608      	mov	r0, r1
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	2200      	movs	r2, #0
 8002eac:	602a      	str	r2, [r5, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f7fd fd7e 	bl	80009b0 <_lseek>
 8002eb4:	1c43      	adds	r3, r0, #1
 8002eb6:	d102      	bne.n	8002ebe <_lseek_r+0x1e>
 8002eb8:	682b      	ldr	r3, [r5, #0]
 8002eba:	b103      	cbz	r3, 8002ebe <_lseek_r+0x1e>
 8002ebc:	6023      	str	r3, [r4, #0]
 8002ebe:	bd38      	pop	{r3, r4, r5, pc}
 8002ec0:	200000ec 	.word	0x200000ec

08002ec4 <__swhatbuf_r>:
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	460e      	mov	r6, r1
 8002ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ecc:	2900      	cmp	r1, #0
 8002ece:	b096      	sub	sp, #88	; 0x58
 8002ed0:	4614      	mov	r4, r2
 8002ed2:	461d      	mov	r5, r3
 8002ed4:	da08      	bge.n	8002ee8 <__swhatbuf_r+0x24>
 8002ed6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	602a      	str	r2, [r5, #0]
 8002ede:	061a      	lsls	r2, r3, #24
 8002ee0:	d410      	bmi.n	8002f04 <__swhatbuf_r+0x40>
 8002ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ee6:	e00e      	b.n	8002f06 <__swhatbuf_r+0x42>
 8002ee8:	466a      	mov	r2, sp
 8002eea:	f000 f8bb 	bl	8003064 <_fstat_r>
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	dbf1      	blt.n	8002ed6 <__swhatbuf_r+0x12>
 8002ef2:	9a01      	ldr	r2, [sp, #4]
 8002ef4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002ef8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002efc:	425a      	negs	r2, r3
 8002efe:	415a      	adcs	r2, r3
 8002f00:	602a      	str	r2, [r5, #0]
 8002f02:	e7ee      	b.n	8002ee2 <__swhatbuf_r+0x1e>
 8002f04:	2340      	movs	r3, #64	; 0x40
 8002f06:	2000      	movs	r0, #0
 8002f08:	6023      	str	r3, [r4, #0]
 8002f0a:	b016      	add	sp, #88	; 0x58
 8002f0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f10 <__smakebuf_r>:
 8002f10:	898b      	ldrh	r3, [r1, #12]
 8002f12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f14:	079d      	lsls	r5, r3, #30
 8002f16:	4606      	mov	r6, r0
 8002f18:	460c      	mov	r4, r1
 8002f1a:	d507      	bpl.n	8002f2c <__smakebuf_r+0x1c>
 8002f1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f20:	6023      	str	r3, [r4, #0]
 8002f22:	6123      	str	r3, [r4, #16]
 8002f24:	2301      	movs	r3, #1
 8002f26:	6163      	str	r3, [r4, #20]
 8002f28:	b002      	add	sp, #8
 8002f2a:	bd70      	pop	{r4, r5, r6, pc}
 8002f2c:	ab01      	add	r3, sp, #4
 8002f2e:	466a      	mov	r2, sp
 8002f30:	f7ff ffc8 	bl	8002ec4 <__swhatbuf_r>
 8002f34:	9900      	ldr	r1, [sp, #0]
 8002f36:	4605      	mov	r5, r0
 8002f38:	4630      	mov	r0, r6
 8002f3a:	f7ff fa57 	bl	80023ec <_malloc_r>
 8002f3e:	b948      	cbnz	r0, 8002f54 <__smakebuf_r+0x44>
 8002f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f44:	059a      	lsls	r2, r3, #22
 8002f46:	d4ef      	bmi.n	8002f28 <__smakebuf_r+0x18>
 8002f48:	f023 0303 	bic.w	r3, r3, #3
 8002f4c:	f043 0302 	orr.w	r3, r3, #2
 8002f50:	81a3      	strh	r3, [r4, #12]
 8002f52:	e7e3      	b.n	8002f1c <__smakebuf_r+0xc>
 8002f54:	4b0d      	ldr	r3, [pc, #52]	; (8002f8c <__smakebuf_r+0x7c>)
 8002f56:	62b3      	str	r3, [r6, #40]	; 0x28
 8002f58:	89a3      	ldrh	r3, [r4, #12]
 8002f5a:	6020      	str	r0, [r4, #0]
 8002f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f60:	81a3      	strh	r3, [r4, #12]
 8002f62:	9b00      	ldr	r3, [sp, #0]
 8002f64:	6163      	str	r3, [r4, #20]
 8002f66:	9b01      	ldr	r3, [sp, #4]
 8002f68:	6120      	str	r0, [r4, #16]
 8002f6a:	b15b      	cbz	r3, 8002f84 <__smakebuf_r+0x74>
 8002f6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f70:	4630      	mov	r0, r6
 8002f72:	f000 f889 	bl	8003088 <_isatty_r>
 8002f76:	b128      	cbz	r0, 8002f84 <__smakebuf_r+0x74>
 8002f78:	89a3      	ldrh	r3, [r4, #12]
 8002f7a:	f023 0303 	bic.w	r3, r3, #3
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	81a3      	strh	r3, [r4, #12]
 8002f84:	89a0      	ldrh	r0, [r4, #12]
 8002f86:	4305      	orrs	r5, r0
 8002f88:	81a5      	strh	r5, [r4, #12]
 8002f8a:	e7cd      	b.n	8002f28 <__smakebuf_r+0x18>
 8002f8c:	08002205 	.word	0x08002205

08002f90 <__malloc_lock>:
 8002f90:	4801      	ldr	r0, [pc, #4]	; (8002f98 <__malloc_lock+0x8>)
 8002f92:	f7ff ba09 	b.w	80023a8 <__retarget_lock_acquire_recursive>
 8002f96:	bf00      	nop
 8002f98:	200000e0 	.word	0x200000e0

08002f9c <__malloc_unlock>:
 8002f9c:	4801      	ldr	r0, [pc, #4]	; (8002fa4 <__malloc_unlock+0x8>)
 8002f9e:	f7ff ba04 	b.w	80023aa <__retarget_lock_release_recursive>
 8002fa2:	bf00      	nop
 8002fa4:	200000e0 	.word	0x200000e0

08002fa8 <_free_r>:
 8002fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002faa:	2900      	cmp	r1, #0
 8002fac:	d044      	beq.n	8003038 <_free_r+0x90>
 8002fae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fb2:	9001      	str	r0, [sp, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f1a1 0404 	sub.w	r4, r1, #4
 8002fba:	bfb8      	it	lt
 8002fbc:	18e4      	addlt	r4, r4, r3
 8002fbe:	f7ff ffe7 	bl	8002f90 <__malloc_lock>
 8002fc2:	4a1e      	ldr	r2, [pc, #120]	; (800303c <_free_r+0x94>)
 8002fc4:	9801      	ldr	r0, [sp, #4]
 8002fc6:	6813      	ldr	r3, [r2, #0]
 8002fc8:	b933      	cbnz	r3, 8002fd8 <_free_r+0x30>
 8002fca:	6063      	str	r3, [r4, #4]
 8002fcc:	6014      	str	r4, [r2, #0]
 8002fce:	b003      	add	sp, #12
 8002fd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002fd4:	f7ff bfe2 	b.w	8002f9c <__malloc_unlock>
 8002fd8:	42a3      	cmp	r3, r4
 8002fda:	d908      	bls.n	8002fee <_free_r+0x46>
 8002fdc:	6825      	ldr	r5, [r4, #0]
 8002fde:	1961      	adds	r1, r4, r5
 8002fe0:	428b      	cmp	r3, r1
 8002fe2:	bf01      	itttt	eq
 8002fe4:	6819      	ldreq	r1, [r3, #0]
 8002fe6:	685b      	ldreq	r3, [r3, #4]
 8002fe8:	1949      	addeq	r1, r1, r5
 8002fea:	6021      	streq	r1, [r4, #0]
 8002fec:	e7ed      	b.n	8002fca <_free_r+0x22>
 8002fee:	461a      	mov	r2, r3
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	b10b      	cbz	r3, 8002ff8 <_free_r+0x50>
 8002ff4:	42a3      	cmp	r3, r4
 8002ff6:	d9fa      	bls.n	8002fee <_free_r+0x46>
 8002ff8:	6811      	ldr	r1, [r2, #0]
 8002ffa:	1855      	adds	r5, r2, r1
 8002ffc:	42a5      	cmp	r5, r4
 8002ffe:	d10b      	bne.n	8003018 <_free_r+0x70>
 8003000:	6824      	ldr	r4, [r4, #0]
 8003002:	4421      	add	r1, r4
 8003004:	1854      	adds	r4, r2, r1
 8003006:	42a3      	cmp	r3, r4
 8003008:	6011      	str	r1, [r2, #0]
 800300a:	d1e0      	bne.n	8002fce <_free_r+0x26>
 800300c:	681c      	ldr	r4, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	6053      	str	r3, [r2, #4]
 8003012:	4421      	add	r1, r4
 8003014:	6011      	str	r1, [r2, #0]
 8003016:	e7da      	b.n	8002fce <_free_r+0x26>
 8003018:	d902      	bls.n	8003020 <_free_r+0x78>
 800301a:	230c      	movs	r3, #12
 800301c:	6003      	str	r3, [r0, #0]
 800301e:	e7d6      	b.n	8002fce <_free_r+0x26>
 8003020:	6825      	ldr	r5, [r4, #0]
 8003022:	1961      	adds	r1, r4, r5
 8003024:	428b      	cmp	r3, r1
 8003026:	bf04      	itt	eq
 8003028:	6819      	ldreq	r1, [r3, #0]
 800302a:	685b      	ldreq	r3, [r3, #4]
 800302c:	6063      	str	r3, [r4, #4]
 800302e:	bf04      	itt	eq
 8003030:	1949      	addeq	r1, r1, r5
 8003032:	6021      	streq	r1, [r4, #0]
 8003034:	6054      	str	r4, [r2, #4]
 8003036:	e7ca      	b.n	8002fce <_free_r+0x26>
 8003038:	b003      	add	sp, #12
 800303a:	bd30      	pop	{r4, r5, pc}
 800303c:	200000e4 	.word	0x200000e4

08003040 <_read_r>:
 8003040:	b538      	push	{r3, r4, r5, lr}
 8003042:	4d07      	ldr	r5, [pc, #28]	; (8003060 <_read_r+0x20>)
 8003044:	4604      	mov	r4, r0
 8003046:	4608      	mov	r0, r1
 8003048:	4611      	mov	r1, r2
 800304a:	2200      	movs	r2, #0
 800304c:	602a      	str	r2, [r5, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	f7fd fc6a 	bl	8000928 <_read>
 8003054:	1c43      	adds	r3, r0, #1
 8003056:	d102      	bne.n	800305e <_read_r+0x1e>
 8003058:	682b      	ldr	r3, [r5, #0]
 800305a:	b103      	cbz	r3, 800305e <_read_r+0x1e>
 800305c:	6023      	str	r3, [r4, #0]
 800305e:	bd38      	pop	{r3, r4, r5, pc}
 8003060:	200000ec 	.word	0x200000ec

08003064 <_fstat_r>:
 8003064:	b538      	push	{r3, r4, r5, lr}
 8003066:	4d07      	ldr	r5, [pc, #28]	; (8003084 <_fstat_r+0x20>)
 8003068:	2300      	movs	r3, #0
 800306a:	4604      	mov	r4, r0
 800306c:	4608      	mov	r0, r1
 800306e:	4611      	mov	r1, r2
 8003070:	602b      	str	r3, [r5, #0]
 8003072:	f7fd fc82 	bl	800097a <_fstat>
 8003076:	1c43      	adds	r3, r0, #1
 8003078:	d102      	bne.n	8003080 <_fstat_r+0x1c>
 800307a:	682b      	ldr	r3, [r5, #0]
 800307c:	b103      	cbz	r3, 8003080 <_fstat_r+0x1c>
 800307e:	6023      	str	r3, [r4, #0]
 8003080:	bd38      	pop	{r3, r4, r5, pc}
 8003082:	bf00      	nop
 8003084:	200000ec 	.word	0x200000ec

08003088 <_isatty_r>:
 8003088:	b538      	push	{r3, r4, r5, lr}
 800308a:	4d06      	ldr	r5, [pc, #24]	; (80030a4 <_isatty_r+0x1c>)
 800308c:	2300      	movs	r3, #0
 800308e:	4604      	mov	r4, r0
 8003090:	4608      	mov	r0, r1
 8003092:	602b      	str	r3, [r5, #0]
 8003094:	f7fd fc81 	bl	800099a <_isatty>
 8003098:	1c43      	adds	r3, r0, #1
 800309a:	d102      	bne.n	80030a2 <_isatty_r+0x1a>
 800309c:	682b      	ldr	r3, [r5, #0]
 800309e:	b103      	cbz	r3, 80030a2 <_isatty_r+0x1a>
 80030a0:	6023      	str	r3, [r4, #0]
 80030a2:	bd38      	pop	{r3, r4, r5, pc}
 80030a4:	200000ec 	.word	0x200000ec

080030a8 <_init>:
 80030a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030aa:	bf00      	nop
 80030ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ae:	bc08      	pop	{r3}
 80030b0:	469e      	mov	lr, r3
 80030b2:	4770      	bx	lr

080030b4 <_fini>:
 80030b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b6:	bf00      	nop
 80030b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ba:	bc08      	pop	{r3}
 80030bc:	469e      	mov	lr, r3
 80030be:	4770      	bx	lr
