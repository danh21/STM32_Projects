
Led_Reg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000268  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000410  08000418  00010418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000410  08000410  00010418  2**0
                  CONTENTS
  4 .ARM          00000000  08000410  08000410  00010418  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000410  08000418  00010418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000410  08000410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000414  08000414  00010414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010418  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010418  2**0
                  CONTENTS, READONLY
 13 .debug_info   000005b3  00000000  00000000  00010448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000163  00000000  00000000  000109fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00010b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000050  00000000  00000000  00010bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180df  00000000  00000000  00010c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000643  00000000  00000000  00028cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000879e7  00000000  00000000  0002933a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b0d21  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000e8  00000000  00000000  000b0d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080003f8 	.word	0x080003f8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080003f8 	.word	0x080003f8

080001e8 <Timer1_init>:

/*
 * Initialize Timer 1
 * */
void Timer1_init()
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	uint32_t F_timer, prescaler;

	// F_timer = f_PCLK / (PSC + 1)
	F_timer = 1 / T_timer;
 80001ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001f2:	607b      	str	r3, [r7, #4]
	prescaler = f_PCLK / F_timer - 1;
 80001f4:	4b14      	ldr	r3, [pc, #80]	; (8000248 <Timer1_init+0x60>)
 80001f6:	461a      	mov	r2, r3
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80001fe:	3b01      	subs	r3, #1
 8000200:	603b      	str	r3, [r7, #0]

	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; 		// TIM1 clock enable
 8000202:	4b12      	ldr	r3, [pc, #72]	; (800024c <Timer1_init+0x64>)
 8000204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000206:	4a11      	ldr	r2, [pc, #68]	; (800024c <Timer1_init+0x64>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6453      	str	r3, [r2, #68]	; 0x44

	TIM1->PSC |= prescaler;
 800020e:	4b10      	ldr	r3, [pc, #64]	; (8000250 <Timer1_init+0x68>)
 8000210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000212:	490f      	ldr	r1, [pc, #60]	; (8000250 <Timer1_init+0x68>)
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	4313      	orrs	r3, r2
 8000218:	628b      	str	r3, [r1, #40]	; 0x28

	TIM1->ARR = AutoReload;
 800021a:	4b0d      	ldr	r3, [pc, #52]	; (8000250 <Timer1_init+0x68>)
 800021c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000220:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM1->CR1 |= TIM_CR1_CEN;					// Counter enable
 8000222:	4b0b      	ldr	r3, [pc, #44]	; (8000250 <Timer1_init+0x68>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a0a      	ldr	r2, [pc, #40]	; (8000250 <Timer1_init+0x68>)
 8000228:	f043 0301 	orr.w	r3, r3, #1
 800022c:	6013      	str	r3, [r2, #0]
	TIM1->CR1 &= ~(TIM_CR1_DIR);				// Counter used as up counter
 800022e:	4b08      	ldr	r3, [pc, #32]	; (8000250 <Timer1_init+0x68>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a07      	ldr	r2, [pc, #28]	; (8000250 <Timer1_init+0x68>)
 8000234:	f023 0310 	bic.w	r3, r3, #16
 8000238:	6013      	str	r3, [r2, #0]
}
 800023a:	bf00      	nop
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	00f42400 	.word	0x00f42400
 800024c:	40023800 	.word	0x40023800
 8000250:	40010000 	.word	0x40010000

08000254 <Timer1_delay_ms>:

/*
 * delay by ms
 * */
void Timer1_delay_ms(int ms)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	TIM1->CNT = 0;
 800025c:	4b07      	ldr	r3, [pc, #28]	; (800027c <Timer1_delay_ms+0x28>)
 800025e:	2200      	movs	r2, #0
 8000260:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM1->CNT < ms);
 8000262:	bf00      	nop
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <Timer1_delay_ms+0x28>)
 8000266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	429a      	cmp	r2, r3
 800026c:	d3fa      	bcc.n	8000264 <Timer1_delay_ms+0x10>
}
 800026e:	bf00      	nop
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr
 800027c:	40010000 	.word	0x40010000

08000280 <SystemClock_config>:

/*
 * Initialize system clock
 * */
void SystemClock_config()
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSION;				// enable HSI
 8000284:	4b15      	ldr	r3, [pc, #84]	; (80002dc <SystemClock_config+0x5c>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a14      	ldr	r2, [pc, #80]	; (80002dc <SystemClock_config+0x5c>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSIRDY));		// see that HSI is ready or not
 8000290:	bf00      	nop
 8000292:	4b12      	ldr	r3, [pc, #72]	; (80002dc <SystemClock_config+0x5c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f003 0302 	and.w	r3, r3, #2
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0f9      	beq.n	8000292 <SystemClock_config+0x12>

	// Power regulator
	PWR->CR |= PWR_CR_VOS;
 800029e:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <SystemClock_config+0x60>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a0f      	ldr	r2, [pc, #60]	; (80002e0 <SystemClock_config+0x60>)
 80002a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002a8:	6013      	str	r3, [r2, #0]

	// Flash latency setup
	FLASH->ACR |= FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_5WS;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <SystemClock_config+0x64>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a0d      	ldr	r2, [pc, #52]	; (80002e4 <SystemClock_config+0x64>)
 80002b0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80002b4:	f043 0305 	orr.w	r3, r3, #5
 80002b8:	6013      	str	r3, [r2, #0]

	// HSI oscillator used as system clock
	RCC->CFGR |= RCC_CFGR_SW_HSI;
 80002ba:	4b08      	ldr	r3, [pc, #32]	; (80002dc <SystemClock_config+0x5c>)
 80002bc:	4a07      	ldr	r2, [pc, #28]	; (80002dc <SystemClock_config+0x5c>)
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);
 80002c2:	bf00      	nop
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <SystemClock_config+0x5c>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	f003 030c 	and.w	r3, r3, #12
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d1f9      	bne.n	80002c4 <SystemClock_config+0x44>
}
 80002d0:	bf00      	nop
 80002d2:	bf00      	nop
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	40023800 	.word	0x40023800
 80002e0:	40007000 	.word	0x40007000
 80002e4:	40023c00 	.word	0x40023c00

080002e8 <main>:



/* MAIN */
int main()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	SystemClock_config();
 80002ec:	f7ff ffc8 	bl	8000280 <SystemClock_config>
	GPIO_init();
 80002f0:	f000 f81c 	bl	800032c <GPIO_init>
	Timer1_init();
 80002f4:	f7ff ff78 	bl	80001e8 <Timer1_init>

	while(1)
	{
		toggle_led;
 80002f8:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <main+0x40>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000300:	2b00      	cmp	r3, #0
 8000302:	d106      	bne.n	8000312 <main+0x2a>
 8000304:	4b08      	ldr	r3, [pc, #32]	; (8000328 <main+0x40>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a07      	ldr	r2, [pc, #28]	; (8000328 <main+0x40>)
 800030a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800030e:	6153      	str	r3, [r2, #20]
 8000310:	e005      	b.n	800031e <main+0x36>
 8000312:	4b05      	ldr	r3, [pc, #20]	; (8000328 <main+0x40>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	4a04      	ldr	r2, [pc, #16]	; (8000328 <main+0x40>)
 8000318:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800031c:	6153      	str	r3, [r2, #20]
		Timer1_delay_ms(500);
 800031e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000322:	f7ff ff97 	bl	8000254 <Timer1_delay_ms>
		toggle_led;
 8000326:	e7e7      	b.n	80002f8 <main+0x10>
 8000328:	40020c00 	.word	0x40020c00

0800032c <GPIO_init>:



/* APIs */
void GPIO_init(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;	// IO port D clock enable
 8000330:	4b08      	ldr	r3, [pc, #32]	; (8000354 <GPIO_init+0x28>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4a07      	ldr	r2, [pc, #28]	; (8000354 <GPIO_init+0x28>)
 8000336:	f043 0308 	orr.w	r3, r3, #8
 800033a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER |= GPIO_MODER_MODER13_0;	// General purpose output mode
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <GPIO_init+0x2c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a05      	ldr	r2, [pc, #20]	; (8000358 <GPIO_init+0x2c>)
 8000342:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000346:	6013      	str	r3, [r2, #0]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40023800 	.word	0x40023800
 8000358:	40020c00 	.word	0x40020c00

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000360:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000364:	480c      	ldr	r0, [pc, #48]	; (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000366:	490d      	ldr	r1, [pc, #52]	; (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <LoopForever+0xe>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800037c:	4c0a      	ldr	r4, [pc, #40]	; (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038a:	f000 f811 	bl	80003b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ffab 	bl	80002e8 <main>

08000392 <LoopForever>:

LoopForever:
  b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a0:	08000418 	.word	0x08000418
  ldr r2, =_sbss
 80003a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a8:	2000001c 	.word	0x2000001c

080003ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC_IRQHandler>
	...

080003b0 <__libc_init_array>:
 80003b0:	b570      	push	{r4, r5, r6, lr}
 80003b2:	4d0d      	ldr	r5, [pc, #52]	; (80003e8 <__libc_init_array+0x38>)
 80003b4:	4c0d      	ldr	r4, [pc, #52]	; (80003ec <__libc_init_array+0x3c>)
 80003b6:	1b64      	subs	r4, r4, r5
 80003b8:	10a4      	asrs	r4, r4, #2
 80003ba:	2600      	movs	r6, #0
 80003bc:	42a6      	cmp	r6, r4
 80003be:	d109      	bne.n	80003d4 <__libc_init_array+0x24>
 80003c0:	4d0b      	ldr	r5, [pc, #44]	; (80003f0 <__libc_init_array+0x40>)
 80003c2:	4c0c      	ldr	r4, [pc, #48]	; (80003f4 <__libc_init_array+0x44>)
 80003c4:	f000 f818 	bl	80003f8 <_init>
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	10a4      	asrs	r4, r4, #2
 80003cc:	2600      	movs	r6, #0
 80003ce:	42a6      	cmp	r6, r4
 80003d0:	d105      	bne.n	80003de <__libc_init_array+0x2e>
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d8:	4798      	blx	r3
 80003da:	3601      	adds	r6, #1
 80003dc:	e7ee      	b.n	80003bc <__libc_init_array+0xc>
 80003de:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e2:	4798      	blx	r3
 80003e4:	3601      	adds	r6, #1
 80003e6:	e7f2      	b.n	80003ce <__libc_init_array+0x1e>
 80003e8:	08000410 	.word	0x08000410
 80003ec:	08000410 	.word	0x08000410
 80003f0:	08000410 	.word	0x08000410
 80003f4:	08000414 	.word	0x08000414

080003f8 <_init>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr

08000404 <_fini>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr
