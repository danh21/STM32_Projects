
GPIO_Reg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000380  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000528  08000528  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000528  08000528  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000528  08000528  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000528  08000528  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000528  08000528  00010528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800052c  0800052c  0001052c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000530  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000dcc  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004ab  00000000  00000000  00020e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d8  00000000  00000000  000212b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000090  00000000  00000000  00021388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000183c3  00000000  00000000  00021418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015b6  00000000  00000000  000397db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087ae7  00000000  00000000  0003ad91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000c2878  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001c4  00000000  00000000  000c28c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000510 	.word	0x08000510

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	08000510 	.word	0x08000510

080001e8 <Btn_init>:
#include "Button.h"


// APIs
void Btn_init(GPIO_TypeDef* pPort)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	if (pPort == GPIOA)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	4a1d      	ldr	r2, [pc, #116]	; (8000268 <Btn_init+0x80>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d106      	bne.n	8000206 <Btn_init+0x1e>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;	// IO port A clock enable
 80001f8:	4b1c      	ldr	r3, [pc, #112]	; (800026c <Btn_init+0x84>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001fc:	4a1b      	ldr	r2, [pc, #108]	; (800026c <Btn_init+0x84>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;	// IO port C clock enable
	else if (pPort == GPIOD)
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;	// IO port D clock enable
	else if (pPort == GPIOE)
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;	// IO port E clock enable
}
 8000204:	e02a      	b.n	800025c <Btn_init+0x74>
	else if (pPort == GPIOB)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4a19      	ldr	r2, [pc, #100]	; (8000270 <Btn_init+0x88>)
 800020a:	4293      	cmp	r3, r2
 800020c:	d106      	bne.n	800021c <Btn_init+0x34>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;	// IO port B clock enable
 800020e:	4b17      	ldr	r3, [pc, #92]	; (800026c <Btn_init+0x84>)
 8000210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000212:	4a16      	ldr	r2, [pc, #88]	; (800026c <Btn_init+0x84>)
 8000214:	f043 0302 	orr.w	r3, r3, #2
 8000218:	6313      	str	r3, [r2, #48]	; 0x30
}
 800021a:	e01f      	b.n	800025c <Btn_init+0x74>
	else if (pPort == GPIOC)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4a15      	ldr	r2, [pc, #84]	; (8000274 <Btn_init+0x8c>)
 8000220:	4293      	cmp	r3, r2
 8000222:	d106      	bne.n	8000232 <Btn_init+0x4a>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;	// IO port C clock enable
 8000224:	4b11      	ldr	r3, [pc, #68]	; (800026c <Btn_init+0x84>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000228:	4a10      	ldr	r2, [pc, #64]	; (800026c <Btn_init+0x84>)
 800022a:	f043 0304 	orr.w	r3, r3, #4
 800022e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000230:	e014      	b.n	800025c <Btn_init+0x74>
	else if (pPort == GPIOD)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4a10      	ldr	r2, [pc, #64]	; (8000278 <Btn_init+0x90>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d106      	bne.n	8000248 <Btn_init+0x60>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;	// IO port D clock enable
 800023a:	4b0c      	ldr	r3, [pc, #48]	; (800026c <Btn_init+0x84>)
 800023c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023e:	4a0b      	ldr	r2, [pc, #44]	; (800026c <Btn_init+0x84>)
 8000240:	f043 0308 	orr.w	r3, r3, #8
 8000244:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000246:	e009      	b.n	800025c <Btn_init+0x74>
	else if (pPort == GPIOE)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a0c      	ldr	r2, [pc, #48]	; (800027c <Btn_init+0x94>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d105      	bne.n	800025c <Btn_init+0x74>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;	// IO port E clock enable
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <Btn_init+0x84>)
 8000252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <Btn_init+0x84>)
 8000256:	f043 0310 	orr.w	r3, r3, #16
 800025a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000266:	4770      	bx	lr
 8000268:	40020000 	.word	0x40020000
 800026c:	40023800 	.word	0x40023800
 8000270:	40020400 	.word	0x40020400
 8000274:	40020800 	.word	0x40020800
 8000278:	40020c00 	.word	0x40020c00
 800027c:	40021000 	.word	0x40021000

08000280 <btn_isPressed>:


_Bool btn_isPressed (GPIO_TypeDef* pPort, uint8_t pin, GPIO_pull pull)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	70fb      	strb	r3, [r7, #3]
 800028c:	4613      	mov	r3, r2
 800028e:	70bb      	strb	r3, [r7, #2]
	if (pull == pull_down)
 8000290:	78bb      	ldrb	r3, [r7, #2]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d10c      	bne.n	80002b0 <btn_isPressed+0x30>
		return ((pPort->IDR & (1<<pin)) == 1);
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	691b      	ldr	r3, [r3, #16]
 800029a:	78fa      	ldrb	r2, [r7, #3]
 800029c:	2101      	movs	r1, #1
 800029e:	fa01 f202 	lsl.w	r2, r1, r2
 80002a2:	4013      	ands	r3, r2
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	bf0c      	ite	eq
 80002a8:	2301      	moveq	r3, #1
 80002aa:	2300      	movne	r3, #0
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	e00b      	b.n	80002c8 <btn_isPressed+0x48>
	else
		return ((pPort->IDR & (1<<pin)) == 0);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	691b      	ldr	r3, [r3, #16]
 80002b4:	78fa      	ldrb	r2, [r7, #3]
 80002b6:	2101      	movs	r1, #1
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	4013      	ands	r3, r2
 80002be:	2b00      	cmp	r3, #0
 80002c0:	bf0c      	ite	eq
 80002c2:	2301      	moveq	r3, #1
 80002c4:	2300      	movne	r3, #0
 80002c6:	b2db      	uxtb	r3, r3
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr

080002d4 <waitUntil_btn_isReleased>:


void waitUntil_btn_isReleased(GPIO_TypeDef* pPort, uint8_t pin, GPIO_pull pull)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	460b      	mov	r3, r1
 80002de:	70fb      	strb	r3, [r7, #3]
 80002e0:	4613      	mov	r3, r2
 80002e2:	70bb      	strb	r3, [r7, #2]
	while (btn_isPressed (pPort, pin, pull));
 80002e4:	bf00      	nop
 80002e6:	78ba      	ldrb	r2, [r7, #2]
 80002e8:	78fb      	ldrb	r3, [r7, #3]
 80002ea:	4619      	mov	r1, r3
 80002ec:	6878      	ldr	r0, [r7, #4]
 80002ee:	f7ff ffc7 	bl	8000280 <btn_isPressed>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d1f6      	bne.n	80002e6 <waitUntil_btn_isReleased+0x12>
}
 80002f8:	bf00      	nop
 80002fa:	bf00      	nop
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <LED_init>:
#include "Led.h"


// APIs
void LED_init(user_led LD)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;	// IO port D clock enable
 800030e:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <LED_init+0x7c>)
 8000310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000312:	4a1b      	ldr	r2, [pc, #108]	; (8000380 <LED_init+0x7c>)
 8000314:	f043 0308 	orr.w	r3, r3, #8
 8000318:	6313      	str	r3, [r2, #48]	; 0x30

	// set general purpose output mode
	switch (LD)
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	3b0c      	subs	r3, #12
 800031e:	2b03      	cmp	r3, #3
 8000320:	d826      	bhi.n	8000370 <LED_init+0x6c>
 8000322:	a201      	add	r2, pc, #4	; (adr r2, 8000328 <LED_init+0x24>)
 8000324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000328:	08000347 	.word	0x08000347
 800032c:	08000339 	.word	0x08000339
 8000330:	08000355 	.word	0x08000355
 8000334:	08000363 	.word	0x08000363
	{
		case LD3:
			GPIOD->MODER |= GPIO_MODER_MODER13_0;
 8000338:	4b12      	ldr	r3, [pc, #72]	; (8000384 <LED_init+0x80>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a11      	ldr	r2, [pc, #68]	; (8000384 <LED_init+0x80>)
 800033e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000342:	6013      	str	r3, [r2, #0]
	 		break;
 8000344:	e015      	b.n	8000372 <LED_init+0x6e>
		case LD4:
			GPIOD->MODER |= GPIO_MODER_MODER12_0;
 8000346:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <LED_init+0x80>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a0e      	ldr	r2, [pc, #56]	; (8000384 <LED_init+0x80>)
 800034c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000350:	6013      	str	r3, [r2, #0]
			break;
 8000352:	e00e      	b.n	8000372 <LED_init+0x6e>
		case LD5:
			GPIOD->MODER |= GPIO_MODER_MODER14_0;
 8000354:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <LED_init+0x80>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a0a      	ldr	r2, [pc, #40]	; (8000384 <LED_init+0x80>)
 800035a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800035e:	6013      	str	r3, [r2, #0]
			break;
 8000360:	e007      	b.n	8000372 <LED_init+0x6e>
		case LD6:
			GPIOD->MODER |= GPIO_MODER_MODER15_0;
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <LED_init+0x80>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a07      	ldr	r2, [pc, #28]	; (8000384 <LED_init+0x80>)
 8000368:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800036c:	6013      	str	r3, [r2, #0]
			break;
 800036e:	e000      	b.n	8000372 <LED_init+0x6e>
		default:
			break;
 8000370:	bf00      	nop
	}
}
 8000372:	bf00      	nop
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40023800 	.word	0x40023800
 8000384:	40020c00 	.word	0x40020c00

08000388 <SystemClock_config>:
const uint8_t APBPrescTable[8]  = {0, 0, 0, 0, 1, 2, 3, 4};


// APIs
void SystemClock_config(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSION;				// enable HSI
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <SystemClock_config+0x5c>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a14      	ldr	r2, [pc, #80]	; (80003e4 <SystemClock_config+0x5c>)
 8000392:	f043 0301 	orr.w	r3, r3, #1
 8000396:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSIRDY));		// see that HSI is ready or not
 8000398:	bf00      	nop
 800039a:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <SystemClock_config+0x5c>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f003 0302 	and.w	r3, r3, #2
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0f9      	beq.n	800039a <SystemClock_config+0x12>

	// Power regulator
	PWR->CR |= PWR_CR_VOS;
 80003a6:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <SystemClock_config+0x60>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a0f      	ldr	r2, [pc, #60]	; (80003e8 <SystemClock_config+0x60>)
 80003ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003b0:	6013      	str	r3, [r2, #0]

	// Flash latency setup
	FLASH->ACR |= FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_5WS;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <SystemClock_config+0x64>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a0d      	ldr	r2, [pc, #52]	; (80003ec <SystemClock_config+0x64>)
 80003b8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80003bc:	f043 0305 	orr.w	r3, r3, #5
 80003c0:	6013      	str	r3, [r2, #0]

	// HSI oscillator used as system clock
	RCC->CFGR |= RCC_CFGR_SW_HSI;
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <SystemClock_config+0x5c>)
 80003c4:	4a07      	ldr	r2, [pc, #28]	; (80003e4 <SystemClock_config+0x5c>)
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);
 80003ca:	bf00      	nop
 80003cc:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <SystemClock_config+0x5c>)
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	f003 030c 	and.w	r3, r3, #12
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d1f9      	bne.n	80003cc <SystemClock_config+0x44>
}
 80003d8:	bf00      	nop
 80003da:	bf00      	nop
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	40023800 	.word	0x40023800
 80003e8:	40007000 	.word	0x40007000
 80003ec:	40023c00 	.word	0x40023c00

080003f0 <main>:



/* MAIN */
int main()
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	SystemClock_config();
 80003f4:	f7ff ffc8 	bl	8000388 <SystemClock_config>
	LED_init(led);
 80003f8:	4b1b      	ldr	r3, [pc, #108]	; (8000468 <main+0x78>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff ff81 	bl	8000304 <LED_init>
	Btn_init(port_btn);
 8000402:	481a      	ldr	r0, [pc, #104]	; (800046c <main+0x7c>)
 8000404:	f7ff fef0 	bl	80001e8 <Btn_init>

	while(1)
	{
		if (btn_isPressed(port_btn, pin_bn, pull_btn))
 8000408:	2201      	movs	r2, #1
 800040a:	2100      	movs	r1, #0
 800040c:	4817      	ldr	r0, [pc, #92]	; (800046c <main+0x7c>)
 800040e:	f7ff ff37 	bl	8000280 <btn_isPressed>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0f7      	beq.n	8000408 <main+0x18>
		{
			waitUntil_btn_isReleased(port_btn, pin_bn, pull_btn);
 8000418:	2201      	movs	r2, #1
 800041a:	2100      	movs	r1, #0
 800041c:	4813      	ldr	r0, [pc, #76]	; (800046c <main+0x7c>)
 800041e:	f7ff ff59 	bl	80002d4 <waitUntil_btn_isReleased>
			toggle_led(led);
 8000422:	4b13      	ldr	r3, [pc, #76]	; (8000470 <main+0x80>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	4a10      	ldr	r2, [pc, #64]	; (8000468 <main+0x78>)
 8000428:	7812      	ldrb	r2, [r2, #0]
 800042a:	4611      	mov	r1, r2
 800042c:	2201      	movs	r2, #1
 800042e:	408a      	lsls	r2, r1
 8000430:	4013      	ands	r3, r2
 8000432:	2b00      	cmp	r3, #0
 8000434:	d10b      	bne.n	800044e <main+0x5e>
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <main+0x80>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	4a0b      	ldr	r2, [pc, #44]	; (8000468 <main+0x78>)
 800043c:	7812      	ldrb	r2, [r2, #0]
 800043e:	4611      	mov	r1, r2
 8000440:	2201      	movs	r2, #1
 8000442:	408a      	lsls	r2, r1
 8000444:	4611      	mov	r1, r2
 8000446:	4a0a      	ldr	r2, [pc, #40]	; (8000470 <main+0x80>)
 8000448:	430b      	orrs	r3, r1
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	e7dc      	b.n	8000408 <main+0x18>
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <main+0x80>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a05      	ldr	r2, [pc, #20]	; (8000468 <main+0x78>)
 8000454:	7812      	ldrb	r2, [r2, #0]
 8000456:	3210      	adds	r2, #16
 8000458:	2101      	movs	r1, #1
 800045a:	fa01 f202 	lsl.w	r2, r1, r2
 800045e:	4611      	mov	r1, r2
 8000460:	4a03      	ldr	r2, [pc, #12]	; (8000470 <main+0x80>)
 8000462:	430b      	orrs	r3, r1
 8000464:	6193      	str	r3, [r2, #24]
		if (btn_isPressed(port_btn, pin_bn, pull_btn))
 8000466:	e7cf      	b.n	8000408 <main+0x18>
 8000468:	20000000 	.word	0x20000000
 800046c:	40020000 	.word	0x40020000
 8000470:	40020c00 	.word	0x40020c00

08000474 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000474:	480d      	ldr	r0, [pc, #52]	; (80004ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000476:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000478:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800047c:	480c      	ldr	r0, [pc, #48]	; (80004b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800047e:	490d      	ldr	r1, [pc, #52]	; (80004b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000480:	4a0d      	ldr	r2, [pc, #52]	; (80004b8 <LoopForever+0xe>)
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000484:	e002      	b.n	800048c <LoopCopyDataInit>

08000486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800048a:	3304      	adds	r3, #4

0800048c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800048c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800048e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000490:	d3f9      	bcc.n	8000486 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000492:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000494:	4c0a      	ldr	r4, [pc, #40]	; (80004c0 <LoopForever+0x16>)
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000498:	e001      	b.n	800049e <LoopFillZerobss>

0800049a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800049a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800049c:	3204      	adds	r2, #4

0800049e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800049e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a0:	d3fb      	bcc.n	800049a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004a2:	f000 f811 	bl	80004c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004a6:	f7ff ffa3 	bl	80003f0 <main>

080004aa <LoopForever>:

LoopForever:
  b LoopForever
 80004aa:	e7fe      	b.n	80004aa <LoopForever>
  ldr   r0, =_estack
 80004ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004b8:	08000530 	.word	0x08000530
  ldr r2, =_sbss
 80004bc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004c0:	20000020 	.word	0x20000020

080004c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c4:	e7fe      	b.n	80004c4 <ADC_IRQHandler>
	...

080004c8 <__libc_init_array>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	4d0d      	ldr	r5, [pc, #52]	; (8000500 <__libc_init_array+0x38>)
 80004cc:	4c0d      	ldr	r4, [pc, #52]	; (8000504 <__libc_init_array+0x3c>)
 80004ce:	1b64      	subs	r4, r4, r5
 80004d0:	10a4      	asrs	r4, r4, #2
 80004d2:	2600      	movs	r6, #0
 80004d4:	42a6      	cmp	r6, r4
 80004d6:	d109      	bne.n	80004ec <__libc_init_array+0x24>
 80004d8:	4d0b      	ldr	r5, [pc, #44]	; (8000508 <__libc_init_array+0x40>)
 80004da:	4c0c      	ldr	r4, [pc, #48]	; (800050c <__libc_init_array+0x44>)
 80004dc:	f000 f818 	bl	8000510 <_init>
 80004e0:	1b64      	subs	r4, r4, r5
 80004e2:	10a4      	asrs	r4, r4, #2
 80004e4:	2600      	movs	r6, #0
 80004e6:	42a6      	cmp	r6, r4
 80004e8:	d105      	bne.n	80004f6 <__libc_init_array+0x2e>
 80004ea:	bd70      	pop	{r4, r5, r6, pc}
 80004ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f0:	4798      	blx	r3
 80004f2:	3601      	adds	r6, #1
 80004f4:	e7ee      	b.n	80004d4 <__libc_init_array+0xc>
 80004f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004fa:	4798      	blx	r3
 80004fc:	3601      	adds	r6, #1
 80004fe:	e7f2      	b.n	80004e6 <__libc_init_array+0x1e>
 8000500:	08000528 	.word	0x08000528
 8000504:	08000528 	.word	0x08000528
 8000508:	08000528 	.word	0x08000528
 800050c:	0800052c 	.word	0x0800052c

08000510 <_init>:
 8000510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000512:	bf00      	nop
 8000514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000516:	bc08      	pop	{r3}
 8000518:	469e      	mov	lr, r3
 800051a:	4770      	bx	lr

0800051c <_fini>:
 800051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051e:	bf00      	nop
 8000520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000522:	bc08      	pop	{r3}
 8000524:	469e      	mov	lr, r3
 8000526:	4770      	bx	lr
