
Freq_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800237c  0800237c  0000337c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002428  08002428  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002428  08002428  00003428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002430  08002430  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002430  08002430  00003430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002434  08002434  00003434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002438  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004068  2**0
                  CONTENTS
 10 .bss          00000170  20000068  20000068  00004068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d8  200001d8  00004068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003861  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000fc1  00000000  00000000  000078f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000488  00000000  00000000  000088c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000033c  00000000  00000000  00008d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000207e0  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005abb  00000000  00000000  00029864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1a9c  00000000  00000000  0002f31f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f0dbb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000017f4  00000000  00000000  000f0e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  000f25f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002364 	.word	0x08002364

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08002364 	.word	0x08002364

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000568:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800056c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	2b00      	cmp	r3, #0
 8000576:	d013      	beq.n	80005a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000578:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800057c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000580:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00b      	beq.n	80005a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000588:	e000      	b.n	800058c <ITM_SendChar+0x2c>
    {
      __NOP();
 800058a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800058c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f9      	beq.n	800058a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000596:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005a0:	687b      	ldr	r3, [r7, #4]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b086      	sub	sp, #24
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	60f8      	str	r0, [r7, #12]
 80005b6:	60b9      	str	r1, [r7, #8]
 80005b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	e009      	b.n	80005d4 <_write+0x26>
	  ITM_SendChar(*ptr++);
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	1c5a      	adds	r2, r3, #1
 80005c4:	60ba      	str	r2, [r7, #8]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ffc9 	bl	8000560 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	3301      	adds	r3, #1
 80005d2:	617b      	str	r3, [r7, #20]
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	429a      	cmp	r2, r3
 80005da:	dbf1      	blt.n	80005c0 <_write+0x12>

  return len;
 80005dc:	687b      	ldr	r3, [r7, #4]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 f9da 	bl	80009a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f828 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 f88e 	bl	8000714 <MX_GPIO_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // HCLK frequency
  printf("HCLK Frequency: %ld\n", HAL_RCC_GetHCLKFreq());
 80005f8:	f000 ff50 	bl	800149c <HAL_RCC_GetHCLKFreq>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4619      	mov	r1, r3
 8000600:	480c      	ldr	r0, [pc, #48]	@ (8000634 <main+0x4c>)
 8000602:	f001 f841 	bl	8001688 <iprintf>

  // SYSCLK frequency
  printf("SYSCLK Frequency: %ld\n", HAL_RCC_GetSysClockFreq());
 8000606:	f000 fe83 	bl	8001310 <HAL_RCC_GetSysClockFreq>
 800060a:	4603      	mov	r3, r0
 800060c:	4619      	mov	r1, r3
 800060e:	480a      	ldr	r0, [pc, #40]	@ (8000638 <main+0x50>)
 8000610:	f001 f83a 	bl	8001688 <iprintf>

  // PCLK1 frequency
  printf("PCLK1 Frequency: %ld\n", HAL_RCC_GetPCLK1Freq());
 8000614:	f000 ff4e 	bl	80014b4 <HAL_RCC_GetPCLK1Freq>
 8000618:	4603      	mov	r3, r0
 800061a:	4619      	mov	r1, r3
 800061c:	4807      	ldr	r0, [pc, #28]	@ (800063c <main+0x54>)
 800061e:	f001 f833 	bl	8001688 <iprintf>

  // PCLK2 frequency
  printf("PCLK2 Frequency: %ld\n", HAL_RCC_GetPCLK2Freq());
 8000622:	f000 ff5b 	bl	80014dc <HAL_RCC_GetPCLK2Freq>
 8000626:	4603      	mov	r3, r0
 8000628:	4619      	mov	r1, r3
 800062a:	4805      	ldr	r0, [pc, #20]	@ (8000640 <main+0x58>)
 800062c:	f001 f82c 	bl	8001688 <iprintf>

  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <main+0x48>
 8000634:	0800237c 	.word	0x0800237c
 8000638:	08002394 	.word	0x08002394
 800063c:	080023ac 	.word	0x080023ac
 8000640:	080023c4 	.word	0x080023c4

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	@ 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f001 f86d 	bl	8001732 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b27      	ldr	r3, [pc, #156]	@ (800070c <SystemClock_Config+0xc8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a26      	ldr	r2, [pc, #152]	@ (800070c <SystemClock_Config+0xc8>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b24      	ldr	r3, [pc, #144]	@ (800070c <SystemClock_Config+0xc8>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b21      	ldr	r3, [pc, #132]	@ (8000710 <SystemClock_Config+0xcc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a20      	ldr	r2, [pc, #128]	@ (8000710 <SystemClock_Config+0xcc>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <SystemClock_Config+0xcc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006b4:	230c      	movs	r3, #12
 80006b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006b8:	2332      	movs	r3, #50	@ 0x32
 80006ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fac3 	bl	8000c54 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f846 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2101      	movs	r1, #1
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fd25 	bl	8001144 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000700:	f000 f830 	bl	8000764 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3750      	adds	r7, #80	@ 0x50
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <MX_GPIO_Init+0x4c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a0f      	ldr	r2, [pc, #60]	@ (8000760 <MX_GPIO_Init+0x4c>)
 8000724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <MX_GPIO_Init+0x4c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <MX_GPIO_Init+0x4c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a08      	ldr	r2, [pc, #32]	@ (8000760 <MX_GPIO_Init+0x4c>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <MX_GPIO_Init+0x4c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <Error_Handler+0x8>

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <HAL_MspInit+0x4c>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800077e:	4a0f      	ldr	r2, [pc, #60]	@ (80007bc <HAL_MspInit+0x4c>)
 8000780:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000784:	6453      	str	r3, [r2, #68]	@ 0x44
 8000786:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <HAL_MspInit+0x4c>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <HAL_MspInit+0x4c>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079a:	4a08      	ldr	r2, [pc, #32]	@ (80007bc <HAL_MspInit+0x4c>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <HAL_MspInit+0x4c>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <NMI_Handler+0x4>

080007c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <HardFault_Handler+0x4>

080007d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <MemManage_Handler+0x4>

080007d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <BusFault_Handler+0x4>

080007e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <UsageFault_Handler+0x4>

080007e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000816:	f000 f917 	bl	8000a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}

0800081e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b086      	sub	sp, #24
 8000822:	af00      	add	r7, sp, #0
 8000824:	60f8      	str	r0, [r7, #12]
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	e00a      	b.n	8000846 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000830:	f3af 8000 	nop.w
 8000834:	4601      	mov	r1, r0
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	60ba      	str	r2, [r7, #8]
 800083c:	b2ca      	uxtb	r2, r1
 800083e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	3301      	adds	r3, #1
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	697a      	ldr	r2, [r7, #20]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	429a      	cmp	r2, r3
 800084c:	dbf0      	blt.n	8000830 <_read+0x12>
  }

  return len;
 800084e:	687b      	ldr	r3, [r7, #4]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000864:	4618      	mov	r0, r3
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000880:	605a      	str	r2, [r3, #4]
  return 0;
 8000882:	2300      	movs	r3, #0
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <_isatty>:

int _isatty(int file)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000898:	2301      	movs	r3, #1
}
 800089a:	4618      	mov	r0, r3
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b085      	sub	sp, #20
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	60f8      	str	r0, [r7, #12]
 80008ae:	60b9      	str	r1, [r7, #8]
 80008b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c8:	4a14      	ldr	r2, [pc, #80]	@ (800091c <_sbrk+0x5c>)
 80008ca:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <_sbrk+0x60>)
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d4:	4b13      	ldr	r3, [pc, #76]	@ (8000924 <_sbrk+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d102      	bne.n	80008e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008dc:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <_sbrk+0x64>)
 80008de:	4a12      	ldr	r2, [pc, #72]	@ (8000928 <_sbrk+0x68>)
 80008e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e2:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d207      	bcs.n	8000900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f0:	f000 ff6e 	bl	80017d0 <__errno>
 80008f4:	4603      	mov	r3, r0
 80008f6:	220c      	movs	r2, #12
 80008f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
 80008fe:	e009      	b.n	8000914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000900:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <_sbrk+0x64>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000906:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <_sbrk+0x64>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	4a05      	ldr	r2, [pc, #20]	@ (8000924 <_sbrk+0x64>)
 8000910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000912:	68fb      	ldr	r3, [r7, #12]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20020000 	.word	0x20020000
 8000920:	00000400 	.word	0x00000400
 8000924:	20000084 	.word	0x20000084
 8000928:	200001d8 	.word	0x200001d8

0800092c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <SystemInit+0x20>)
 8000932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000936:	4a05      	ldr	r2, [pc, #20]	@ (800094c <SystemInit+0x20>)
 8000938:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800093c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000950:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000988 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000954:	480d      	ldr	r0, [pc, #52]	@ (800098c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000956:	490e      	ldr	r1, [pc, #56]	@ (8000990 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000958:	4a0e      	ldr	r2, [pc, #56]	@ (8000994 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0b      	ldr	r2, [pc, #44]	@ (8000998 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800096c:	4c0b      	ldr	r4, [pc, #44]	@ (800099c <LoopFillZerobss+0x26>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800097a:	f7ff ffd7 	bl	800092c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800097e:	f000 ff2d 	bl	80017dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000982:	f7ff fe31 	bl	80005e8 <main>
  bx  lr    
 8000986:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000988:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800098c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000990:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000994:	08002438 	.word	0x08002438
  ldr r2, =_sbss
 8000998:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800099c:	200001d8 	.word	0x200001d8

080009a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC_IRQHandler>
	...

080009a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009a8:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <HAL_Init+0x40>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0d      	ldr	r2, [pc, #52]	@ (80009e4 <HAL_Init+0x40>)
 80009ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009b4:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <HAL_Init+0x40>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0a      	ldr	r2, [pc, #40]	@ (80009e4 <HAL_Init+0x40>)
 80009ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c0:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <HAL_Init+0x40>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a07      	ldr	r2, [pc, #28]	@ (80009e4 <HAL_Init+0x40>)
 80009c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009cc:	2003      	movs	r0, #3
 80009ce:	f000 f90d 	bl	8000bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009d2:	200f      	movs	r0, #15
 80009d4:	f000 f808 	bl	80009e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d8:	f7ff feca 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023c00 	.word	0x40023c00

080009e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <HAL_InitTick+0x54>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <HAL_InitTick+0x58>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4619      	mov	r1, r3
 80009fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f917 	bl	8000c3a <HAL_SYSTICK_Config>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e00e      	b.n	8000a34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b0f      	cmp	r3, #15
 8000a1a:	d80a      	bhi.n	8000a32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295
 8000a24:	f000 f8ed 	bl	8000c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a28:	4a06      	ldr	r2, [pc, #24]	@ (8000a44 <HAL_InitTick+0x5c>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e000      	b.n	8000a34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000004 	.word	0x20000004

08000a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <HAL_IncTick+0x20>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <HAL_IncTick+0x24>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	4a04      	ldr	r2, [pc, #16]	@ (8000a6c <HAL_IncTick+0x24>)
 8000a5a:	6013      	str	r3, [r2, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	20000088 	.word	0x20000088

08000a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return uwTick;
 8000a74:	4b03      	ldr	r3, [pc, #12]	@ (8000a84 <HAL_GetTick+0x14>)
 8000a76:	681b      	ldr	r3, [r3, #0]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	20000088 	.word	0x20000088

08000a88 <__NVIC_SetPriorityGrouping>:
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	@ (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_GetPriorityGrouping>:
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad4:	4b04      	ldr	r3, [pc, #16]	@ (8000ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	f003 0307 	and.w	r3, r3, #7
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_SetPriority>:
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	db0a      	blt.n	8000b16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	490c      	ldr	r1, [pc, #48]	@ (8000b38 <__NVIC_SetPriority+0x4c>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	0112      	lsls	r2, r2, #4
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	440b      	add	r3, r1
 8000b10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000b14:	e00a      	b.n	8000b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4908      	ldr	r1, [pc, #32]	@ (8000b3c <__NVIC_SetPriority+0x50>)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	3b04      	subs	r3, #4
 8000b24:	0112      	lsls	r2, r2, #4
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	440b      	add	r3, r1
 8000b2a:	761a      	strb	r2, [r3, #24]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000e100 	.word	0xe000e100
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <NVIC_EncodePriority>:
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	@ 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	f1c3 0307 	rsb	r3, r3, #7
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	bf28      	it	cs
 8000b5e:	2304      	movcs	r3, #4
 8000b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3304      	adds	r3, #4
 8000b66:	2b06      	cmp	r3, #6
 8000b68:	d902      	bls.n	8000b70 <NVIC_EncodePriority+0x30>
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	e000      	b.n	8000b72 <NVIC_EncodePriority+0x32>
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	401a      	ands	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b88:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b92:	43d9      	mvns	r1, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	4313      	orrs	r3, r2
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3724      	adds	r7, #36	@ 0x24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <SysTick_Config>:
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bb8:	d301      	bcc.n	8000bbe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00f      	b.n	8000bde <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000be8 <SysTick_Config+0x40>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f7ff ff8e 	bl	8000aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd0:	4b05      	ldr	r3, [pc, #20]	@ (8000be8 <SysTick_Config+0x40>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd6:	4b04      	ldr	r3, [pc, #16]	@ (8000be8 <SysTick_Config+0x40>)
 8000bd8:	2207      	movs	r2, #7
 8000bda:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	e000e010 	.word	0xe000e010

08000bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff ff47 	bl	8000a88 <__NVIC_SetPriorityGrouping>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c14:	f7ff ff5c 	bl	8000ad0 <__NVIC_GetPriorityGrouping>
 8000c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	68b9      	ldr	r1, [r7, #8]
 8000c1e:	6978      	ldr	r0, [r7, #20]
 8000c20:	f7ff ff8e 	bl	8000b40 <NVIC_EncodePriority>
 8000c24:	4602      	mov	r2, r0
 8000c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff5d 	bl	8000aec <__NVIC_SetPriority>
}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ffb0 	bl	8000ba8 <SysTick_Config>
 8000c48:	4603      	mov	r3, r0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d101      	bne.n	8000c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e267      	b.n	8001136 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d075      	beq.n	8000d5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000c72:	4b88      	ldr	r3, [pc, #544]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	f003 030c 	and.w	r3, r3, #12
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	d00c      	beq.n	8000c98 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c7e:	4b85      	ldr	r3, [pc, #532]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000c86:	2b08      	cmp	r3, #8
 8000c88:	d112      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c8a:	4b82      	ldr	r3, [pc, #520]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000c96:	d10b      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c98:	4b7e      	ldr	r3, [pc, #504]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d05b      	beq.n	8000d5c <HAL_RCC_OscConfig+0x108>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d157      	bne.n	8000d5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e242      	b.n	8001136 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cb8:	d106      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x74>
 8000cba:	4b76      	ldr	r3, [pc, #472]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a75      	ldr	r2, [pc, #468]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	e01d      	b.n	8000d04 <HAL_RCC_OscConfig+0xb0>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000cd0:	d10c      	bne.n	8000cec <HAL_RCC_OscConfig+0x98>
 8000cd2:	4b70      	ldr	r3, [pc, #448]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a6f      	ldr	r2, [pc, #444]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000cd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	4b6d      	ldr	r3, [pc, #436]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a6c      	ldr	r2, [pc, #432]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000ce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	e00b      	b.n	8000d04 <HAL_RCC_OscConfig+0xb0>
 8000cec:	4b69      	ldr	r3, [pc, #420]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a68      	ldr	r2, [pc, #416]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000cf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	4b66      	ldr	r3, [pc, #408]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a65      	ldr	r2, [pc, #404]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000cfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d013      	beq.n	8000d34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0c:	f7ff feb0 	bl	8000a70 <HAL_GetTick>
 8000d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d12:	e008      	b.n	8000d26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d14:	f7ff feac 	bl	8000a70 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b64      	cmp	r3, #100	@ 0x64
 8000d20:	d901      	bls.n	8000d26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e207      	b.n	8001136 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d26:	4b5b      	ldr	r3, [pc, #364]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0f0      	beq.n	8000d14 <HAL_RCC_OscConfig+0xc0>
 8000d32:	e014      	b.n	8000d5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d34:	f7ff fe9c 	bl	8000a70 <HAL_GetTick>
 8000d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d3a:	e008      	b.n	8000d4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d3c:	f7ff fe98 	bl	8000a70 <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b64      	cmp	r3, #100	@ 0x64
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e1f3      	b.n	8001136 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4e:	4b51      	ldr	r3, [pc, #324]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1f0      	bne.n	8000d3c <HAL_RCC_OscConfig+0xe8>
 8000d5a:	e000      	b.n	8000d5e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d063      	beq.n	8000e32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000d6a:	4b4a      	ldr	r3, [pc, #296]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	f003 030c 	and.w	r3, r3, #12
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d00b      	beq.n	8000d8e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d76:	4b47      	ldr	r3, [pc, #284]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000d7e:	2b08      	cmp	r3, #8
 8000d80:	d11c      	bne.n	8000dbc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d82:	4b44      	ldr	r3, [pc, #272]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d116      	bne.n	8000dbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d8e:	4b41      	ldr	r3, [pc, #260]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d005      	beq.n	8000da6 <HAL_RCC_OscConfig+0x152>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d001      	beq.n	8000da6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e1c7      	b.n	8001136 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da6:	4b3b      	ldr	r3, [pc, #236]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	691b      	ldr	r3, [r3, #16]
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	4937      	ldr	r1, [pc, #220]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000db6:	4313      	orrs	r3, r2
 8000db8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dba:	e03a      	b.n	8000e32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d020      	beq.n	8000e06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dc4:	4b34      	ldr	r3, [pc, #208]	@ (8000e98 <HAL_RCC_OscConfig+0x244>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dca:	f7ff fe51 	bl	8000a70 <HAL_GetTick>
 8000dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd0:	e008      	b.n	8000de4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dd2:	f7ff fe4d 	bl	8000a70 <HAL_GetTick>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d901      	bls.n	8000de4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000de0:	2303      	movs	r3, #3
 8000de2:	e1a8      	b.n	8001136 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d0f0      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df0:	4b28      	ldr	r3, [pc, #160]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	4925      	ldr	r1, [pc, #148]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000e00:	4313      	orrs	r3, r2
 8000e02:	600b      	str	r3, [r1, #0]
 8000e04:	e015      	b.n	8000e32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e06:	4b24      	ldr	r3, [pc, #144]	@ (8000e98 <HAL_RCC_OscConfig+0x244>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e0c:	f7ff fe30 	bl	8000a70 <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e14:	f7ff fe2c 	bl	8000a70 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e187      	b.n	8001136 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e26:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f0      	bne.n	8000e14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0308 	and.w	r3, r3, #8
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d036      	beq.n	8000eac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d016      	beq.n	8000e74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e46:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <HAL_RCC_OscConfig+0x248>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e4c:	f7ff fe10 	bl	8000a70 <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e54:	f7ff fe0c 	bl	8000a70 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e167      	b.n	8001136 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e66:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <HAL_RCC_OscConfig+0x240>)
 8000e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0f0      	beq.n	8000e54 <HAL_RCC_OscConfig+0x200>
 8000e72:	e01b      	b.n	8000eac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e74:	4b09      	ldr	r3, [pc, #36]	@ (8000e9c <HAL_RCC_OscConfig+0x248>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e7a:	f7ff fdf9 	bl	8000a70 <HAL_GetTick>
 8000e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e80:	e00e      	b.n	8000ea0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e82:	f7ff fdf5 	bl	8000a70 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d907      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e150      	b.n	8001136 <HAL_RCC_OscConfig+0x4e2>
 8000e94:	40023800 	.word	0x40023800
 8000e98:	42470000 	.word	0x42470000
 8000e9c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ea0:	4b88      	ldr	r3, [pc, #544]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 8000ea2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1ea      	bne.n	8000e82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f000 8097 	beq.w	8000fe8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ebe:	4b81      	ldr	r3, [pc, #516]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d10f      	bne.n	8000eea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	4b7d      	ldr	r3, [pc, #500]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	4a7c      	ldr	r2, [pc, #496]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eda:	4b7a      	ldr	r3, [pc, #488]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eea:	4b77      	ldr	r3, [pc, #476]	@ (80010c8 <HAL_RCC_OscConfig+0x474>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d118      	bne.n	8000f28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ef6:	4b74      	ldr	r3, [pc, #464]	@ (80010c8 <HAL_RCC_OscConfig+0x474>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a73      	ldr	r2, [pc, #460]	@ (80010c8 <HAL_RCC_OscConfig+0x474>)
 8000efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f02:	f7ff fdb5 	bl	8000a70 <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f08:	e008      	b.n	8000f1c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f0a:	f7ff fdb1 	bl	8000a70 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e10c      	b.n	8001136 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1c:	4b6a      	ldr	r3, [pc, #424]	@ (80010c8 <HAL_RCC_OscConfig+0x474>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0f0      	beq.n	8000f0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d106      	bne.n	8000f3e <HAL_RCC_OscConfig+0x2ea>
 8000f30:	4b64      	ldr	r3, [pc, #400]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 8000f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f34:	4a63      	ldr	r2, [pc, #396]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f3c:	e01c      	b.n	8000f78 <HAL_RCC_OscConfig+0x324>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	2b05      	cmp	r3, #5
 8000f44:	d10c      	bne.n	8000f60 <HAL_RCC_OscConfig+0x30c>
 8000f46:	4b5f      	ldr	r3, [pc, #380]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 8000f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f4a:	4a5e      	ldr	r2, [pc, #376]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f52:	4b5c      	ldr	r3, [pc, #368]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 8000f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f56:	4a5b      	ldr	r2, [pc, #364]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f5e:	e00b      	b.n	8000f78 <HAL_RCC_OscConfig+0x324>
 8000f60:	4b58      	ldr	r3, [pc, #352]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 8000f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f64:	4a57      	ldr	r2, [pc, #348]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 8000f66:	f023 0301 	bic.w	r3, r3, #1
 8000f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f6c:	4b55      	ldr	r3, [pc, #340]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 8000f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f70:	4a54      	ldr	r2, [pc, #336]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 8000f72:	f023 0304 	bic.w	r3, r3, #4
 8000f76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d015      	beq.n	8000fac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f80:	f7ff fd76 	bl	8000a70 <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f86:	e00a      	b.n	8000f9e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f88:	f7ff fd72 	bl	8000a70 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e0cb      	b.n	8001136 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f9e:	4b49      	ldr	r3, [pc, #292]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 8000fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0ee      	beq.n	8000f88 <HAL_RCC_OscConfig+0x334>
 8000faa:	e014      	b.n	8000fd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fac:	f7ff fd60 	bl	8000a70 <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fb2:	e00a      	b.n	8000fca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fb4:	f7ff fd5c 	bl	8000a70 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d901      	bls.n	8000fca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e0b5      	b.n	8001136 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fca:	4b3e      	ldr	r3, [pc, #248]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 8000fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1ee      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000fd6:	7dfb      	ldrb	r3, [r7, #23]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d105      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fdc:	4b39      	ldr	r3, [pc, #228]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe0:	4a38      	ldr	r2, [pc, #224]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 8000fe2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000fe6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f000 80a1 	beq.w	8001134 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ff2:	4b34      	ldr	r3, [pc, #208]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 030c 	and.w	r3, r3, #12
 8000ffa:	2b08      	cmp	r3, #8
 8000ffc:	d05c      	beq.n	80010b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	2b02      	cmp	r3, #2
 8001004:	d141      	bne.n	800108a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001006:	4b31      	ldr	r3, [pc, #196]	@ (80010cc <HAL_RCC_OscConfig+0x478>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100c:	f7ff fd30 	bl	8000a70 <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001014:	f7ff fd2c 	bl	8000a70 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e087      	b.n	8001136 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001026:	4b27      	ldr	r3, [pc, #156]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f0      	bne.n	8001014 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69da      	ldr	r2, [r3, #28]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a1b      	ldr	r3, [r3, #32]
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001040:	019b      	lsls	r3, r3, #6
 8001042:	431a      	orrs	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001048:	085b      	lsrs	r3, r3, #1
 800104a:	3b01      	subs	r3, #1
 800104c:	041b      	lsls	r3, r3, #16
 800104e:	431a      	orrs	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001054:	061b      	lsls	r3, r3, #24
 8001056:	491b      	ldr	r1, [pc, #108]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 8001058:	4313      	orrs	r3, r2
 800105a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800105c:	4b1b      	ldr	r3, [pc, #108]	@ (80010cc <HAL_RCC_OscConfig+0x478>)
 800105e:	2201      	movs	r2, #1
 8001060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001062:	f7ff fd05 	bl	8000a70 <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800106a:	f7ff fd01 	bl	8000a70 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e05c      	b.n	8001136 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800107c:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0f0      	beq.n	800106a <HAL_RCC_OscConfig+0x416>
 8001088:	e054      	b.n	8001134 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800108a:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <HAL_RCC_OscConfig+0x478>)
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001090:	f7ff fcee 	bl	8000a70 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001098:	f7ff fcea 	bl	8000a70 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e045      	b.n	8001136 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_RCC_OscConfig+0x470>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f0      	bne.n	8001098 <HAL_RCC_OscConfig+0x444>
 80010b6:	e03d      	b.n	8001134 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d107      	bne.n	80010d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e038      	b.n	8001136 <HAL_RCC_OscConfig+0x4e2>
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40007000 	.word	0x40007000
 80010cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <HAL_RCC_OscConfig+0x4ec>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d028      	beq.n	8001130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d121      	bne.n	8001130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d11a      	bne.n	8001130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001100:	4013      	ands	r3, r2
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001106:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001108:	4293      	cmp	r3, r2
 800110a:	d111      	bne.n	8001130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001116:	085b      	lsrs	r3, r3, #1
 8001118:	3b01      	subs	r3, #1
 800111a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800111c:	429a      	cmp	r2, r3
 800111e:	d107      	bne.n	8001130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800112a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800112c:	429a      	cmp	r2, r3
 800112e:	d001      	beq.n	8001134 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800

08001144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e0cc      	b.n	80012f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001158:	4b68      	ldr	r3, [pc, #416]	@ (80012fc <HAL_RCC_ClockConfig+0x1b8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d90c      	bls.n	8001180 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001166:	4b65      	ldr	r3, [pc, #404]	@ (80012fc <HAL_RCC_ClockConfig+0x1b8>)
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800116e:	4b63      	ldr	r3, [pc, #396]	@ (80012fc <HAL_RCC_ClockConfig+0x1b8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	d001      	beq.n	8001180 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e0b8      	b.n	80012f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d020      	beq.n	80011ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b00      	cmp	r3, #0
 8001196:	d005      	beq.n	80011a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001198:	4b59      	ldr	r3, [pc, #356]	@ (8001300 <HAL_RCC_ClockConfig+0x1bc>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	4a58      	ldr	r2, [pc, #352]	@ (8001300 <HAL_RCC_ClockConfig+0x1bc>)
 800119e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80011a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0308 	and.w	r3, r3, #8
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d005      	beq.n	80011bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011b0:	4b53      	ldr	r3, [pc, #332]	@ (8001300 <HAL_RCC_ClockConfig+0x1bc>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	4a52      	ldr	r2, [pc, #328]	@ (8001300 <HAL_RCC_ClockConfig+0x1bc>)
 80011b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011bc:	4b50      	ldr	r3, [pc, #320]	@ (8001300 <HAL_RCC_ClockConfig+0x1bc>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	494d      	ldr	r1, [pc, #308]	@ (8001300 <HAL_RCC_ClockConfig+0x1bc>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d044      	beq.n	8001264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d107      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e2:	4b47      	ldr	r3, [pc, #284]	@ (8001300 <HAL_RCC_ClockConfig+0x1bc>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d119      	bne.n	8001222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e07f      	b.n	80012f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d003      	beq.n	8001202 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d107      	bne.n	8001212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001202:	4b3f      	ldr	r3, [pc, #252]	@ (8001300 <HAL_RCC_ClockConfig+0x1bc>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d109      	bne.n	8001222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e06f      	b.n	80012f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001212:	4b3b      	ldr	r3, [pc, #236]	@ (8001300 <HAL_RCC_ClockConfig+0x1bc>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e067      	b.n	80012f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001222:	4b37      	ldr	r3, [pc, #220]	@ (8001300 <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f023 0203 	bic.w	r2, r3, #3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4934      	ldr	r1, [pc, #208]	@ (8001300 <HAL_RCC_ClockConfig+0x1bc>)
 8001230:	4313      	orrs	r3, r2
 8001232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001234:	f7ff fc1c 	bl	8000a70 <HAL_GetTick>
 8001238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800123a:	e00a      	b.n	8001252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800123c:	f7ff fc18 	bl	8000a70 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800124a:	4293      	cmp	r3, r2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e04f      	b.n	80012f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001252:	4b2b      	ldr	r3, [pc, #172]	@ (8001300 <HAL_RCC_ClockConfig+0x1bc>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 020c 	and.w	r2, r3, #12
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	429a      	cmp	r2, r3
 8001262:	d1eb      	bne.n	800123c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001264:	4b25      	ldr	r3, [pc, #148]	@ (80012fc <HAL_RCC_ClockConfig+0x1b8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d20c      	bcs.n	800128c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001272:	4b22      	ldr	r3, [pc, #136]	@ (80012fc <HAL_RCC_ClockConfig+0x1b8>)
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800127a:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <HAL_RCC_ClockConfig+0x1b8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d001      	beq.n	800128c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e032      	b.n	80012f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	2b00      	cmp	r3, #0
 8001296:	d008      	beq.n	80012aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001298:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <HAL_RCC_ClockConfig+0x1bc>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	4916      	ldr	r1, [pc, #88]	@ (8001300 <HAL_RCC_ClockConfig+0x1bc>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d009      	beq.n	80012ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012b6:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <HAL_RCC_ClockConfig+0x1bc>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	490e      	ldr	r1, [pc, #56]	@ (8001300 <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012ca:	f000 f821 	bl	8001310 <HAL_RCC_GetSysClockFreq>
 80012ce:	4602      	mov	r2, r0
 80012d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <HAL_RCC_ClockConfig+0x1bc>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	091b      	lsrs	r3, r3, #4
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	490a      	ldr	r1, [pc, #40]	@ (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 80012dc:	5ccb      	ldrb	r3, [r1, r3]
 80012de:	fa22 f303 	lsr.w	r3, r2, r3
 80012e2:	4a09      	ldr	r2, [pc, #36]	@ (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <HAL_RCC_ClockConfig+0x1c8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fb7c 	bl	80009e8 <HAL_InitTick>

  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023c00 	.word	0x40023c00
 8001300:	40023800 	.word	0x40023800
 8001304:	080023dc 	.word	0x080023dc
 8001308:	20000000 	.word	0x20000000
 800130c:	20000004 	.word	0x20000004

08001310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001314:	b090      	sub	sp, #64	@ 0x40
 8001316:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001320:	2300      	movs	r3, #0
 8001322:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001328:	4b59      	ldr	r3, [pc, #356]	@ (8001490 <HAL_RCC_GetSysClockFreq+0x180>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 030c 	and.w	r3, r3, #12
 8001330:	2b08      	cmp	r3, #8
 8001332:	d00d      	beq.n	8001350 <HAL_RCC_GetSysClockFreq+0x40>
 8001334:	2b08      	cmp	r3, #8
 8001336:	f200 80a1 	bhi.w	800147c <HAL_RCC_GetSysClockFreq+0x16c>
 800133a:	2b00      	cmp	r3, #0
 800133c:	d002      	beq.n	8001344 <HAL_RCC_GetSysClockFreq+0x34>
 800133e:	2b04      	cmp	r3, #4
 8001340:	d003      	beq.n	800134a <HAL_RCC_GetSysClockFreq+0x3a>
 8001342:	e09b      	b.n	800147c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001344:	4b53      	ldr	r3, [pc, #332]	@ (8001494 <HAL_RCC_GetSysClockFreq+0x184>)
 8001346:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001348:	e09b      	b.n	8001482 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800134a:	4b53      	ldr	r3, [pc, #332]	@ (8001498 <HAL_RCC_GetSysClockFreq+0x188>)
 800134c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800134e:	e098      	b.n	8001482 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001350:	4b4f      	ldr	r3, [pc, #316]	@ (8001490 <HAL_RCC_GetSysClockFreq+0x180>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001358:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800135a:	4b4d      	ldr	r3, [pc, #308]	@ (8001490 <HAL_RCC_GetSysClockFreq+0x180>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d028      	beq.n	80013b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001366:	4b4a      	ldr	r3, [pc, #296]	@ (8001490 <HAL_RCC_GetSysClockFreq+0x180>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	099b      	lsrs	r3, r3, #6
 800136c:	2200      	movs	r2, #0
 800136e:	623b      	str	r3, [r7, #32]
 8001370:	627a      	str	r2, [r7, #36]	@ 0x24
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001378:	2100      	movs	r1, #0
 800137a:	4b47      	ldr	r3, [pc, #284]	@ (8001498 <HAL_RCC_GetSysClockFreq+0x188>)
 800137c:	fb03 f201 	mul.w	r2, r3, r1
 8001380:	2300      	movs	r3, #0
 8001382:	fb00 f303 	mul.w	r3, r0, r3
 8001386:	4413      	add	r3, r2
 8001388:	4a43      	ldr	r2, [pc, #268]	@ (8001498 <HAL_RCC_GetSysClockFreq+0x188>)
 800138a:	fba0 1202 	umull	r1, r2, r0, r2
 800138e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001390:	460a      	mov	r2, r1
 8001392:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001394:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001396:	4413      	add	r3, r2
 8001398:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800139a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800139c:	2200      	movs	r2, #0
 800139e:	61bb      	str	r3, [r7, #24]
 80013a0:	61fa      	str	r2, [r7, #28]
 80013a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80013aa:	f7fe ff61 	bl	8000270 <__aeabi_uldivmod>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4613      	mov	r3, r2
 80013b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013b6:	e053      	b.n	8001460 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013b8:	4b35      	ldr	r3, [pc, #212]	@ (8001490 <HAL_RCC_GetSysClockFreq+0x180>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	099b      	lsrs	r3, r3, #6
 80013be:	2200      	movs	r2, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	617a      	str	r2, [r7, #20]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80013ca:	f04f 0b00 	mov.w	fp, #0
 80013ce:	4652      	mov	r2, sl
 80013d0:	465b      	mov	r3, fp
 80013d2:	f04f 0000 	mov.w	r0, #0
 80013d6:	f04f 0100 	mov.w	r1, #0
 80013da:	0159      	lsls	r1, r3, #5
 80013dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013e0:	0150      	lsls	r0, r2, #5
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	ebb2 080a 	subs.w	r8, r2, sl
 80013ea:	eb63 090b 	sbc.w	r9, r3, fp
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	f04f 0300 	mov.w	r3, #0
 80013f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80013fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80013fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001402:	ebb2 0408 	subs.w	r4, r2, r8
 8001406:	eb63 0509 	sbc.w	r5, r3, r9
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	f04f 0300 	mov.w	r3, #0
 8001412:	00eb      	lsls	r3, r5, #3
 8001414:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001418:	00e2      	lsls	r2, r4, #3
 800141a:	4614      	mov	r4, r2
 800141c:	461d      	mov	r5, r3
 800141e:	eb14 030a 	adds.w	r3, r4, sl
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	eb45 030b 	adc.w	r3, r5, fp
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	f04f 0300 	mov.w	r3, #0
 8001432:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001436:	4629      	mov	r1, r5
 8001438:	028b      	lsls	r3, r1, #10
 800143a:	4621      	mov	r1, r4
 800143c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001440:	4621      	mov	r1, r4
 8001442:	028a      	lsls	r2, r1, #10
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800144a:	2200      	movs	r2, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	60fa      	str	r2, [r7, #12]
 8001450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001454:	f7fe ff0c 	bl	8000270 <__aeabi_uldivmod>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4613      	mov	r3, r2
 800145e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001460:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <HAL_RCC_GetSysClockFreq+0x180>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	0c1b      	lsrs	r3, r3, #16
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	3301      	adds	r3, #1
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001470:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001474:	fbb2 f3f3 	udiv	r3, r2, r3
 8001478:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800147a:	e002      	b.n	8001482 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800147c:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <HAL_RCC_GetSysClockFreq+0x184>)
 800147e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001484:	4618      	mov	r0, r3
 8001486:	3740      	adds	r7, #64	@ 0x40
 8001488:	46bd      	mov	sp, r7
 800148a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	00f42400 	.word	0x00f42400
 8001498:	017d7840 	.word	0x017d7840

0800149c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014a0:	4b03      	ldr	r3, [pc, #12]	@ (80014b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000000 	.word	0x20000000

080014b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014b8:	f7ff fff0 	bl	800149c <HAL_RCC_GetHCLKFreq>
 80014bc:	4602      	mov	r2, r0
 80014be:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	0a9b      	lsrs	r3, r3, #10
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	4903      	ldr	r1, [pc, #12]	@ (80014d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014ca:	5ccb      	ldrb	r3, [r1, r3]
 80014cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	080023ec 	.word	0x080023ec

080014dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014e0:	f7ff ffdc 	bl	800149c <HAL_RCC_GetHCLKFreq>
 80014e4:	4602      	mov	r2, r0
 80014e6:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	0b5b      	lsrs	r3, r3, #13
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	4903      	ldr	r1, [pc, #12]	@ (8001500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014f2:	5ccb      	ldrb	r3, [r1, r3]
 80014f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40023800 	.word	0x40023800
 8001500:	080023ec 	.word	0x080023ec

08001504 <std>:
 8001504:	2300      	movs	r3, #0
 8001506:	b510      	push	{r4, lr}
 8001508:	4604      	mov	r4, r0
 800150a:	e9c0 3300 	strd	r3, r3, [r0]
 800150e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001512:	6083      	str	r3, [r0, #8]
 8001514:	8181      	strh	r1, [r0, #12]
 8001516:	6643      	str	r3, [r0, #100]	@ 0x64
 8001518:	81c2      	strh	r2, [r0, #14]
 800151a:	6183      	str	r3, [r0, #24]
 800151c:	4619      	mov	r1, r3
 800151e:	2208      	movs	r2, #8
 8001520:	305c      	adds	r0, #92	@ 0x5c
 8001522:	f000 f906 	bl	8001732 <memset>
 8001526:	4b0d      	ldr	r3, [pc, #52]	@ (800155c <std+0x58>)
 8001528:	6263      	str	r3, [r4, #36]	@ 0x24
 800152a:	4b0d      	ldr	r3, [pc, #52]	@ (8001560 <std+0x5c>)
 800152c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800152e:	4b0d      	ldr	r3, [pc, #52]	@ (8001564 <std+0x60>)
 8001530:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001532:	4b0d      	ldr	r3, [pc, #52]	@ (8001568 <std+0x64>)
 8001534:	6323      	str	r3, [r4, #48]	@ 0x30
 8001536:	4b0d      	ldr	r3, [pc, #52]	@ (800156c <std+0x68>)
 8001538:	6224      	str	r4, [r4, #32]
 800153a:	429c      	cmp	r4, r3
 800153c:	d006      	beq.n	800154c <std+0x48>
 800153e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001542:	4294      	cmp	r4, r2
 8001544:	d002      	beq.n	800154c <std+0x48>
 8001546:	33d0      	adds	r3, #208	@ 0xd0
 8001548:	429c      	cmp	r4, r3
 800154a:	d105      	bne.n	8001558 <std+0x54>
 800154c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001554:	f000 b966 	b.w	8001824 <__retarget_lock_init_recursive>
 8001558:	bd10      	pop	{r4, pc}
 800155a:	bf00      	nop
 800155c:	080016ad 	.word	0x080016ad
 8001560:	080016cf 	.word	0x080016cf
 8001564:	08001707 	.word	0x08001707
 8001568:	0800172b 	.word	0x0800172b
 800156c:	2000008c 	.word	0x2000008c

08001570 <stdio_exit_handler>:
 8001570:	4a02      	ldr	r2, [pc, #8]	@ (800157c <stdio_exit_handler+0xc>)
 8001572:	4903      	ldr	r1, [pc, #12]	@ (8001580 <stdio_exit_handler+0x10>)
 8001574:	4803      	ldr	r0, [pc, #12]	@ (8001584 <stdio_exit_handler+0x14>)
 8001576:	f000 b869 	b.w	800164c <_fwalk_sglue>
 800157a:	bf00      	nop
 800157c:	2000000c 	.word	0x2000000c
 8001580:	080020c5 	.word	0x080020c5
 8001584:	2000001c 	.word	0x2000001c

08001588 <cleanup_stdio>:
 8001588:	6841      	ldr	r1, [r0, #4]
 800158a:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <cleanup_stdio+0x34>)
 800158c:	4299      	cmp	r1, r3
 800158e:	b510      	push	{r4, lr}
 8001590:	4604      	mov	r4, r0
 8001592:	d001      	beq.n	8001598 <cleanup_stdio+0x10>
 8001594:	f000 fd96 	bl	80020c4 <_fflush_r>
 8001598:	68a1      	ldr	r1, [r4, #8]
 800159a:	4b09      	ldr	r3, [pc, #36]	@ (80015c0 <cleanup_stdio+0x38>)
 800159c:	4299      	cmp	r1, r3
 800159e:	d002      	beq.n	80015a6 <cleanup_stdio+0x1e>
 80015a0:	4620      	mov	r0, r4
 80015a2:	f000 fd8f 	bl	80020c4 <_fflush_r>
 80015a6:	68e1      	ldr	r1, [r4, #12]
 80015a8:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <cleanup_stdio+0x3c>)
 80015aa:	4299      	cmp	r1, r3
 80015ac:	d004      	beq.n	80015b8 <cleanup_stdio+0x30>
 80015ae:	4620      	mov	r0, r4
 80015b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015b4:	f000 bd86 	b.w	80020c4 <_fflush_r>
 80015b8:	bd10      	pop	{r4, pc}
 80015ba:	bf00      	nop
 80015bc:	2000008c 	.word	0x2000008c
 80015c0:	200000f4 	.word	0x200000f4
 80015c4:	2000015c 	.word	0x2000015c

080015c8 <global_stdio_init.part.0>:
 80015c8:	b510      	push	{r4, lr}
 80015ca:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <global_stdio_init.part.0+0x30>)
 80015cc:	4c0b      	ldr	r4, [pc, #44]	@ (80015fc <global_stdio_init.part.0+0x34>)
 80015ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001600 <global_stdio_init.part.0+0x38>)
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	4620      	mov	r0, r4
 80015d4:	2200      	movs	r2, #0
 80015d6:	2104      	movs	r1, #4
 80015d8:	f7ff ff94 	bl	8001504 <std>
 80015dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80015e0:	2201      	movs	r2, #1
 80015e2:	2109      	movs	r1, #9
 80015e4:	f7ff ff8e 	bl	8001504 <std>
 80015e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80015ec:	2202      	movs	r2, #2
 80015ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015f2:	2112      	movs	r1, #18
 80015f4:	f7ff bf86 	b.w	8001504 <std>
 80015f8:	200001c4 	.word	0x200001c4
 80015fc:	2000008c 	.word	0x2000008c
 8001600:	08001571 	.word	0x08001571

08001604 <__sfp_lock_acquire>:
 8001604:	4801      	ldr	r0, [pc, #4]	@ (800160c <__sfp_lock_acquire+0x8>)
 8001606:	f000 b90e 	b.w	8001826 <__retarget_lock_acquire_recursive>
 800160a:	bf00      	nop
 800160c:	200001cd 	.word	0x200001cd

08001610 <__sfp_lock_release>:
 8001610:	4801      	ldr	r0, [pc, #4]	@ (8001618 <__sfp_lock_release+0x8>)
 8001612:	f000 b909 	b.w	8001828 <__retarget_lock_release_recursive>
 8001616:	bf00      	nop
 8001618:	200001cd 	.word	0x200001cd

0800161c <__sinit>:
 800161c:	b510      	push	{r4, lr}
 800161e:	4604      	mov	r4, r0
 8001620:	f7ff fff0 	bl	8001604 <__sfp_lock_acquire>
 8001624:	6a23      	ldr	r3, [r4, #32]
 8001626:	b11b      	cbz	r3, 8001630 <__sinit+0x14>
 8001628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800162c:	f7ff bff0 	b.w	8001610 <__sfp_lock_release>
 8001630:	4b04      	ldr	r3, [pc, #16]	@ (8001644 <__sinit+0x28>)
 8001632:	6223      	str	r3, [r4, #32]
 8001634:	4b04      	ldr	r3, [pc, #16]	@ (8001648 <__sinit+0x2c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f5      	bne.n	8001628 <__sinit+0xc>
 800163c:	f7ff ffc4 	bl	80015c8 <global_stdio_init.part.0>
 8001640:	e7f2      	b.n	8001628 <__sinit+0xc>
 8001642:	bf00      	nop
 8001644:	08001589 	.word	0x08001589
 8001648:	200001c4 	.word	0x200001c4

0800164c <_fwalk_sglue>:
 800164c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001650:	4607      	mov	r7, r0
 8001652:	4688      	mov	r8, r1
 8001654:	4614      	mov	r4, r2
 8001656:	2600      	movs	r6, #0
 8001658:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800165c:	f1b9 0901 	subs.w	r9, r9, #1
 8001660:	d505      	bpl.n	800166e <_fwalk_sglue+0x22>
 8001662:	6824      	ldr	r4, [r4, #0]
 8001664:	2c00      	cmp	r4, #0
 8001666:	d1f7      	bne.n	8001658 <_fwalk_sglue+0xc>
 8001668:	4630      	mov	r0, r6
 800166a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800166e:	89ab      	ldrh	r3, [r5, #12]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d907      	bls.n	8001684 <_fwalk_sglue+0x38>
 8001674:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001678:	3301      	adds	r3, #1
 800167a:	d003      	beq.n	8001684 <_fwalk_sglue+0x38>
 800167c:	4629      	mov	r1, r5
 800167e:	4638      	mov	r0, r7
 8001680:	47c0      	blx	r8
 8001682:	4306      	orrs	r6, r0
 8001684:	3568      	adds	r5, #104	@ 0x68
 8001686:	e7e9      	b.n	800165c <_fwalk_sglue+0x10>

08001688 <iprintf>:
 8001688:	b40f      	push	{r0, r1, r2, r3}
 800168a:	b507      	push	{r0, r1, r2, lr}
 800168c:	4906      	ldr	r1, [pc, #24]	@ (80016a8 <iprintf+0x20>)
 800168e:	ab04      	add	r3, sp, #16
 8001690:	6808      	ldr	r0, [r1, #0]
 8001692:	f853 2b04 	ldr.w	r2, [r3], #4
 8001696:	6881      	ldr	r1, [r0, #8]
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	f000 f9e9 	bl	8001a70 <_vfiprintf_r>
 800169e:	b003      	add	sp, #12
 80016a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80016a4:	b004      	add	sp, #16
 80016a6:	4770      	bx	lr
 80016a8:	20000018 	.word	0x20000018

080016ac <__sread>:
 80016ac:	b510      	push	{r4, lr}
 80016ae:	460c      	mov	r4, r1
 80016b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016b4:	f000 f868 	bl	8001788 <_read_r>
 80016b8:	2800      	cmp	r0, #0
 80016ba:	bfab      	itete	ge
 80016bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80016be:	89a3      	ldrhlt	r3, [r4, #12]
 80016c0:	181b      	addge	r3, r3, r0
 80016c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80016c6:	bfac      	ite	ge
 80016c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80016ca:	81a3      	strhlt	r3, [r4, #12]
 80016cc:	bd10      	pop	{r4, pc}

080016ce <__swrite>:
 80016ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016d2:	461f      	mov	r7, r3
 80016d4:	898b      	ldrh	r3, [r1, #12]
 80016d6:	05db      	lsls	r3, r3, #23
 80016d8:	4605      	mov	r5, r0
 80016da:	460c      	mov	r4, r1
 80016dc:	4616      	mov	r6, r2
 80016de:	d505      	bpl.n	80016ec <__swrite+0x1e>
 80016e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016e4:	2302      	movs	r3, #2
 80016e6:	2200      	movs	r2, #0
 80016e8:	f000 f83c 	bl	8001764 <_lseek_r>
 80016ec:	89a3      	ldrh	r3, [r4, #12]
 80016ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016f6:	81a3      	strh	r3, [r4, #12]
 80016f8:	4632      	mov	r2, r6
 80016fa:	463b      	mov	r3, r7
 80016fc:	4628      	mov	r0, r5
 80016fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001702:	f000 b853 	b.w	80017ac <_write_r>

08001706 <__sseek>:
 8001706:	b510      	push	{r4, lr}
 8001708:	460c      	mov	r4, r1
 800170a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800170e:	f000 f829 	bl	8001764 <_lseek_r>
 8001712:	1c43      	adds	r3, r0, #1
 8001714:	89a3      	ldrh	r3, [r4, #12]
 8001716:	bf15      	itete	ne
 8001718:	6560      	strne	r0, [r4, #84]	@ 0x54
 800171a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800171e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001722:	81a3      	strheq	r3, [r4, #12]
 8001724:	bf18      	it	ne
 8001726:	81a3      	strhne	r3, [r4, #12]
 8001728:	bd10      	pop	{r4, pc}

0800172a <__sclose>:
 800172a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800172e:	f000 b809 	b.w	8001744 <_close_r>

08001732 <memset>:
 8001732:	4402      	add	r2, r0
 8001734:	4603      	mov	r3, r0
 8001736:	4293      	cmp	r3, r2
 8001738:	d100      	bne.n	800173c <memset+0xa>
 800173a:	4770      	bx	lr
 800173c:	f803 1b01 	strb.w	r1, [r3], #1
 8001740:	e7f9      	b.n	8001736 <memset+0x4>
	...

08001744 <_close_r>:
 8001744:	b538      	push	{r3, r4, r5, lr}
 8001746:	4d06      	ldr	r5, [pc, #24]	@ (8001760 <_close_r+0x1c>)
 8001748:	2300      	movs	r3, #0
 800174a:	4604      	mov	r4, r0
 800174c:	4608      	mov	r0, r1
 800174e:	602b      	str	r3, [r5, #0]
 8001750:	f7ff f882 	bl	8000858 <_close>
 8001754:	1c43      	adds	r3, r0, #1
 8001756:	d102      	bne.n	800175e <_close_r+0x1a>
 8001758:	682b      	ldr	r3, [r5, #0]
 800175a:	b103      	cbz	r3, 800175e <_close_r+0x1a>
 800175c:	6023      	str	r3, [r4, #0]
 800175e:	bd38      	pop	{r3, r4, r5, pc}
 8001760:	200001c8 	.word	0x200001c8

08001764 <_lseek_r>:
 8001764:	b538      	push	{r3, r4, r5, lr}
 8001766:	4d07      	ldr	r5, [pc, #28]	@ (8001784 <_lseek_r+0x20>)
 8001768:	4604      	mov	r4, r0
 800176a:	4608      	mov	r0, r1
 800176c:	4611      	mov	r1, r2
 800176e:	2200      	movs	r2, #0
 8001770:	602a      	str	r2, [r5, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	f7ff f897 	bl	80008a6 <_lseek>
 8001778:	1c43      	adds	r3, r0, #1
 800177a:	d102      	bne.n	8001782 <_lseek_r+0x1e>
 800177c:	682b      	ldr	r3, [r5, #0]
 800177e:	b103      	cbz	r3, 8001782 <_lseek_r+0x1e>
 8001780:	6023      	str	r3, [r4, #0]
 8001782:	bd38      	pop	{r3, r4, r5, pc}
 8001784:	200001c8 	.word	0x200001c8

08001788 <_read_r>:
 8001788:	b538      	push	{r3, r4, r5, lr}
 800178a:	4d07      	ldr	r5, [pc, #28]	@ (80017a8 <_read_r+0x20>)
 800178c:	4604      	mov	r4, r0
 800178e:	4608      	mov	r0, r1
 8001790:	4611      	mov	r1, r2
 8001792:	2200      	movs	r2, #0
 8001794:	602a      	str	r2, [r5, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	f7ff f841 	bl	800081e <_read>
 800179c:	1c43      	adds	r3, r0, #1
 800179e:	d102      	bne.n	80017a6 <_read_r+0x1e>
 80017a0:	682b      	ldr	r3, [r5, #0]
 80017a2:	b103      	cbz	r3, 80017a6 <_read_r+0x1e>
 80017a4:	6023      	str	r3, [r4, #0]
 80017a6:	bd38      	pop	{r3, r4, r5, pc}
 80017a8:	200001c8 	.word	0x200001c8

080017ac <_write_r>:
 80017ac:	b538      	push	{r3, r4, r5, lr}
 80017ae:	4d07      	ldr	r5, [pc, #28]	@ (80017cc <_write_r+0x20>)
 80017b0:	4604      	mov	r4, r0
 80017b2:	4608      	mov	r0, r1
 80017b4:	4611      	mov	r1, r2
 80017b6:	2200      	movs	r2, #0
 80017b8:	602a      	str	r2, [r5, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	f7fe fef7 	bl	80005ae <_write>
 80017c0:	1c43      	adds	r3, r0, #1
 80017c2:	d102      	bne.n	80017ca <_write_r+0x1e>
 80017c4:	682b      	ldr	r3, [r5, #0]
 80017c6:	b103      	cbz	r3, 80017ca <_write_r+0x1e>
 80017c8:	6023      	str	r3, [r4, #0]
 80017ca:	bd38      	pop	{r3, r4, r5, pc}
 80017cc:	200001c8 	.word	0x200001c8

080017d0 <__errno>:
 80017d0:	4b01      	ldr	r3, [pc, #4]	@ (80017d8 <__errno+0x8>)
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000018 	.word	0x20000018

080017dc <__libc_init_array>:
 80017dc:	b570      	push	{r4, r5, r6, lr}
 80017de:	4d0d      	ldr	r5, [pc, #52]	@ (8001814 <__libc_init_array+0x38>)
 80017e0:	4c0d      	ldr	r4, [pc, #52]	@ (8001818 <__libc_init_array+0x3c>)
 80017e2:	1b64      	subs	r4, r4, r5
 80017e4:	10a4      	asrs	r4, r4, #2
 80017e6:	2600      	movs	r6, #0
 80017e8:	42a6      	cmp	r6, r4
 80017ea:	d109      	bne.n	8001800 <__libc_init_array+0x24>
 80017ec:	4d0b      	ldr	r5, [pc, #44]	@ (800181c <__libc_init_array+0x40>)
 80017ee:	4c0c      	ldr	r4, [pc, #48]	@ (8001820 <__libc_init_array+0x44>)
 80017f0:	f000 fdb8 	bl	8002364 <_init>
 80017f4:	1b64      	subs	r4, r4, r5
 80017f6:	10a4      	asrs	r4, r4, #2
 80017f8:	2600      	movs	r6, #0
 80017fa:	42a6      	cmp	r6, r4
 80017fc:	d105      	bne.n	800180a <__libc_init_array+0x2e>
 80017fe:	bd70      	pop	{r4, r5, r6, pc}
 8001800:	f855 3b04 	ldr.w	r3, [r5], #4
 8001804:	4798      	blx	r3
 8001806:	3601      	adds	r6, #1
 8001808:	e7ee      	b.n	80017e8 <__libc_init_array+0xc>
 800180a:	f855 3b04 	ldr.w	r3, [r5], #4
 800180e:	4798      	blx	r3
 8001810:	3601      	adds	r6, #1
 8001812:	e7f2      	b.n	80017fa <__libc_init_array+0x1e>
 8001814:	08002430 	.word	0x08002430
 8001818:	08002430 	.word	0x08002430
 800181c:	08002430 	.word	0x08002430
 8001820:	08002434 	.word	0x08002434

08001824 <__retarget_lock_init_recursive>:
 8001824:	4770      	bx	lr

08001826 <__retarget_lock_acquire_recursive>:
 8001826:	4770      	bx	lr

08001828 <__retarget_lock_release_recursive>:
 8001828:	4770      	bx	lr
	...

0800182c <_free_r>:
 800182c:	b538      	push	{r3, r4, r5, lr}
 800182e:	4605      	mov	r5, r0
 8001830:	2900      	cmp	r1, #0
 8001832:	d041      	beq.n	80018b8 <_free_r+0x8c>
 8001834:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001838:	1f0c      	subs	r4, r1, #4
 800183a:	2b00      	cmp	r3, #0
 800183c:	bfb8      	it	lt
 800183e:	18e4      	addlt	r4, r4, r3
 8001840:	f000 f8e0 	bl	8001a04 <__malloc_lock>
 8001844:	4a1d      	ldr	r2, [pc, #116]	@ (80018bc <_free_r+0x90>)
 8001846:	6813      	ldr	r3, [r2, #0]
 8001848:	b933      	cbnz	r3, 8001858 <_free_r+0x2c>
 800184a:	6063      	str	r3, [r4, #4]
 800184c:	6014      	str	r4, [r2, #0]
 800184e:	4628      	mov	r0, r5
 8001850:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001854:	f000 b8dc 	b.w	8001a10 <__malloc_unlock>
 8001858:	42a3      	cmp	r3, r4
 800185a:	d908      	bls.n	800186e <_free_r+0x42>
 800185c:	6820      	ldr	r0, [r4, #0]
 800185e:	1821      	adds	r1, r4, r0
 8001860:	428b      	cmp	r3, r1
 8001862:	bf01      	itttt	eq
 8001864:	6819      	ldreq	r1, [r3, #0]
 8001866:	685b      	ldreq	r3, [r3, #4]
 8001868:	1809      	addeq	r1, r1, r0
 800186a:	6021      	streq	r1, [r4, #0]
 800186c:	e7ed      	b.n	800184a <_free_r+0x1e>
 800186e:	461a      	mov	r2, r3
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	b10b      	cbz	r3, 8001878 <_free_r+0x4c>
 8001874:	42a3      	cmp	r3, r4
 8001876:	d9fa      	bls.n	800186e <_free_r+0x42>
 8001878:	6811      	ldr	r1, [r2, #0]
 800187a:	1850      	adds	r0, r2, r1
 800187c:	42a0      	cmp	r0, r4
 800187e:	d10b      	bne.n	8001898 <_free_r+0x6c>
 8001880:	6820      	ldr	r0, [r4, #0]
 8001882:	4401      	add	r1, r0
 8001884:	1850      	adds	r0, r2, r1
 8001886:	4283      	cmp	r3, r0
 8001888:	6011      	str	r1, [r2, #0]
 800188a:	d1e0      	bne.n	800184e <_free_r+0x22>
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	6053      	str	r3, [r2, #4]
 8001892:	4408      	add	r0, r1
 8001894:	6010      	str	r0, [r2, #0]
 8001896:	e7da      	b.n	800184e <_free_r+0x22>
 8001898:	d902      	bls.n	80018a0 <_free_r+0x74>
 800189a:	230c      	movs	r3, #12
 800189c:	602b      	str	r3, [r5, #0]
 800189e:	e7d6      	b.n	800184e <_free_r+0x22>
 80018a0:	6820      	ldr	r0, [r4, #0]
 80018a2:	1821      	adds	r1, r4, r0
 80018a4:	428b      	cmp	r3, r1
 80018a6:	bf04      	itt	eq
 80018a8:	6819      	ldreq	r1, [r3, #0]
 80018aa:	685b      	ldreq	r3, [r3, #4]
 80018ac:	6063      	str	r3, [r4, #4]
 80018ae:	bf04      	itt	eq
 80018b0:	1809      	addeq	r1, r1, r0
 80018b2:	6021      	streq	r1, [r4, #0]
 80018b4:	6054      	str	r4, [r2, #4]
 80018b6:	e7ca      	b.n	800184e <_free_r+0x22>
 80018b8:	bd38      	pop	{r3, r4, r5, pc}
 80018ba:	bf00      	nop
 80018bc:	200001d4 	.word	0x200001d4

080018c0 <sbrk_aligned>:
 80018c0:	b570      	push	{r4, r5, r6, lr}
 80018c2:	4e0f      	ldr	r6, [pc, #60]	@ (8001900 <sbrk_aligned+0x40>)
 80018c4:	460c      	mov	r4, r1
 80018c6:	6831      	ldr	r1, [r6, #0]
 80018c8:	4605      	mov	r5, r0
 80018ca:	b911      	cbnz	r1, 80018d2 <sbrk_aligned+0x12>
 80018cc:	f000 fcb6 	bl	800223c <_sbrk_r>
 80018d0:	6030      	str	r0, [r6, #0]
 80018d2:	4621      	mov	r1, r4
 80018d4:	4628      	mov	r0, r5
 80018d6:	f000 fcb1 	bl	800223c <_sbrk_r>
 80018da:	1c43      	adds	r3, r0, #1
 80018dc:	d103      	bne.n	80018e6 <sbrk_aligned+0x26>
 80018de:	f04f 34ff 	mov.w	r4, #4294967295
 80018e2:	4620      	mov	r0, r4
 80018e4:	bd70      	pop	{r4, r5, r6, pc}
 80018e6:	1cc4      	adds	r4, r0, #3
 80018e8:	f024 0403 	bic.w	r4, r4, #3
 80018ec:	42a0      	cmp	r0, r4
 80018ee:	d0f8      	beq.n	80018e2 <sbrk_aligned+0x22>
 80018f0:	1a21      	subs	r1, r4, r0
 80018f2:	4628      	mov	r0, r5
 80018f4:	f000 fca2 	bl	800223c <_sbrk_r>
 80018f8:	3001      	adds	r0, #1
 80018fa:	d1f2      	bne.n	80018e2 <sbrk_aligned+0x22>
 80018fc:	e7ef      	b.n	80018de <sbrk_aligned+0x1e>
 80018fe:	bf00      	nop
 8001900:	200001d0 	.word	0x200001d0

08001904 <_malloc_r>:
 8001904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001908:	1ccd      	adds	r5, r1, #3
 800190a:	f025 0503 	bic.w	r5, r5, #3
 800190e:	3508      	adds	r5, #8
 8001910:	2d0c      	cmp	r5, #12
 8001912:	bf38      	it	cc
 8001914:	250c      	movcc	r5, #12
 8001916:	2d00      	cmp	r5, #0
 8001918:	4606      	mov	r6, r0
 800191a:	db01      	blt.n	8001920 <_malloc_r+0x1c>
 800191c:	42a9      	cmp	r1, r5
 800191e:	d904      	bls.n	800192a <_malloc_r+0x26>
 8001920:	230c      	movs	r3, #12
 8001922:	6033      	str	r3, [r6, #0]
 8001924:	2000      	movs	r0, #0
 8001926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800192a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001a00 <_malloc_r+0xfc>
 800192e:	f000 f869 	bl	8001a04 <__malloc_lock>
 8001932:	f8d8 3000 	ldr.w	r3, [r8]
 8001936:	461c      	mov	r4, r3
 8001938:	bb44      	cbnz	r4, 800198c <_malloc_r+0x88>
 800193a:	4629      	mov	r1, r5
 800193c:	4630      	mov	r0, r6
 800193e:	f7ff ffbf 	bl	80018c0 <sbrk_aligned>
 8001942:	1c43      	adds	r3, r0, #1
 8001944:	4604      	mov	r4, r0
 8001946:	d158      	bne.n	80019fa <_malloc_r+0xf6>
 8001948:	f8d8 4000 	ldr.w	r4, [r8]
 800194c:	4627      	mov	r7, r4
 800194e:	2f00      	cmp	r7, #0
 8001950:	d143      	bne.n	80019da <_malloc_r+0xd6>
 8001952:	2c00      	cmp	r4, #0
 8001954:	d04b      	beq.n	80019ee <_malloc_r+0xea>
 8001956:	6823      	ldr	r3, [r4, #0]
 8001958:	4639      	mov	r1, r7
 800195a:	4630      	mov	r0, r6
 800195c:	eb04 0903 	add.w	r9, r4, r3
 8001960:	f000 fc6c 	bl	800223c <_sbrk_r>
 8001964:	4581      	cmp	r9, r0
 8001966:	d142      	bne.n	80019ee <_malloc_r+0xea>
 8001968:	6821      	ldr	r1, [r4, #0]
 800196a:	1a6d      	subs	r5, r5, r1
 800196c:	4629      	mov	r1, r5
 800196e:	4630      	mov	r0, r6
 8001970:	f7ff ffa6 	bl	80018c0 <sbrk_aligned>
 8001974:	3001      	adds	r0, #1
 8001976:	d03a      	beq.n	80019ee <_malloc_r+0xea>
 8001978:	6823      	ldr	r3, [r4, #0]
 800197a:	442b      	add	r3, r5
 800197c:	6023      	str	r3, [r4, #0]
 800197e:	f8d8 3000 	ldr.w	r3, [r8]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	bb62      	cbnz	r2, 80019e0 <_malloc_r+0xdc>
 8001986:	f8c8 7000 	str.w	r7, [r8]
 800198a:	e00f      	b.n	80019ac <_malloc_r+0xa8>
 800198c:	6822      	ldr	r2, [r4, #0]
 800198e:	1b52      	subs	r2, r2, r5
 8001990:	d420      	bmi.n	80019d4 <_malloc_r+0xd0>
 8001992:	2a0b      	cmp	r2, #11
 8001994:	d917      	bls.n	80019c6 <_malloc_r+0xc2>
 8001996:	1961      	adds	r1, r4, r5
 8001998:	42a3      	cmp	r3, r4
 800199a:	6025      	str	r5, [r4, #0]
 800199c:	bf18      	it	ne
 800199e:	6059      	strne	r1, [r3, #4]
 80019a0:	6863      	ldr	r3, [r4, #4]
 80019a2:	bf08      	it	eq
 80019a4:	f8c8 1000 	streq.w	r1, [r8]
 80019a8:	5162      	str	r2, [r4, r5]
 80019aa:	604b      	str	r3, [r1, #4]
 80019ac:	4630      	mov	r0, r6
 80019ae:	f000 f82f 	bl	8001a10 <__malloc_unlock>
 80019b2:	f104 000b 	add.w	r0, r4, #11
 80019b6:	1d23      	adds	r3, r4, #4
 80019b8:	f020 0007 	bic.w	r0, r0, #7
 80019bc:	1ac2      	subs	r2, r0, r3
 80019be:	bf1c      	itt	ne
 80019c0:	1a1b      	subne	r3, r3, r0
 80019c2:	50a3      	strne	r3, [r4, r2]
 80019c4:	e7af      	b.n	8001926 <_malloc_r+0x22>
 80019c6:	6862      	ldr	r2, [r4, #4]
 80019c8:	42a3      	cmp	r3, r4
 80019ca:	bf0c      	ite	eq
 80019cc:	f8c8 2000 	streq.w	r2, [r8]
 80019d0:	605a      	strne	r2, [r3, #4]
 80019d2:	e7eb      	b.n	80019ac <_malloc_r+0xa8>
 80019d4:	4623      	mov	r3, r4
 80019d6:	6864      	ldr	r4, [r4, #4]
 80019d8:	e7ae      	b.n	8001938 <_malloc_r+0x34>
 80019da:	463c      	mov	r4, r7
 80019dc:	687f      	ldr	r7, [r7, #4]
 80019de:	e7b6      	b.n	800194e <_malloc_r+0x4a>
 80019e0:	461a      	mov	r2, r3
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	42a3      	cmp	r3, r4
 80019e6:	d1fb      	bne.n	80019e0 <_malloc_r+0xdc>
 80019e8:	2300      	movs	r3, #0
 80019ea:	6053      	str	r3, [r2, #4]
 80019ec:	e7de      	b.n	80019ac <_malloc_r+0xa8>
 80019ee:	230c      	movs	r3, #12
 80019f0:	6033      	str	r3, [r6, #0]
 80019f2:	4630      	mov	r0, r6
 80019f4:	f000 f80c 	bl	8001a10 <__malloc_unlock>
 80019f8:	e794      	b.n	8001924 <_malloc_r+0x20>
 80019fa:	6005      	str	r5, [r0, #0]
 80019fc:	e7d6      	b.n	80019ac <_malloc_r+0xa8>
 80019fe:	bf00      	nop
 8001a00:	200001d4 	.word	0x200001d4

08001a04 <__malloc_lock>:
 8001a04:	4801      	ldr	r0, [pc, #4]	@ (8001a0c <__malloc_lock+0x8>)
 8001a06:	f7ff bf0e 	b.w	8001826 <__retarget_lock_acquire_recursive>
 8001a0a:	bf00      	nop
 8001a0c:	200001cc 	.word	0x200001cc

08001a10 <__malloc_unlock>:
 8001a10:	4801      	ldr	r0, [pc, #4]	@ (8001a18 <__malloc_unlock+0x8>)
 8001a12:	f7ff bf09 	b.w	8001828 <__retarget_lock_release_recursive>
 8001a16:	bf00      	nop
 8001a18:	200001cc 	.word	0x200001cc

08001a1c <__sfputc_r>:
 8001a1c:	6893      	ldr	r3, [r2, #8]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	b410      	push	{r4}
 8001a24:	6093      	str	r3, [r2, #8]
 8001a26:	da08      	bge.n	8001a3a <__sfputc_r+0x1e>
 8001a28:	6994      	ldr	r4, [r2, #24]
 8001a2a:	42a3      	cmp	r3, r4
 8001a2c:	db01      	blt.n	8001a32 <__sfputc_r+0x16>
 8001a2e:	290a      	cmp	r1, #10
 8001a30:	d103      	bne.n	8001a3a <__sfputc_r+0x1e>
 8001a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a36:	f000 bb6d 	b.w	8002114 <__swbuf_r>
 8001a3a:	6813      	ldr	r3, [r2, #0]
 8001a3c:	1c58      	adds	r0, r3, #1
 8001a3e:	6010      	str	r0, [r2, #0]
 8001a40:	7019      	strb	r1, [r3, #0]
 8001a42:	4608      	mov	r0, r1
 8001a44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <__sfputs_r>:
 8001a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a4c:	4606      	mov	r6, r0
 8001a4e:	460f      	mov	r7, r1
 8001a50:	4614      	mov	r4, r2
 8001a52:	18d5      	adds	r5, r2, r3
 8001a54:	42ac      	cmp	r4, r5
 8001a56:	d101      	bne.n	8001a5c <__sfputs_r+0x12>
 8001a58:	2000      	movs	r0, #0
 8001a5a:	e007      	b.n	8001a6c <__sfputs_r+0x22>
 8001a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a60:	463a      	mov	r2, r7
 8001a62:	4630      	mov	r0, r6
 8001a64:	f7ff ffda 	bl	8001a1c <__sfputc_r>
 8001a68:	1c43      	adds	r3, r0, #1
 8001a6a:	d1f3      	bne.n	8001a54 <__sfputs_r+0xa>
 8001a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001a70 <_vfiprintf_r>:
 8001a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a74:	460d      	mov	r5, r1
 8001a76:	b09d      	sub	sp, #116	@ 0x74
 8001a78:	4614      	mov	r4, r2
 8001a7a:	4698      	mov	r8, r3
 8001a7c:	4606      	mov	r6, r0
 8001a7e:	b118      	cbz	r0, 8001a88 <_vfiprintf_r+0x18>
 8001a80:	6a03      	ldr	r3, [r0, #32]
 8001a82:	b90b      	cbnz	r3, 8001a88 <_vfiprintf_r+0x18>
 8001a84:	f7ff fdca 	bl	800161c <__sinit>
 8001a88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001a8a:	07d9      	lsls	r1, r3, #31
 8001a8c:	d405      	bmi.n	8001a9a <_vfiprintf_r+0x2a>
 8001a8e:	89ab      	ldrh	r3, [r5, #12]
 8001a90:	059a      	lsls	r2, r3, #22
 8001a92:	d402      	bmi.n	8001a9a <_vfiprintf_r+0x2a>
 8001a94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001a96:	f7ff fec6 	bl	8001826 <__retarget_lock_acquire_recursive>
 8001a9a:	89ab      	ldrh	r3, [r5, #12]
 8001a9c:	071b      	lsls	r3, r3, #28
 8001a9e:	d501      	bpl.n	8001aa4 <_vfiprintf_r+0x34>
 8001aa0:	692b      	ldr	r3, [r5, #16]
 8001aa2:	b99b      	cbnz	r3, 8001acc <_vfiprintf_r+0x5c>
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	4630      	mov	r0, r6
 8001aa8:	f000 fb72 	bl	8002190 <__swsetup_r>
 8001aac:	b170      	cbz	r0, 8001acc <_vfiprintf_r+0x5c>
 8001aae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001ab0:	07dc      	lsls	r4, r3, #31
 8001ab2:	d504      	bpl.n	8001abe <_vfiprintf_r+0x4e>
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	b01d      	add	sp, #116	@ 0x74
 8001aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001abe:	89ab      	ldrh	r3, [r5, #12]
 8001ac0:	0598      	lsls	r0, r3, #22
 8001ac2:	d4f7      	bmi.n	8001ab4 <_vfiprintf_r+0x44>
 8001ac4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001ac6:	f7ff feaf 	bl	8001828 <__retarget_lock_release_recursive>
 8001aca:	e7f3      	b.n	8001ab4 <_vfiprintf_r+0x44>
 8001acc:	2300      	movs	r3, #0
 8001ace:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ad0:	2320      	movs	r3, #32
 8001ad2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001ad6:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ada:	2330      	movs	r3, #48	@ 0x30
 8001adc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001c8c <_vfiprintf_r+0x21c>
 8001ae0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001ae4:	f04f 0901 	mov.w	r9, #1
 8001ae8:	4623      	mov	r3, r4
 8001aea:	469a      	mov	sl, r3
 8001aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001af0:	b10a      	cbz	r2, 8001af6 <_vfiprintf_r+0x86>
 8001af2:	2a25      	cmp	r2, #37	@ 0x25
 8001af4:	d1f9      	bne.n	8001aea <_vfiprintf_r+0x7a>
 8001af6:	ebba 0b04 	subs.w	fp, sl, r4
 8001afa:	d00b      	beq.n	8001b14 <_vfiprintf_r+0xa4>
 8001afc:	465b      	mov	r3, fp
 8001afe:	4622      	mov	r2, r4
 8001b00:	4629      	mov	r1, r5
 8001b02:	4630      	mov	r0, r6
 8001b04:	f7ff ffa1 	bl	8001a4a <__sfputs_r>
 8001b08:	3001      	adds	r0, #1
 8001b0a:	f000 80a7 	beq.w	8001c5c <_vfiprintf_r+0x1ec>
 8001b0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001b10:	445a      	add	r2, fp
 8001b12:	9209      	str	r2, [sp, #36]	@ 0x24
 8001b14:	f89a 3000 	ldrb.w	r3, [sl]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 809f 	beq.w	8001c5c <_vfiprintf_r+0x1ec>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f04f 32ff 	mov.w	r2, #4294967295
 8001b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b28:	f10a 0a01 	add.w	sl, sl, #1
 8001b2c:	9304      	str	r3, [sp, #16]
 8001b2e:	9307      	str	r3, [sp, #28]
 8001b30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001b34:	931a      	str	r3, [sp, #104]	@ 0x68
 8001b36:	4654      	mov	r4, sl
 8001b38:	2205      	movs	r2, #5
 8001b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b3e:	4853      	ldr	r0, [pc, #332]	@ (8001c8c <_vfiprintf_r+0x21c>)
 8001b40:	f7fe fb46 	bl	80001d0 <memchr>
 8001b44:	9a04      	ldr	r2, [sp, #16]
 8001b46:	b9d8      	cbnz	r0, 8001b80 <_vfiprintf_r+0x110>
 8001b48:	06d1      	lsls	r1, r2, #27
 8001b4a:	bf44      	itt	mi
 8001b4c:	2320      	movmi	r3, #32
 8001b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b52:	0713      	lsls	r3, r2, #28
 8001b54:	bf44      	itt	mi
 8001b56:	232b      	movmi	r3, #43	@ 0x2b
 8001b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8001b60:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b62:	d015      	beq.n	8001b90 <_vfiprintf_r+0x120>
 8001b64:	9a07      	ldr	r2, [sp, #28]
 8001b66:	4654      	mov	r4, sl
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f04f 0c0a 	mov.w	ip, #10
 8001b6e:	4621      	mov	r1, r4
 8001b70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b74:	3b30      	subs	r3, #48	@ 0x30
 8001b76:	2b09      	cmp	r3, #9
 8001b78:	d94b      	bls.n	8001c12 <_vfiprintf_r+0x1a2>
 8001b7a:	b1b0      	cbz	r0, 8001baa <_vfiprintf_r+0x13a>
 8001b7c:	9207      	str	r2, [sp, #28]
 8001b7e:	e014      	b.n	8001baa <_vfiprintf_r+0x13a>
 8001b80:	eba0 0308 	sub.w	r3, r0, r8
 8001b84:	fa09 f303 	lsl.w	r3, r9, r3
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	9304      	str	r3, [sp, #16]
 8001b8c:	46a2      	mov	sl, r4
 8001b8e:	e7d2      	b.n	8001b36 <_vfiprintf_r+0xc6>
 8001b90:	9b03      	ldr	r3, [sp, #12]
 8001b92:	1d19      	adds	r1, r3, #4
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	9103      	str	r1, [sp, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bfbb      	ittet	lt
 8001b9c:	425b      	neglt	r3, r3
 8001b9e:	f042 0202 	orrlt.w	r2, r2, #2
 8001ba2:	9307      	strge	r3, [sp, #28]
 8001ba4:	9307      	strlt	r3, [sp, #28]
 8001ba6:	bfb8      	it	lt
 8001ba8:	9204      	strlt	r2, [sp, #16]
 8001baa:	7823      	ldrb	r3, [r4, #0]
 8001bac:	2b2e      	cmp	r3, #46	@ 0x2e
 8001bae:	d10a      	bne.n	8001bc6 <_vfiprintf_r+0x156>
 8001bb0:	7863      	ldrb	r3, [r4, #1]
 8001bb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8001bb4:	d132      	bne.n	8001c1c <_vfiprintf_r+0x1ac>
 8001bb6:	9b03      	ldr	r3, [sp, #12]
 8001bb8:	1d1a      	adds	r2, r3, #4
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	9203      	str	r2, [sp, #12]
 8001bbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001bc2:	3402      	adds	r4, #2
 8001bc4:	9305      	str	r3, [sp, #20]
 8001bc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001c9c <_vfiprintf_r+0x22c>
 8001bca:	7821      	ldrb	r1, [r4, #0]
 8001bcc:	2203      	movs	r2, #3
 8001bce:	4650      	mov	r0, sl
 8001bd0:	f7fe fafe 	bl	80001d0 <memchr>
 8001bd4:	b138      	cbz	r0, 8001be6 <_vfiprintf_r+0x176>
 8001bd6:	9b04      	ldr	r3, [sp, #16]
 8001bd8:	eba0 000a 	sub.w	r0, r0, sl
 8001bdc:	2240      	movs	r2, #64	@ 0x40
 8001bde:	4082      	lsls	r2, r0
 8001be0:	4313      	orrs	r3, r2
 8001be2:	3401      	adds	r4, #1
 8001be4:	9304      	str	r3, [sp, #16]
 8001be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bea:	4829      	ldr	r0, [pc, #164]	@ (8001c90 <_vfiprintf_r+0x220>)
 8001bec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001bf0:	2206      	movs	r2, #6
 8001bf2:	f7fe faed 	bl	80001d0 <memchr>
 8001bf6:	2800      	cmp	r0, #0
 8001bf8:	d03f      	beq.n	8001c7a <_vfiprintf_r+0x20a>
 8001bfa:	4b26      	ldr	r3, [pc, #152]	@ (8001c94 <_vfiprintf_r+0x224>)
 8001bfc:	bb1b      	cbnz	r3, 8001c46 <_vfiprintf_r+0x1d6>
 8001bfe:	9b03      	ldr	r3, [sp, #12]
 8001c00:	3307      	adds	r3, #7
 8001c02:	f023 0307 	bic.w	r3, r3, #7
 8001c06:	3308      	adds	r3, #8
 8001c08:	9303      	str	r3, [sp, #12]
 8001c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001c0c:	443b      	add	r3, r7
 8001c0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001c10:	e76a      	b.n	8001ae8 <_vfiprintf_r+0x78>
 8001c12:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c16:	460c      	mov	r4, r1
 8001c18:	2001      	movs	r0, #1
 8001c1a:	e7a8      	b.n	8001b6e <_vfiprintf_r+0xfe>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	3401      	adds	r4, #1
 8001c20:	9305      	str	r3, [sp, #20]
 8001c22:	4619      	mov	r1, r3
 8001c24:	f04f 0c0a 	mov.w	ip, #10
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c2e:	3a30      	subs	r2, #48	@ 0x30
 8001c30:	2a09      	cmp	r2, #9
 8001c32:	d903      	bls.n	8001c3c <_vfiprintf_r+0x1cc>
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0c6      	beq.n	8001bc6 <_vfiprintf_r+0x156>
 8001c38:	9105      	str	r1, [sp, #20]
 8001c3a:	e7c4      	b.n	8001bc6 <_vfiprintf_r+0x156>
 8001c3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c40:	4604      	mov	r4, r0
 8001c42:	2301      	movs	r3, #1
 8001c44:	e7f0      	b.n	8001c28 <_vfiprintf_r+0x1b8>
 8001c46:	ab03      	add	r3, sp, #12
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	462a      	mov	r2, r5
 8001c4c:	4b12      	ldr	r3, [pc, #72]	@ (8001c98 <_vfiprintf_r+0x228>)
 8001c4e:	a904      	add	r1, sp, #16
 8001c50:	4630      	mov	r0, r6
 8001c52:	f3af 8000 	nop.w
 8001c56:	4607      	mov	r7, r0
 8001c58:	1c78      	adds	r0, r7, #1
 8001c5a:	d1d6      	bne.n	8001c0a <_vfiprintf_r+0x19a>
 8001c5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c5e:	07d9      	lsls	r1, r3, #31
 8001c60:	d405      	bmi.n	8001c6e <_vfiprintf_r+0x1fe>
 8001c62:	89ab      	ldrh	r3, [r5, #12]
 8001c64:	059a      	lsls	r2, r3, #22
 8001c66:	d402      	bmi.n	8001c6e <_vfiprintf_r+0x1fe>
 8001c68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c6a:	f7ff fddd 	bl	8001828 <__retarget_lock_release_recursive>
 8001c6e:	89ab      	ldrh	r3, [r5, #12]
 8001c70:	065b      	lsls	r3, r3, #25
 8001c72:	f53f af1f 	bmi.w	8001ab4 <_vfiprintf_r+0x44>
 8001c76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001c78:	e71e      	b.n	8001ab8 <_vfiprintf_r+0x48>
 8001c7a:	ab03      	add	r3, sp, #12
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	462a      	mov	r2, r5
 8001c80:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <_vfiprintf_r+0x228>)
 8001c82:	a904      	add	r1, sp, #16
 8001c84:	4630      	mov	r0, r6
 8001c86:	f000 f879 	bl	8001d7c <_printf_i>
 8001c8a:	e7e4      	b.n	8001c56 <_vfiprintf_r+0x1e6>
 8001c8c:	080023f4 	.word	0x080023f4
 8001c90:	080023fe 	.word	0x080023fe
 8001c94:	00000000 	.word	0x00000000
 8001c98:	08001a4b 	.word	0x08001a4b
 8001c9c:	080023fa 	.word	0x080023fa

08001ca0 <_printf_common>:
 8001ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ca4:	4616      	mov	r6, r2
 8001ca6:	4698      	mov	r8, r3
 8001ca8:	688a      	ldr	r2, [r1, #8]
 8001caa:	690b      	ldr	r3, [r1, #16]
 8001cac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	bfb8      	it	lt
 8001cb4:	4613      	movlt	r3, r2
 8001cb6:	6033      	str	r3, [r6, #0]
 8001cb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001cbc:	4607      	mov	r7, r0
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	b10a      	cbz	r2, 8001cc6 <_printf_common+0x26>
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	6033      	str	r3, [r6, #0]
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	0699      	lsls	r1, r3, #26
 8001cca:	bf42      	ittt	mi
 8001ccc:	6833      	ldrmi	r3, [r6, #0]
 8001cce:	3302      	addmi	r3, #2
 8001cd0:	6033      	strmi	r3, [r6, #0]
 8001cd2:	6825      	ldr	r5, [r4, #0]
 8001cd4:	f015 0506 	ands.w	r5, r5, #6
 8001cd8:	d106      	bne.n	8001ce8 <_printf_common+0x48>
 8001cda:	f104 0a19 	add.w	sl, r4, #25
 8001cde:	68e3      	ldr	r3, [r4, #12]
 8001ce0:	6832      	ldr	r2, [r6, #0]
 8001ce2:	1a9b      	subs	r3, r3, r2
 8001ce4:	42ab      	cmp	r3, r5
 8001ce6:	dc26      	bgt.n	8001d36 <_printf_common+0x96>
 8001ce8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001cec:	6822      	ldr	r2, [r4, #0]
 8001cee:	3b00      	subs	r3, #0
 8001cf0:	bf18      	it	ne
 8001cf2:	2301      	movne	r3, #1
 8001cf4:	0692      	lsls	r2, r2, #26
 8001cf6:	d42b      	bmi.n	8001d50 <_printf_common+0xb0>
 8001cf8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001cfc:	4641      	mov	r1, r8
 8001cfe:	4638      	mov	r0, r7
 8001d00:	47c8      	blx	r9
 8001d02:	3001      	adds	r0, #1
 8001d04:	d01e      	beq.n	8001d44 <_printf_common+0xa4>
 8001d06:	6823      	ldr	r3, [r4, #0]
 8001d08:	6922      	ldr	r2, [r4, #16]
 8001d0a:	f003 0306 	and.w	r3, r3, #6
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	bf02      	ittt	eq
 8001d12:	68e5      	ldreq	r5, [r4, #12]
 8001d14:	6833      	ldreq	r3, [r6, #0]
 8001d16:	1aed      	subeq	r5, r5, r3
 8001d18:	68a3      	ldr	r3, [r4, #8]
 8001d1a:	bf0c      	ite	eq
 8001d1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d20:	2500      	movne	r5, #0
 8001d22:	4293      	cmp	r3, r2
 8001d24:	bfc4      	itt	gt
 8001d26:	1a9b      	subgt	r3, r3, r2
 8001d28:	18ed      	addgt	r5, r5, r3
 8001d2a:	2600      	movs	r6, #0
 8001d2c:	341a      	adds	r4, #26
 8001d2e:	42b5      	cmp	r5, r6
 8001d30:	d11a      	bne.n	8001d68 <_printf_common+0xc8>
 8001d32:	2000      	movs	r0, #0
 8001d34:	e008      	b.n	8001d48 <_printf_common+0xa8>
 8001d36:	2301      	movs	r3, #1
 8001d38:	4652      	mov	r2, sl
 8001d3a:	4641      	mov	r1, r8
 8001d3c:	4638      	mov	r0, r7
 8001d3e:	47c8      	blx	r9
 8001d40:	3001      	adds	r0, #1
 8001d42:	d103      	bne.n	8001d4c <_printf_common+0xac>
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d4c:	3501      	adds	r5, #1
 8001d4e:	e7c6      	b.n	8001cde <_printf_common+0x3e>
 8001d50:	18e1      	adds	r1, r4, r3
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	2030      	movs	r0, #48	@ 0x30
 8001d56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001d5a:	4422      	add	r2, r4
 8001d5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001d60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001d64:	3302      	adds	r3, #2
 8001d66:	e7c7      	b.n	8001cf8 <_printf_common+0x58>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	4622      	mov	r2, r4
 8001d6c:	4641      	mov	r1, r8
 8001d6e:	4638      	mov	r0, r7
 8001d70:	47c8      	blx	r9
 8001d72:	3001      	adds	r0, #1
 8001d74:	d0e6      	beq.n	8001d44 <_printf_common+0xa4>
 8001d76:	3601      	adds	r6, #1
 8001d78:	e7d9      	b.n	8001d2e <_printf_common+0x8e>
	...

08001d7c <_printf_i>:
 8001d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d80:	7e0f      	ldrb	r7, [r1, #24]
 8001d82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001d84:	2f78      	cmp	r7, #120	@ 0x78
 8001d86:	4691      	mov	r9, r2
 8001d88:	4680      	mov	r8, r0
 8001d8a:	460c      	mov	r4, r1
 8001d8c:	469a      	mov	sl, r3
 8001d8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001d92:	d807      	bhi.n	8001da4 <_printf_i+0x28>
 8001d94:	2f62      	cmp	r7, #98	@ 0x62
 8001d96:	d80a      	bhi.n	8001dae <_printf_i+0x32>
 8001d98:	2f00      	cmp	r7, #0
 8001d9a:	f000 80d2 	beq.w	8001f42 <_printf_i+0x1c6>
 8001d9e:	2f58      	cmp	r7, #88	@ 0x58
 8001da0:	f000 80b9 	beq.w	8001f16 <_printf_i+0x19a>
 8001da4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001da8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001dac:	e03a      	b.n	8001e24 <_printf_i+0xa8>
 8001dae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001db2:	2b15      	cmp	r3, #21
 8001db4:	d8f6      	bhi.n	8001da4 <_printf_i+0x28>
 8001db6:	a101      	add	r1, pc, #4	@ (adr r1, 8001dbc <_printf_i+0x40>)
 8001db8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001dbc:	08001e15 	.word	0x08001e15
 8001dc0:	08001e29 	.word	0x08001e29
 8001dc4:	08001da5 	.word	0x08001da5
 8001dc8:	08001da5 	.word	0x08001da5
 8001dcc:	08001da5 	.word	0x08001da5
 8001dd0:	08001da5 	.word	0x08001da5
 8001dd4:	08001e29 	.word	0x08001e29
 8001dd8:	08001da5 	.word	0x08001da5
 8001ddc:	08001da5 	.word	0x08001da5
 8001de0:	08001da5 	.word	0x08001da5
 8001de4:	08001da5 	.word	0x08001da5
 8001de8:	08001f29 	.word	0x08001f29
 8001dec:	08001e53 	.word	0x08001e53
 8001df0:	08001ee3 	.word	0x08001ee3
 8001df4:	08001da5 	.word	0x08001da5
 8001df8:	08001da5 	.word	0x08001da5
 8001dfc:	08001f4b 	.word	0x08001f4b
 8001e00:	08001da5 	.word	0x08001da5
 8001e04:	08001e53 	.word	0x08001e53
 8001e08:	08001da5 	.word	0x08001da5
 8001e0c:	08001da5 	.word	0x08001da5
 8001e10:	08001eeb 	.word	0x08001eeb
 8001e14:	6833      	ldr	r3, [r6, #0]
 8001e16:	1d1a      	adds	r2, r3, #4
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6032      	str	r2, [r6, #0]
 8001e1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001e20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001e24:	2301      	movs	r3, #1
 8001e26:	e09d      	b.n	8001f64 <_printf_i+0x1e8>
 8001e28:	6833      	ldr	r3, [r6, #0]
 8001e2a:	6820      	ldr	r0, [r4, #0]
 8001e2c:	1d19      	adds	r1, r3, #4
 8001e2e:	6031      	str	r1, [r6, #0]
 8001e30:	0606      	lsls	r6, r0, #24
 8001e32:	d501      	bpl.n	8001e38 <_printf_i+0xbc>
 8001e34:	681d      	ldr	r5, [r3, #0]
 8001e36:	e003      	b.n	8001e40 <_printf_i+0xc4>
 8001e38:	0645      	lsls	r5, r0, #25
 8001e3a:	d5fb      	bpl.n	8001e34 <_printf_i+0xb8>
 8001e3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001e40:	2d00      	cmp	r5, #0
 8001e42:	da03      	bge.n	8001e4c <_printf_i+0xd0>
 8001e44:	232d      	movs	r3, #45	@ 0x2d
 8001e46:	426d      	negs	r5, r5
 8001e48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e4c:	4859      	ldr	r0, [pc, #356]	@ (8001fb4 <_printf_i+0x238>)
 8001e4e:	230a      	movs	r3, #10
 8001e50:	e011      	b.n	8001e76 <_printf_i+0xfa>
 8001e52:	6821      	ldr	r1, [r4, #0]
 8001e54:	6833      	ldr	r3, [r6, #0]
 8001e56:	0608      	lsls	r0, r1, #24
 8001e58:	f853 5b04 	ldr.w	r5, [r3], #4
 8001e5c:	d402      	bmi.n	8001e64 <_printf_i+0xe8>
 8001e5e:	0649      	lsls	r1, r1, #25
 8001e60:	bf48      	it	mi
 8001e62:	b2ad      	uxthmi	r5, r5
 8001e64:	2f6f      	cmp	r7, #111	@ 0x6f
 8001e66:	4853      	ldr	r0, [pc, #332]	@ (8001fb4 <_printf_i+0x238>)
 8001e68:	6033      	str	r3, [r6, #0]
 8001e6a:	bf14      	ite	ne
 8001e6c:	230a      	movne	r3, #10
 8001e6e:	2308      	moveq	r3, #8
 8001e70:	2100      	movs	r1, #0
 8001e72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001e76:	6866      	ldr	r6, [r4, #4]
 8001e78:	60a6      	str	r6, [r4, #8]
 8001e7a:	2e00      	cmp	r6, #0
 8001e7c:	bfa2      	ittt	ge
 8001e7e:	6821      	ldrge	r1, [r4, #0]
 8001e80:	f021 0104 	bicge.w	r1, r1, #4
 8001e84:	6021      	strge	r1, [r4, #0]
 8001e86:	b90d      	cbnz	r5, 8001e8c <_printf_i+0x110>
 8001e88:	2e00      	cmp	r6, #0
 8001e8a:	d04b      	beq.n	8001f24 <_printf_i+0x1a8>
 8001e8c:	4616      	mov	r6, r2
 8001e8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001e92:	fb03 5711 	mls	r7, r3, r1, r5
 8001e96:	5dc7      	ldrb	r7, [r0, r7]
 8001e98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001e9c:	462f      	mov	r7, r5
 8001e9e:	42bb      	cmp	r3, r7
 8001ea0:	460d      	mov	r5, r1
 8001ea2:	d9f4      	bls.n	8001e8e <_printf_i+0x112>
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d10b      	bne.n	8001ec0 <_printf_i+0x144>
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	07df      	lsls	r7, r3, #31
 8001eac:	d508      	bpl.n	8001ec0 <_printf_i+0x144>
 8001eae:	6923      	ldr	r3, [r4, #16]
 8001eb0:	6861      	ldr	r1, [r4, #4]
 8001eb2:	4299      	cmp	r1, r3
 8001eb4:	bfde      	ittt	le
 8001eb6:	2330      	movle	r3, #48	@ 0x30
 8001eb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001ebc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001ec0:	1b92      	subs	r2, r2, r6
 8001ec2:	6122      	str	r2, [r4, #16]
 8001ec4:	f8cd a000 	str.w	sl, [sp]
 8001ec8:	464b      	mov	r3, r9
 8001eca:	aa03      	add	r2, sp, #12
 8001ecc:	4621      	mov	r1, r4
 8001ece:	4640      	mov	r0, r8
 8001ed0:	f7ff fee6 	bl	8001ca0 <_printf_common>
 8001ed4:	3001      	adds	r0, #1
 8001ed6:	d14a      	bne.n	8001f6e <_printf_i+0x1f2>
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	b004      	add	sp, #16
 8001ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ee2:	6823      	ldr	r3, [r4, #0]
 8001ee4:	f043 0320 	orr.w	r3, r3, #32
 8001ee8:	6023      	str	r3, [r4, #0]
 8001eea:	4833      	ldr	r0, [pc, #204]	@ (8001fb8 <_printf_i+0x23c>)
 8001eec:	2778      	movs	r7, #120	@ 0x78
 8001eee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	6831      	ldr	r1, [r6, #0]
 8001ef6:	061f      	lsls	r7, r3, #24
 8001ef8:	f851 5b04 	ldr.w	r5, [r1], #4
 8001efc:	d402      	bmi.n	8001f04 <_printf_i+0x188>
 8001efe:	065f      	lsls	r7, r3, #25
 8001f00:	bf48      	it	mi
 8001f02:	b2ad      	uxthmi	r5, r5
 8001f04:	6031      	str	r1, [r6, #0]
 8001f06:	07d9      	lsls	r1, r3, #31
 8001f08:	bf44      	itt	mi
 8001f0a:	f043 0320 	orrmi.w	r3, r3, #32
 8001f0e:	6023      	strmi	r3, [r4, #0]
 8001f10:	b11d      	cbz	r5, 8001f1a <_printf_i+0x19e>
 8001f12:	2310      	movs	r3, #16
 8001f14:	e7ac      	b.n	8001e70 <_printf_i+0xf4>
 8001f16:	4827      	ldr	r0, [pc, #156]	@ (8001fb4 <_printf_i+0x238>)
 8001f18:	e7e9      	b.n	8001eee <_printf_i+0x172>
 8001f1a:	6823      	ldr	r3, [r4, #0]
 8001f1c:	f023 0320 	bic.w	r3, r3, #32
 8001f20:	6023      	str	r3, [r4, #0]
 8001f22:	e7f6      	b.n	8001f12 <_printf_i+0x196>
 8001f24:	4616      	mov	r6, r2
 8001f26:	e7bd      	b.n	8001ea4 <_printf_i+0x128>
 8001f28:	6833      	ldr	r3, [r6, #0]
 8001f2a:	6825      	ldr	r5, [r4, #0]
 8001f2c:	6961      	ldr	r1, [r4, #20]
 8001f2e:	1d18      	adds	r0, r3, #4
 8001f30:	6030      	str	r0, [r6, #0]
 8001f32:	062e      	lsls	r6, r5, #24
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	d501      	bpl.n	8001f3c <_printf_i+0x1c0>
 8001f38:	6019      	str	r1, [r3, #0]
 8001f3a:	e002      	b.n	8001f42 <_printf_i+0x1c6>
 8001f3c:	0668      	lsls	r0, r5, #25
 8001f3e:	d5fb      	bpl.n	8001f38 <_printf_i+0x1bc>
 8001f40:	8019      	strh	r1, [r3, #0]
 8001f42:	2300      	movs	r3, #0
 8001f44:	6123      	str	r3, [r4, #16]
 8001f46:	4616      	mov	r6, r2
 8001f48:	e7bc      	b.n	8001ec4 <_printf_i+0x148>
 8001f4a:	6833      	ldr	r3, [r6, #0]
 8001f4c:	1d1a      	adds	r2, r3, #4
 8001f4e:	6032      	str	r2, [r6, #0]
 8001f50:	681e      	ldr	r6, [r3, #0]
 8001f52:	6862      	ldr	r2, [r4, #4]
 8001f54:	2100      	movs	r1, #0
 8001f56:	4630      	mov	r0, r6
 8001f58:	f7fe f93a 	bl	80001d0 <memchr>
 8001f5c:	b108      	cbz	r0, 8001f62 <_printf_i+0x1e6>
 8001f5e:	1b80      	subs	r0, r0, r6
 8001f60:	6060      	str	r0, [r4, #4]
 8001f62:	6863      	ldr	r3, [r4, #4]
 8001f64:	6123      	str	r3, [r4, #16]
 8001f66:	2300      	movs	r3, #0
 8001f68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f6c:	e7aa      	b.n	8001ec4 <_printf_i+0x148>
 8001f6e:	6923      	ldr	r3, [r4, #16]
 8001f70:	4632      	mov	r2, r6
 8001f72:	4649      	mov	r1, r9
 8001f74:	4640      	mov	r0, r8
 8001f76:	47d0      	blx	sl
 8001f78:	3001      	adds	r0, #1
 8001f7a:	d0ad      	beq.n	8001ed8 <_printf_i+0x15c>
 8001f7c:	6823      	ldr	r3, [r4, #0]
 8001f7e:	079b      	lsls	r3, r3, #30
 8001f80:	d413      	bmi.n	8001faa <_printf_i+0x22e>
 8001f82:	68e0      	ldr	r0, [r4, #12]
 8001f84:	9b03      	ldr	r3, [sp, #12]
 8001f86:	4298      	cmp	r0, r3
 8001f88:	bfb8      	it	lt
 8001f8a:	4618      	movlt	r0, r3
 8001f8c:	e7a6      	b.n	8001edc <_printf_i+0x160>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	4632      	mov	r2, r6
 8001f92:	4649      	mov	r1, r9
 8001f94:	4640      	mov	r0, r8
 8001f96:	47d0      	blx	sl
 8001f98:	3001      	adds	r0, #1
 8001f9a:	d09d      	beq.n	8001ed8 <_printf_i+0x15c>
 8001f9c:	3501      	adds	r5, #1
 8001f9e:	68e3      	ldr	r3, [r4, #12]
 8001fa0:	9903      	ldr	r1, [sp, #12]
 8001fa2:	1a5b      	subs	r3, r3, r1
 8001fa4:	42ab      	cmp	r3, r5
 8001fa6:	dcf2      	bgt.n	8001f8e <_printf_i+0x212>
 8001fa8:	e7eb      	b.n	8001f82 <_printf_i+0x206>
 8001faa:	2500      	movs	r5, #0
 8001fac:	f104 0619 	add.w	r6, r4, #25
 8001fb0:	e7f5      	b.n	8001f9e <_printf_i+0x222>
 8001fb2:	bf00      	nop
 8001fb4:	08002405 	.word	0x08002405
 8001fb8:	08002416 	.word	0x08002416

08001fbc <__sflush_r>:
 8001fbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fc4:	0716      	lsls	r6, r2, #28
 8001fc6:	4605      	mov	r5, r0
 8001fc8:	460c      	mov	r4, r1
 8001fca:	d454      	bmi.n	8002076 <__sflush_r+0xba>
 8001fcc:	684b      	ldr	r3, [r1, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	dc02      	bgt.n	8001fd8 <__sflush_r+0x1c>
 8001fd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	dd48      	ble.n	800206a <__sflush_r+0xae>
 8001fd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001fda:	2e00      	cmp	r6, #0
 8001fdc:	d045      	beq.n	800206a <__sflush_r+0xae>
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001fe4:	682f      	ldr	r7, [r5, #0]
 8001fe6:	6a21      	ldr	r1, [r4, #32]
 8001fe8:	602b      	str	r3, [r5, #0]
 8001fea:	d030      	beq.n	800204e <__sflush_r+0x92>
 8001fec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001fee:	89a3      	ldrh	r3, [r4, #12]
 8001ff0:	0759      	lsls	r1, r3, #29
 8001ff2:	d505      	bpl.n	8002000 <__sflush_r+0x44>
 8001ff4:	6863      	ldr	r3, [r4, #4]
 8001ff6:	1ad2      	subs	r2, r2, r3
 8001ff8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001ffa:	b10b      	cbz	r3, 8002000 <__sflush_r+0x44>
 8001ffc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ffe:	1ad2      	subs	r2, r2, r3
 8002000:	2300      	movs	r3, #0
 8002002:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002004:	6a21      	ldr	r1, [r4, #32]
 8002006:	4628      	mov	r0, r5
 8002008:	47b0      	blx	r6
 800200a:	1c43      	adds	r3, r0, #1
 800200c:	89a3      	ldrh	r3, [r4, #12]
 800200e:	d106      	bne.n	800201e <__sflush_r+0x62>
 8002010:	6829      	ldr	r1, [r5, #0]
 8002012:	291d      	cmp	r1, #29
 8002014:	d82b      	bhi.n	800206e <__sflush_r+0xb2>
 8002016:	4a2a      	ldr	r2, [pc, #168]	@ (80020c0 <__sflush_r+0x104>)
 8002018:	410a      	asrs	r2, r1
 800201a:	07d6      	lsls	r6, r2, #31
 800201c:	d427      	bmi.n	800206e <__sflush_r+0xb2>
 800201e:	2200      	movs	r2, #0
 8002020:	6062      	str	r2, [r4, #4]
 8002022:	04d9      	lsls	r1, r3, #19
 8002024:	6922      	ldr	r2, [r4, #16]
 8002026:	6022      	str	r2, [r4, #0]
 8002028:	d504      	bpl.n	8002034 <__sflush_r+0x78>
 800202a:	1c42      	adds	r2, r0, #1
 800202c:	d101      	bne.n	8002032 <__sflush_r+0x76>
 800202e:	682b      	ldr	r3, [r5, #0]
 8002030:	b903      	cbnz	r3, 8002034 <__sflush_r+0x78>
 8002032:	6560      	str	r0, [r4, #84]	@ 0x54
 8002034:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002036:	602f      	str	r7, [r5, #0]
 8002038:	b1b9      	cbz	r1, 800206a <__sflush_r+0xae>
 800203a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800203e:	4299      	cmp	r1, r3
 8002040:	d002      	beq.n	8002048 <__sflush_r+0x8c>
 8002042:	4628      	mov	r0, r5
 8002044:	f7ff fbf2 	bl	800182c <_free_r>
 8002048:	2300      	movs	r3, #0
 800204a:	6363      	str	r3, [r4, #52]	@ 0x34
 800204c:	e00d      	b.n	800206a <__sflush_r+0xae>
 800204e:	2301      	movs	r3, #1
 8002050:	4628      	mov	r0, r5
 8002052:	47b0      	blx	r6
 8002054:	4602      	mov	r2, r0
 8002056:	1c50      	adds	r0, r2, #1
 8002058:	d1c9      	bne.n	8001fee <__sflush_r+0x32>
 800205a:	682b      	ldr	r3, [r5, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0c6      	beq.n	8001fee <__sflush_r+0x32>
 8002060:	2b1d      	cmp	r3, #29
 8002062:	d001      	beq.n	8002068 <__sflush_r+0xac>
 8002064:	2b16      	cmp	r3, #22
 8002066:	d11e      	bne.n	80020a6 <__sflush_r+0xea>
 8002068:	602f      	str	r7, [r5, #0]
 800206a:	2000      	movs	r0, #0
 800206c:	e022      	b.n	80020b4 <__sflush_r+0xf8>
 800206e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002072:	b21b      	sxth	r3, r3
 8002074:	e01b      	b.n	80020ae <__sflush_r+0xf2>
 8002076:	690f      	ldr	r7, [r1, #16]
 8002078:	2f00      	cmp	r7, #0
 800207a:	d0f6      	beq.n	800206a <__sflush_r+0xae>
 800207c:	0793      	lsls	r3, r2, #30
 800207e:	680e      	ldr	r6, [r1, #0]
 8002080:	bf08      	it	eq
 8002082:	694b      	ldreq	r3, [r1, #20]
 8002084:	600f      	str	r7, [r1, #0]
 8002086:	bf18      	it	ne
 8002088:	2300      	movne	r3, #0
 800208a:	eba6 0807 	sub.w	r8, r6, r7
 800208e:	608b      	str	r3, [r1, #8]
 8002090:	f1b8 0f00 	cmp.w	r8, #0
 8002094:	dde9      	ble.n	800206a <__sflush_r+0xae>
 8002096:	6a21      	ldr	r1, [r4, #32]
 8002098:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800209a:	4643      	mov	r3, r8
 800209c:	463a      	mov	r2, r7
 800209e:	4628      	mov	r0, r5
 80020a0:	47b0      	blx	r6
 80020a2:	2800      	cmp	r0, #0
 80020a4:	dc08      	bgt.n	80020b8 <__sflush_r+0xfc>
 80020a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020ae:	81a3      	strh	r3, [r4, #12]
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020b8:	4407      	add	r7, r0
 80020ba:	eba8 0800 	sub.w	r8, r8, r0
 80020be:	e7e7      	b.n	8002090 <__sflush_r+0xd4>
 80020c0:	dfbffffe 	.word	0xdfbffffe

080020c4 <_fflush_r>:
 80020c4:	b538      	push	{r3, r4, r5, lr}
 80020c6:	690b      	ldr	r3, [r1, #16]
 80020c8:	4605      	mov	r5, r0
 80020ca:	460c      	mov	r4, r1
 80020cc:	b913      	cbnz	r3, 80020d4 <_fflush_r+0x10>
 80020ce:	2500      	movs	r5, #0
 80020d0:	4628      	mov	r0, r5
 80020d2:	bd38      	pop	{r3, r4, r5, pc}
 80020d4:	b118      	cbz	r0, 80020de <_fflush_r+0x1a>
 80020d6:	6a03      	ldr	r3, [r0, #32]
 80020d8:	b90b      	cbnz	r3, 80020de <_fflush_r+0x1a>
 80020da:	f7ff fa9f 	bl	800161c <__sinit>
 80020de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f3      	beq.n	80020ce <_fflush_r+0xa>
 80020e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80020e8:	07d0      	lsls	r0, r2, #31
 80020ea:	d404      	bmi.n	80020f6 <_fflush_r+0x32>
 80020ec:	0599      	lsls	r1, r3, #22
 80020ee:	d402      	bmi.n	80020f6 <_fflush_r+0x32>
 80020f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020f2:	f7ff fb98 	bl	8001826 <__retarget_lock_acquire_recursive>
 80020f6:	4628      	mov	r0, r5
 80020f8:	4621      	mov	r1, r4
 80020fa:	f7ff ff5f 	bl	8001fbc <__sflush_r>
 80020fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002100:	07da      	lsls	r2, r3, #31
 8002102:	4605      	mov	r5, r0
 8002104:	d4e4      	bmi.n	80020d0 <_fflush_r+0xc>
 8002106:	89a3      	ldrh	r3, [r4, #12]
 8002108:	059b      	lsls	r3, r3, #22
 800210a:	d4e1      	bmi.n	80020d0 <_fflush_r+0xc>
 800210c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800210e:	f7ff fb8b 	bl	8001828 <__retarget_lock_release_recursive>
 8002112:	e7dd      	b.n	80020d0 <_fflush_r+0xc>

08002114 <__swbuf_r>:
 8002114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002116:	460e      	mov	r6, r1
 8002118:	4614      	mov	r4, r2
 800211a:	4605      	mov	r5, r0
 800211c:	b118      	cbz	r0, 8002126 <__swbuf_r+0x12>
 800211e:	6a03      	ldr	r3, [r0, #32]
 8002120:	b90b      	cbnz	r3, 8002126 <__swbuf_r+0x12>
 8002122:	f7ff fa7b 	bl	800161c <__sinit>
 8002126:	69a3      	ldr	r3, [r4, #24]
 8002128:	60a3      	str	r3, [r4, #8]
 800212a:	89a3      	ldrh	r3, [r4, #12]
 800212c:	071a      	lsls	r2, r3, #28
 800212e:	d501      	bpl.n	8002134 <__swbuf_r+0x20>
 8002130:	6923      	ldr	r3, [r4, #16]
 8002132:	b943      	cbnz	r3, 8002146 <__swbuf_r+0x32>
 8002134:	4621      	mov	r1, r4
 8002136:	4628      	mov	r0, r5
 8002138:	f000 f82a 	bl	8002190 <__swsetup_r>
 800213c:	b118      	cbz	r0, 8002146 <__swbuf_r+0x32>
 800213e:	f04f 37ff 	mov.w	r7, #4294967295
 8002142:	4638      	mov	r0, r7
 8002144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	6922      	ldr	r2, [r4, #16]
 800214a:	1a98      	subs	r0, r3, r2
 800214c:	6963      	ldr	r3, [r4, #20]
 800214e:	b2f6      	uxtb	r6, r6
 8002150:	4283      	cmp	r3, r0
 8002152:	4637      	mov	r7, r6
 8002154:	dc05      	bgt.n	8002162 <__swbuf_r+0x4e>
 8002156:	4621      	mov	r1, r4
 8002158:	4628      	mov	r0, r5
 800215a:	f7ff ffb3 	bl	80020c4 <_fflush_r>
 800215e:	2800      	cmp	r0, #0
 8002160:	d1ed      	bne.n	800213e <__swbuf_r+0x2a>
 8002162:	68a3      	ldr	r3, [r4, #8]
 8002164:	3b01      	subs	r3, #1
 8002166:	60a3      	str	r3, [r4, #8]
 8002168:	6823      	ldr	r3, [r4, #0]
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	6022      	str	r2, [r4, #0]
 800216e:	701e      	strb	r6, [r3, #0]
 8002170:	6962      	ldr	r2, [r4, #20]
 8002172:	1c43      	adds	r3, r0, #1
 8002174:	429a      	cmp	r2, r3
 8002176:	d004      	beq.n	8002182 <__swbuf_r+0x6e>
 8002178:	89a3      	ldrh	r3, [r4, #12]
 800217a:	07db      	lsls	r3, r3, #31
 800217c:	d5e1      	bpl.n	8002142 <__swbuf_r+0x2e>
 800217e:	2e0a      	cmp	r6, #10
 8002180:	d1df      	bne.n	8002142 <__swbuf_r+0x2e>
 8002182:	4621      	mov	r1, r4
 8002184:	4628      	mov	r0, r5
 8002186:	f7ff ff9d 	bl	80020c4 <_fflush_r>
 800218a:	2800      	cmp	r0, #0
 800218c:	d0d9      	beq.n	8002142 <__swbuf_r+0x2e>
 800218e:	e7d6      	b.n	800213e <__swbuf_r+0x2a>

08002190 <__swsetup_r>:
 8002190:	b538      	push	{r3, r4, r5, lr}
 8002192:	4b29      	ldr	r3, [pc, #164]	@ (8002238 <__swsetup_r+0xa8>)
 8002194:	4605      	mov	r5, r0
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	460c      	mov	r4, r1
 800219a:	b118      	cbz	r0, 80021a4 <__swsetup_r+0x14>
 800219c:	6a03      	ldr	r3, [r0, #32]
 800219e:	b90b      	cbnz	r3, 80021a4 <__swsetup_r+0x14>
 80021a0:	f7ff fa3c 	bl	800161c <__sinit>
 80021a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021a8:	0719      	lsls	r1, r3, #28
 80021aa:	d422      	bmi.n	80021f2 <__swsetup_r+0x62>
 80021ac:	06da      	lsls	r2, r3, #27
 80021ae:	d407      	bmi.n	80021c0 <__swsetup_r+0x30>
 80021b0:	2209      	movs	r2, #9
 80021b2:	602a      	str	r2, [r5, #0]
 80021b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021b8:	81a3      	strh	r3, [r4, #12]
 80021ba:	f04f 30ff 	mov.w	r0, #4294967295
 80021be:	e033      	b.n	8002228 <__swsetup_r+0x98>
 80021c0:	0758      	lsls	r0, r3, #29
 80021c2:	d512      	bpl.n	80021ea <__swsetup_r+0x5a>
 80021c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80021c6:	b141      	cbz	r1, 80021da <__swsetup_r+0x4a>
 80021c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80021cc:	4299      	cmp	r1, r3
 80021ce:	d002      	beq.n	80021d6 <__swsetup_r+0x46>
 80021d0:	4628      	mov	r0, r5
 80021d2:	f7ff fb2b 	bl	800182c <_free_r>
 80021d6:	2300      	movs	r3, #0
 80021d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80021da:	89a3      	ldrh	r3, [r4, #12]
 80021dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80021e0:	81a3      	strh	r3, [r4, #12]
 80021e2:	2300      	movs	r3, #0
 80021e4:	6063      	str	r3, [r4, #4]
 80021e6:	6923      	ldr	r3, [r4, #16]
 80021e8:	6023      	str	r3, [r4, #0]
 80021ea:	89a3      	ldrh	r3, [r4, #12]
 80021ec:	f043 0308 	orr.w	r3, r3, #8
 80021f0:	81a3      	strh	r3, [r4, #12]
 80021f2:	6923      	ldr	r3, [r4, #16]
 80021f4:	b94b      	cbnz	r3, 800220a <__swsetup_r+0x7a>
 80021f6:	89a3      	ldrh	r3, [r4, #12]
 80021f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80021fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002200:	d003      	beq.n	800220a <__swsetup_r+0x7a>
 8002202:	4621      	mov	r1, r4
 8002204:	4628      	mov	r0, r5
 8002206:	f000 f84f 	bl	80022a8 <__smakebuf_r>
 800220a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800220e:	f013 0201 	ands.w	r2, r3, #1
 8002212:	d00a      	beq.n	800222a <__swsetup_r+0x9a>
 8002214:	2200      	movs	r2, #0
 8002216:	60a2      	str	r2, [r4, #8]
 8002218:	6962      	ldr	r2, [r4, #20]
 800221a:	4252      	negs	r2, r2
 800221c:	61a2      	str	r2, [r4, #24]
 800221e:	6922      	ldr	r2, [r4, #16]
 8002220:	b942      	cbnz	r2, 8002234 <__swsetup_r+0xa4>
 8002222:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002226:	d1c5      	bne.n	80021b4 <__swsetup_r+0x24>
 8002228:	bd38      	pop	{r3, r4, r5, pc}
 800222a:	0799      	lsls	r1, r3, #30
 800222c:	bf58      	it	pl
 800222e:	6962      	ldrpl	r2, [r4, #20]
 8002230:	60a2      	str	r2, [r4, #8]
 8002232:	e7f4      	b.n	800221e <__swsetup_r+0x8e>
 8002234:	2000      	movs	r0, #0
 8002236:	e7f7      	b.n	8002228 <__swsetup_r+0x98>
 8002238:	20000018 	.word	0x20000018

0800223c <_sbrk_r>:
 800223c:	b538      	push	{r3, r4, r5, lr}
 800223e:	4d06      	ldr	r5, [pc, #24]	@ (8002258 <_sbrk_r+0x1c>)
 8002240:	2300      	movs	r3, #0
 8002242:	4604      	mov	r4, r0
 8002244:	4608      	mov	r0, r1
 8002246:	602b      	str	r3, [r5, #0]
 8002248:	f7fe fb3a 	bl	80008c0 <_sbrk>
 800224c:	1c43      	adds	r3, r0, #1
 800224e:	d102      	bne.n	8002256 <_sbrk_r+0x1a>
 8002250:	682b      	ldr	r3, [r5, #0]
 8002252:	b103      	cbz	r3, 8002256 <_sbrk_r+0x1a>
 8002254:	6023      	str	r3, [r4, #0]
 8002256:	bd38      	pop	{r3, r4, r5, pc}
 8002258:	200001c8 	.word	0x200001c8

0800225c <__swhatbuf_r>:
 800225c:	b570      	push	{r4, r5, r6, lr}
 800225e:	460c      	mov	r4, r1
 8002260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002264:	2900      	cmp	r1, #0
 8002266:	b096      	sub	sp, #88	@ 0x58
 8002268:	4615      	mov	r5, r2
 800226a:	461e      	mov	r6, r3
 800226c:	da0d      	bge.n	800228a <__swhatbuf_r+0x2e>
 800226e:	89a3      	ldrh	r3, [r4, #12]
 8002270:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002274:	f04f 0100 	mov.w	r1, #0
 8002278:	bf14      	ite	ne
 800227a:	2340      	movne	r3, #64	@ 0x40
 800227c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002280:	2000      	movs	r0, #0
 8002282:	6031      	str	r1, [r6, #0]
 8002284:	602b      	str	r3, [r5, #0]
 8002286:	b016      	add	sp, #88	@ 0x58
 8002288:	bd70      	pop	{r4, r5, r6, pc}
 800228a:	466a      	mov	r2, sp
 800228c:	f000 f848 	bl	8002320 <_fstat_r>
 8002290:	2800      	cmp	r0, #0
 8002292:	dbec      	blt.n	800226e <__swhatbuf_r+0x12>
 8002294:	9901      	ldr	r1, [sp, #4]
 8002296:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800229a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800229e:	4259      	negs	r1, r3
 80022a0:	4159      	adcs	r1, r3
 80022a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022a6:	e7eb      	b.n	8002280 <__swhatbuf_r+0x24>

080022a8 <__smakebuf_r>:
 80022a8:	898b      	ldrh	r3, [r1, #12]
 80022aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022ac:	079d      	lsls	r5, r3, #30
 80022ae:	4606      	mov	r6, r0
 80022b0:	460c      	mov	r4, r1
 80022b2:	d507      	bpl.n	80022c4 <__smakebuf_r+0x1c>
 80022b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80022b8:	6023      	str	r3, [r4, #0]
 80022ba:	6123      	str	r3, [r4, #16]
 80022bc:	2301      	movs	r3, #1
 80022be:	6163      	str	r3, [r4, #20]
 80022c0:	b003      	add	sp, #12
 80022c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022c4:	ab01      	add	r3, sp, #4
 80022c6:	466a      	mov	r2, sp
 80022c8:	f7ff ffc8 	bl	800225c <__swhatbuf_r>
 80022cc:	9f00      	ldr	r7, [sp, #0]
 80022ce:	4605      	mov	r5, r0
 80022d0:	4639      	mov	r1, r7
 80022d2:	4630      	mov	r0, r6
 80022d4:	f7ff fb16 	bl	8001904 <_malloc_r>
 80022d8:	b948      	cbnz	r0, 80022ee <__smakebuf_r+0x46>
 80022da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022de:	059a      	lsls	r2, r3, #22
 80022e0:	d4ee      	bmi.n	80022c0 <__smakebuf_r+0x18>
 80022e2:	f023 0303 	bic.w	r3, r3, #3
 80022e6:	f043 0302 	orr.w	r3, r3, #2
 80022ea:	81a3      	strh	r3, [r4, #12]
 80022ec:	e7e2      	b.n	80022b4 <__smakebuf_r+0xc>
 80022ee:	89a3      	ldrh	r3, [r4, #12]
 80022f0:	6020      	str	r0, [r4, #0]
 80022f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022f6:	81a3      	strh	r3, [r4, #12]
 80022f8:	9b01      	ldr	r3, [sp, #4]
 80022fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80022fe:	b15b      	cbz	r3, 8002318 <__smakebuf_r+0x70>
 8002300:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002304:	4630      	mov	r0, r6
 8002306:	f000 f81d 	bl	8002344 <_isatty_r>
 800230a:	b128      	cbz	r0, 8002318 <__smakebuf_r+0x70>
 800230c:	89a3      	ldrh	r3, [r4, #12]
 800230e:	f023 0303 	bic.w	r3, r3, #3
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	81a3      	strh	r3, [r4, #12]
 8002318:	89a3      	ldrh	r3, [r4, #12]
 800231a:	431d      	orrs	r5, r3
 800231c:	81a5      	strh	r5, [r4, #12]
 800231e:	e7cf      	b.n	80022c0 <__smakebuf_r+0x18>

08002320 <_fstat_r>:
 8002320:	b538      	push	{r3, r4, r5, lr}
 8002322:	4d07      	ldr	r5, [pc, #28]	@ (8002340 <_fstat_r+0x20>)
 8002324:	2300      	movs	r3, #0
 8002326:	4604      	mov	r4, r0
 8002328:	4608      	mov	r0, r1
 800232a:	4611      	mov	r1, r2
 800232c:	602b      	str	r3, [r5, #0]
 800232e:	f7fe fa9f 	bl	8000870 <_fstat>
 8002332:	1c43      	adds	r3, r0, #1
 8002334:	d102      	bne.n	800233c <_fstat_r+0x1c>
 8002336:	682b      	ldr	r3, [r5, #0]
 8002338:	b103      	cbz	r3, 800233c <_fstat_r+0x1c>
 800233a:	6023      	str	r3, [r4, #0]
 800233c:	bd38      	pop	{r3, r4, r5, pc}
 800233e:	bf00      	nop
 8002340:	200001c8 	.word	0x200001c8

08002344 <_isatty_r>:
 8002344:	b538      	push	{r3, r4, r5, lr}
 8002346:	4d06      	ldr	r5, [pc, #24]	@ (8002360 <_isatty_r+0x1c>)
 8002348:	2300      	movs	r3, #0
 800234a:	4604      	mov	r4, r0
 800234c:	4608      	mov	r0, r1
 800234e:	602b      	str	r3, [r5, #0]
 8002350:	f7fe fa9e 	bl	8000890 <_isatty>
 8002354:	1c43      	adds	r3, r0, #1
 8002356:	d102      	bne.n	800235e <_isatty_r+0x1a>
 8002358:	682b      	ldr	r3, [r5, #0]
 800235a:	b103      	cbz	r3, 800235e <_isatty_r+0x1a>
 800235c:	6023      	str	r3, [r4, #0]
 800235e:	bd38      	pop	{r3, r4, r5, pc}
 8002360:	200001c8 	.word	0x200001c8

08002364 <_init>:
 8002364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002366:	bf00      	nop
 8002368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800236a:	bc08      	pop	{r3}
 800236c:	469e      	mov	lr, r3
 800236e:	4770      	bx	lr

08002370 <_fini>:
 8002370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002372:	bf00      	nop
 8002374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002376:	bc08      	pop	{r3}
 8002378:	469e      	mov	lr, r3
 800237a:	4770      	bx	lr
