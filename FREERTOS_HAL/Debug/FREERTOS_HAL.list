
FREERTOS_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08005a74  08005a74  00015a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c14  08005c14  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08005c14  08005c14  00015c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c1c  08005c1c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c1c  08005c1c  00015c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c20  08005c20  00015c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08005c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          00004094  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000412c  2000412c  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012723  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c50  00000000  00000000  000327eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  00035440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ed0  00000000  00000000  00036458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023541  00000000  00000000  00037328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000119d8  00000000  00000000  0005a869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d301a  00000000  00000000  0006c241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013f25b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a38  00000000  00000000  0013f2ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a5c 	.word	0x08005a5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08005a5c 	.word	0x08005a5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <vApplicationGetIdleTaskMemory+0x30>)
 800058a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	200000b4 	.word	0x200000b4
 80005a4:	20000168 	.word	0x20000168

080005a8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d013      	beq.n	80005e8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005c8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d00b      	beq.n	80005e8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d0:	e000      	b.n	80005d4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005d2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0f9      	beq.n	80005d2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005de:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	b2d2      	uxtb	r2, r2
 80005e6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005e8:	687b      	ldr	r3, [r7, #4]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <_write>:
void handleTask(uint32_t task, uint16_t led, uint16_t pin, GPIO_TypeDef *port);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b086      	sub	sp, #24
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	60f8      	str	r0, [r7, #12]
 80005fe:	60b9      	str	r1, [r7, #8]
 8000600:	607a      	str	r2, [r7, #4]
  for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	e009      	b.n	800061c <_write+0x26>
    ITM_SendChar(*ptr++);
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	1c5a      	adds	r2, r3, #1
 800060c:	60ba      	str	r2, [r7, #8]
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ffc9 	bl	80005a8 <ITM_SendChar>
  for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	3301      	adds	r3, #1
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	697a      	ldr	r2, [r7, #20]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	429a      	cmp	r2, r3
 8000622:	dbf1      	blt.n	8000608 <_write+0x12>
  return len;
 8000624:	687b      	ldr	r3, [r7, #4]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <handleTask>:


void handleTask(uint32_t task, uint16_t led, uint16_t pin, GPIO_TypeDef *port)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	460b      	mov	r3, r1
 800063c:	817b      	strh	r3, [r7, #10]
 800063e:	4613      	mov	r3, r2
 8000640:	813b      	strh	r3, [r7, #8]
	osMutexWait(myMutex01Handle, osWaitForever);
 8000642:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <handleTask+0xa8>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f04f 31ff 	mov.w	r1, #4294967295
 800064a:	4618      	mov	r0, r3
 800064c:	f001 fe1a 	bl	8002284 <osMutexWait>

	printf("\nTask %ld starts\n", task);
 8000650:	68f9      	ldr	r1, [r7, #12]
 8000652:	4822      	ldr	r0, [pc, #136]	; (80006dc <handleTask+0xac>)
 8000654:	f004 fb20 	bl	8004c98 <iprintf>
	printf("LED %d ON\n", led);
 8000658:	897b      	ldrh	r3, [r7, #10]
 800065a:	4619      	mov	r1, r3
 800065c:	4820      	ldr	r0, [pc, #128]	; (80006e0 <handleTask+0xb0>)
 800065e:	f004 fb1b 	bl	8004c98 <iprintf>
	HAL_GPIO_WritePin(port, pin, 1);
 8000662:	893b      	ldrh	r3, [r7, #8]
 8000664:	2201      	movs	r2, #1
 8000666:	4619      	mov	r1, r3
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 fe23 	bl	80012b4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800066e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000672:	f000 fb65 	bl	8000d40 <HAL_Delay>

	printf("Waiting for pressed button\n");
 8000676:	481b      	ldr	r0, [pc, #108]	; (80006e4 <handleTask+0xb4>)
 8000678:	f004 fb94 	bl	8004da4 <puts>
	if (HAL_GPIO_ReadPin(btn_GPIO_Port, btn_Pin) == 0)
 800067c:	2101      	movs	r1, #1
 800067e:	481a      	ldr	r0, [pc, #104]	; (80006e8 <handleTask+0xb8>)
 8000680:	f000 fe00 	bl	8001284 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d107      	bne.n	800069a <handleTask+0x6a>
		while (HAL_GPIO_ReadPin(btn_GPIO_Port, btn_Pin) == 0);
 800068a:	bf00      	nop
 800068c:	2101      	movs	r1, #1
 800068e:	4816      	ldr	r0, [pc, #88]	; (80006e8 <handleTask+0xb8>)
 8000690:	f000 fdf8 	bl	8001284 <HAL_GPIO_ReadPin>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d0f8      	beq.n	800068c <handleTask+0x5c>
	printf("Button is pressed\n");
 800069a:	4814      	ldr	r0, [pc, #80]	; (80006ec <handleTask+0xbc>)
 800069c:	f004 fb82 	bl	8004da4 <puts>

	HAL_GPIO_WritePin(port, pin, 0);
 80006a0:	893b      	ldrh	r3, [r7, #8]
 80006a2:	2200      	movs	r2, #0
 80006a4:	4619      	mov	r1, r3
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f000 fe04 	bl	80012b4 <HAL_GPIO_WritePin>
	printf("LED %d OFF\n", led);
 80006ac:	897b      	ldrh	r3, [r7, #10]
 80006ae:	4619      	mov	r1, r3
 80006b0:	480f      	ldr	r0, [pc, #60]	; (80006f0 <handleTask+0xc0>)
 80006b2:	f004 faf1 	bl	8004c98 <iprintf>
	printf("Task %ld finishes\n", task);
 80006b6:	68f9      	ldr	r1, [r7, #12]
 80006b8:	480e      	ldr	r0, [pc, #56]	; (80006f4 <handleTask+0xc4>)
 80006ba:	f004 faed 	bl	8004c98 <iprintf>

	osMutexRelease(myMutex01Handle);
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <handleTask+0xa8>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fe2c 	bl	8002320 <osMutexRelease>
	osDelay(200);
 80006c8:	20c8      	movs	r0, #200	; 0xc8
 80006ca:	f001 fdae 	bl	800222a <osDelay>
}
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000374 	.word	0x20000374
 80006dc:	08005a98 	.word	0x08005a98
 80006e0:	08005aac 	.word	0x08005aac
 80006e4:	08005ab8 	.word	0x08005ab8
 80006e8:	40020000 	.word	0x40020000
 80006ec:	08005ad4 	.word	0x08005ad4
 80006f0:	08005ae8 	.word	0x08005ae8
 80006f4:	08005af4 	.word	0x08005af4

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b5b0      	push	{r4, r5, r7, lr}
 80006fa:	b098      	sub	sp, #96	; 0x60
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fe:	f000 fadd 	bl	8000cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000702:	f000 f85d 	bl	80007c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000706:	f000 f8b9 	bl	800087c <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 800070a:	2300      	movs	r3, #0
 800070c:	65bb      	str	r3, [r7, #88]	; 0x58
 800070e:	2300      	movs	r3, #0
 8000710:	65fb      	str	r3, [r7, #92]	; 0x5c
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8000712:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000716:	4618      	mov	r0, r3
 8000718:	f001 fd9b 	bl	8002252 <osMutexCreate>
 800071c:	4603      	mov	r3, r0
 800071e:	4a1e      	ldr	r2, [pc, #120]	; (8000798 <main+0xa0>)
 8000720:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ctrl_led1 */
  osThreadDef(ctrl_led1, ctrl_led1_entry, osPriorityNormal, 0, 128);
 8000722:	4b1e      	ldr	r3, [pc, #120]	; (800079c <main+0xa4>)
 8000724:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000728:	461d      	mov	r5, r3
 800072a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000732:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ctrl_led1Handle = osThreadCreate(osThread(ctrl_led1), (void*) &ctrl_led1_instance);
 8000736:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800073a:	4919      	ldr	r1, [pc, #100]	; (80007a0 <main+0xa8>)
 800073c:	4618      	mov	r0, r3
 800073e:	f001 fd28 	bl	8002192 <osThreadCreate>
 8000742:	4603      	mov	r3, r0
 8000744:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <main+0xac>)
 8000746:	6013      	str	r3, [r2, #0]

  /* definition and creation of ctrl_led2 */
  osThreadDef(ctrl_led2, ctrl_led2_entry, osPriorityNormal, 0, 128);
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <main+0xb0>)
 800074a:	f107 0420 	add.w	r4, r7, #32
 800074e:	461d      	mov	r5, r3
 8000750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000754:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000758:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ctrl_led2Handle = osThreadCreate(osThread(ctrl_led2), (void*) &ctrl_led2_instance);
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	4912      	ldr	r1, [pc, #72]	; (80007ac <main+0xb4>)
 8000762:	4618      	mov	r0, r3
 8000764:	f001 fd15 	bl	8002192 <osThreadCreate>
 8000768:	4603      	mov	r3, r0
 800076a:	4a11      	ldr	r2, [pc, #68]	; (80007b0 <main+0xb8>)
 800076c:	6013      	str	r3, [r2, #0]

  /* definition and creation of ctrl_led3 */
  osThreadDef(ctrl_led3, ctrl_led3_entry, osPriorityNormal, 0, 128);
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <main+0xbc>)
 8000770:	1d3c      	adds	r4, r7, #4
 8000772:	461d      	mov	r5, r3
 8000774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000778:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800077c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ctrl_led3Handle = osThreadCreate(osThread(ctrl_led3), (void*) &ctrl_led3_instance);
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	490d      	ldr	r1, [pc, #52]	; (80007b8 <main+0xc0>)
 8000784:	4618      	mov	r0, r3
 8000786:	f001 fd04 	bl	8002192 <osThreadCreate>
 800078a:	4603      	mov	r3, r0
 800078c:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <main+0xc4>)
 800078e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000790:	f001 fcf8 	bl	8002184 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000794:	e7fe      	b.n	8000794 <main+0x9c>
 8000796:	bf00      	nop
 8000798:	20000374 	.word	0x20000374
 800079c:	08005b08 	.word	0x08005b08
 80007a0:	20000000 	.word	0x20000000
 80007a4:	20000368 	.word	0x20000368
 80007a8:	08005b24 	.word	0x08005b24
 80007ac:	2000000c 	.word	0x2000000c
 80007b0:	2000036c 	.word	0x2000036c
 80007b4:	08005b40 	.word	0x08005b40
 80007b8:	20000018 	.word	0x20000018
 80007bc:	20000370 	.word	0x20000370

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b094      	sub	sp, #80	; 0x50
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	2230      	movs	r2, #48	; 0x30
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f004 f9c5 	bl	8004b5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	4b22      	ldr	r3, [pc, #136]	; (8000874 <SystemClock_Config+0xb4>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	4a21      	ldr	r2, [pc, #132]	; (8000874 <SystemClock_Config+0xb4>)
 80007ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f2:	6413      	str	r3, [r2, #64]	; 0x40
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <SystemClock_Config+0xb4>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <SystemClock_Config+0xb8>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a1b      	ldr	r2, [pc, #108]	; (8000878 <SystemClock_Config+0xb8>)
 800080a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080e:	6013      	str	r3, [r2, #0]
 8000810:	4b19      	ldr	r3, [pc, #100]	; (8000878 <SystemClock_Config+0xb8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800081c:	2302      	movs	r3, #2
 800081e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000820:	2301      	movs	r3, #1
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000824:	2310      	movs	r3, #16
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000828:	2300      	movs	r3, #0
 800082a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 0320 	add.w	r3, r7, #32
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fd59 	bl	80012e8 <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800083c:	f000 f8b6 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000840:	230f      	movs	r3, #15
 8000842:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000844:	2300      	movs	r3, #0
 8000846:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f000 ffbc 	bl	80017d8 <HAL_RCC_ClockConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000866:	f000 f8a1 	bl	80009ac <Error_Handler>
  }
}
 800086a:	bf00      	nop
 800086c:	3750      	adds	r7, #80	; 0x50
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40007000 	.word	0x40007000

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_GPIO_Init+0x98>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a1e      	ldr	r2, [pc, #120]	; (8000914 <MX_GPIO_Init+0x98>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_GPIO_Init+0x98>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_GPIO_Init+0x98>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a17      	ldr	r2, [pc, #92]	; (8000914 <MX_GPIO_Init+0x98>)
 80008b8:	f043 0308 	orr.w	r3, r3, #8
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_GPIO_Init+0x98>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0308 	and.w	r3, r3, #8
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led1_Pin|led2_Pin|led3_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80008d0:	4811      	ldr	r0, [pc, #68]	; (8000918 <MX_GPIO_Init+0x9c>)
 80008d2:	f000 fcef 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : btn_Pin */
  GPIO_InitStruct.Pin = btn_Pin;
 80008d6:	2301      	movs	r3, #1
 80008d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(btn_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	4619      	mov	r1, r3
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <MX_GPIO_Init+0xa0>)
 80008ea:	f000 fb2f 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : led1_Pin led2_Pin led3_Pin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|led3_Pin;
 80008ee:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80008f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	4619      	mov	r1, r3
 8000906:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_GPIO_Init+0x9c>)
 8000908:	f000 fb20 	bl	8000f4c <HAL_GPIO_Init>

}
 800090c:	bf00      	nop
 800090e:	3720      	adds	r7, #32
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40020c00 	.word	0x40020c00
 800091c:	40020000 	.word	0x40020000

08000920 <ctrl_led1_entry>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ctrl_led1_entry */
void ctrl_led1_entry(void const * argument)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  led_ctrl_t *args = (led_ctrl_t *) argument;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	60fb      	str	r3, [r7, #12]
	  handleTask(args->task, args->led, args->pin, args->port);
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	6818      	ldr	r0, [r3, #0]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	8899      	ldrh	r1, [r3, #4]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	88da      	ldrh	r2, [r3, #6]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	f7ff fe78 	bl	8000630 <handleTask>
  {
 8000940:	e7f2      	b.n	8000928 <ctrl_led1_entry+0x8>

08000942 <ctrl_led2_entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ctrl_led2_entry */
void ctrl_led2_entry(void const * argument)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b084      	sub	sp, #16
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ctrl_led2_entry */
  /* Infinite loop */
  for(;;)
  {
	  led_ctrl_t *args = (led_ctrl_t *) argument;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	60fb      	str	r3, [r7, #12]
	  handleTask(args->task, args->led, args->pin, args->port);
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	8899      	ldrh	r1, [r3, #4]
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	88da      	ldrh	r2, [r3, #6]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	f7ff fe67 	bl	8000630 <handleTask>
  {
 8000962:	e7f2      	b.n	800094a <ctrl_led2_entry+0x8>

08000964 <ctrl_led3_entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ctrl_led3_entry */
void ctrl_led3_entry(void const * argument)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ctrl_led3_entry */
  /* Infinite loop */
  for(;;)
  {
	  led_ctrl_t *args = (led_ctrl_t *) argument;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	60fb      	str	r3, [r7, #12]
	  handleTask(args->task, args->led, args->pin, args->port);
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	6818      	ldr	r0, [r3, #0]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	8899      	ldrh	r1, [r3, #4]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	88da      	ldrh	r2, [r3, #6]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	f7ff fe56 	bl	8000630 <handleTask>
  {
 8000984:	e7f2      	b.n	800096c <ctrl_led3_entry+0x8>
	...

08000988 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d101      	bne.n	800099e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800099a:	f000 f9b1 	bl	8000d00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40010000 	.word	0x40010000

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_MspInit+0x54>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	4a11      	ldr	r2, [pc, #68]	; (8000a0c <HAL_MspInit+0x54>)
 80009c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009cc:	6453      	str	r3, [r2, #68]	; 0x44
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_MspInit+0x54>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <HAL_MspInit+0x54>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_MspInit+0x54>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_MspInit+0x54>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	210f      	movs	r1, #15
 80009fa:	f06f 0001 	mvn.w	r0, #1
 80009fe:	f000 fa7b 	bl	8000ef8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08c      	sub	sp, #48	; 0x30
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	4b2e      	ldr	r3, [pc, #184]	; (8000ae0 <HAL_InitTick+0xd0>)
 8000a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a28:	4a2d      	ldr	r2, [pc, #180]	; (8000ae0 <HAL_InitTick+0xd0>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	6453      	str	r3, [r2, #68]	; 0x44
 8000a30:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <HAL_InitTick+0xd0>)
 8000a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a3c:	f107 020c 	add.w	r2, r7, #12
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	4611      	mov	r1, r2
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 f892 	bl	8001b70 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a4c:	f001 f87c 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 8000a50:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a54:	4a23      	ldr	r2, [pc, #140]	; (8000ae4 <HAL_InitTick+0xd4>)
 8000a56:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5a:	0c9b      	lsrs	r3, r3, #18
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a60:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <HAL_InitTick+0xd8>)
 8000a62:	4a22      	ldr	r2, [pc, #136]	; (8000aec <HAL_InitTick+0xdc>)
 8000a64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a66:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <HAL_InitTick+0xd8>)
 8000a68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a6c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a6e:	4a1e      	ldr	r2, [pc, #120]	; (8000ae8 <HAL_InitTick+0xd8>)
 8000a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a72:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <HAL_InitTick+0xd8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <HAL_InitTick+0xd8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <HAL_InitTick+0xd8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a86:	4818      	ldr	r0, [pc, #96]	; (8000ae8 <HAL_InitTick+0xd8>)
 8000a88:	f001 f8a4 	bl	8001bd4 <HAL_TIM_Base_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d11b      	bne.n	8000ad2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a9a:	4813      	ldr	r0, [pc, #76]	; (8000ae8 <HAL_InitTick+0xd8>)
 8000a9c:	f001 f8f4 	bl	8001c88 <HAL_TIM_Base_Start_IT>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d111      	bne.n	8000ad2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000aae:	2019      	movs	r0, #25
 8000ab0:	f000 fa3e 	bl	8000f30 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b0f      	cmp	r3, #15
 8000ab8:	d808      	bhi.n	8000acc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000aba:	2200      	movs	r2, #0
 8000abc:	6879      	ldr	r1, [r7, #4]
 8000abe:	2019      	movs	r0, #25
 8000ac0:	f000 fa1a 	bl	8000ef8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac4:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <HAL_InitTick+0xe0>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6013      	str	r3, [r2, #0]
 8000aca:	e002      	b.n	8000ad2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000acc:	2301      	movs	r3, #1
 8000ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3730      	adds	r7, #48	; 0x30
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	431bde83 	.word	0x431bde83
 8000ae8:	20000378 	.word	0x20000378
 8000aec:	40010000 	.word	0x40010000
 8000af0:	20000028 	.word	0x20000028

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b26:	f001 f91f 	bl	8001d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000378 	.word	0x20000378

08000b34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	e00a      	b.n	8000b5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b46:	f3af 8000 	nop.w
 8000b4a:	4601      	mov	r1, r0
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	60ba      	str	r2, [r7, #8]
 8000b52:	b2ca      	uxtb	r2, r1
 8000b54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbf0      	blt.n	8000b46 <_read+0x12>
  }

  return len;
 8000b64:	687b      	ldr	r3, [r7, #4]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b96:	605a      	str	r2, [r3, #4]
  return 0;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_isatty>:

int _isatty(int file)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be0:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <_sbrk+0x5c>)
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <_sbrk+0x60>)
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <_sbrk+0x64>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <_sbrk+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d207      	bcs.n	8000c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c08:	f003 fe78 	bl	80048fc <__errno>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	220c      	movs	r2, #12
 8000c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	e009      	b.n	8000c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <_sbrk+0x64>)
 8000c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20020000 	.word	0x20020000
 8000c38:	00000400 	.word	0x00000400
 8000c3c:	200003c0 	.word	0x200003c0
 8000c40:	20004130 	.word	0x20004130

08000c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c6e:	490e      	ldr	r1, [pc, #56]	; (8000ca8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c70:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c84:	4c0b      	ldr	r4, [pc, #44]	; (8000cb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c92:	f7ff ffd7 	bl	8000c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c96:	f003 ff2d 	bl	8004af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9a:	f7ff fd2d 	bl	80006f8 <main>
  bx  lr    
 8000c9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ca0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000cac:	08005c24 	.word	0x08005c24
  ldr r2, =_sbss
 8000cb0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000cb4:	2000412c 	.word	0x2000412c

08000cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC_IRQHandler>
	...

08000cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <HAL_Init+0x40>)
 8000cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_Init+0x40>)
 8000cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_Init+0x40>)
 8000cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f8fc 	bl	8000ee2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cea:	200f      	movs	r0, #15
 8000cec:	f7ff fe90 	bl	8000a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf0:	f7ff fe62 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023c00 	.word	0x40023c00

08000d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	2000002c 	.word	0x2000002c
 8000d24:	200003c4 	.word	0x200003c4

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	200003c4 	.word	0x200003c4

08000d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d48:	f7ff ffee 	bl	8000d28 <HAL_GetTick>
 8000d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d58:	d005      	beq.n	8000d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_Delay+0x44>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4413      	add	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d66:	bf00      	nop
 8000d68:	f7ff ffde 	bl	8000d28 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d8f7      	bhi.n	8000d68 <HAL_Delay+0x28>
  {
  }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	2000002c 	.word	0x2000002c

08000d88 <__NVIC_SetPriorityGrouping>:
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	60d3      	str	r3, [r2, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_GetPriorityGrouping>:
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_EnableIRQ>:
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	db0b      	blt.n	8000e16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	f003 021f 	and.w	r2, r3, #31
 8000e04:	4907      	ldr	r1, [pc, #28]	; (8000e24 <__NVIC_EnableIRQ+0x38>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	095b      	lsrs	r3, r3, #5
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000e100 	.word	0xe000e100

08000e28 <__NVIC_SetPriority>:
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	; (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ff4c 	bl	8000d88 <__NVIC_SetPriorityGrouping>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
 8000f04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0a:	f7ff ff61 	bl	8000dd0 <__NVIC_GetPriorityGrouping>
 8000f0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	68b9      	ldr	r1, [r7, #8]
 8000f14:	6978      	ldr	r0, [r7, #20]
 8000f16:	f7ff ffb1 	bl	8000e7c <NVIC_EncodePriority>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff80 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f28:	bf00      	nop
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ff54 	bl	8000dec <__NVIC_EnableIRQ>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
 8000f66:	e16b      	b.n	8001240 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	f040 815a 	bne.w	800123a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d005      	beq.n	8000f9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d130      	bne.n	8001000 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	2203      	movs	r2, #3
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	091b      	lsrs	r3, r3, #4
 8000fea:	f003 0201 	and.w	r2, r3, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b03      	cmp	r3, #3
 800100a:	d017      	beq.n	800103c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d123      	bne.n	8001090 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	08da      	lsrs	r2, r3, #3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3208      	adds	r2, #8
 8001050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	220f      	movs	r2, #15
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	691a      	ldr	r2, [r3, #16]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	08da      	lsrs	r2, r3, #3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3208      	adds	r2, #8
 800108a:	69b9      	ldr	r1, [r7, #24]
 800108c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0203 	and.w	r2, r3, #3
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 80b4 	beq.w	800123a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	4b60      	ldr	r3, [pc, #384]	; (8001258 <HAL_GPIO_Init+0x30c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a5f      	ldr	r2, [pc, #380]	; (8001258 <HAL_GPIO_Init+0x30c>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b5d      	ldr	r3, [pc, #372]	; (8001258 <HAL_GPIO_Init+0x30c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ee:	4a5b      	ldr	r2, [pc, #364]	; (800125c <HAL_GPIO_Init+0x310>)
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3302      	adds	r3, #2
 80010f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	220f      	movs	r2, #15
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a52      	ldr	r2, [pc, #328]	; (8001260 <HAL_GPIO_Init+0x314>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d02b      	beq.n	8001172 <HAL_GPIO_Init+0x226>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a51      	ldr	r2, [pc, #324]	; (8001264 <HAL_GPIO_Init+0x318>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d025      	beq.n	800116e <HAL_GPIO_Init+0x222>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a50      	ldr	r2, [pc, #320]	; (8001268 <HAL_GPIO_Init+0x31c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d01f      	beq.n	800116a <HAL_GPIO_Init+0x21e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4f      	ldr	r2, [pc, #316]	; (800126c <HAL_GPIO_Init+0x320>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d019      	beq.n	8001166 <HAL_GPIO_Init+0x21a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4e      	ldr	r2, [pc, #312]	; (8001270 <HAL_GPIO_Init+0x324>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d013      	beq.n	8001162 <HAL_GPIO_Init+0x216>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4d      	ldr	r2, [pc, #308]	; (8001274 <HAL_GPIO_Init+0x328>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d00d      	beq.n	800115e <HAL_GPIO_Init+0x212>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4c      	ldr	r2, [pc, #304]	; (8001278 <HAL_GPIO_Init+0x32c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d007      	beq.n	800115a <HAL_GPIO_Init+0x20e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4b      	ldr	r2, [pc, #300]	; (800127c <HAL_GPIO_Init+0x330>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_GPIO_Init+0x20a>
 8001152:	2307      	movs	r3, #7
 8001154:	e00e      	b.n	8001174 <HAL_GPIO_Init+0x228>
 8001156:	2308      	movs	r3, #8
 8001158:	e00c      	b.n	8001174 <HAL_GPIO_Init+0x228>
 800115a:	2306      	movs	r3, #6
 800115c:	e00a      	b.n	8001174 <HAL_GPIO_Init+0x228>
 800115e:	2305      	movs	r3, #5
 8001160:	e008      	b.n	8001174 <HAL_GPIO_Init+0x228>
 8001162:	2304      	movs	r3, #4
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x228>
 8001166:	2303      	movs	r3, #3
 8001168:	e004      	b.n	8001174 <HAL_GPIO_Init+0x228>
 800116a:	2302      	movs	r3, #2
 800116c:	e002      	b.n	8001174 <HAL_GPIO_Init+0x228>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <HAL_GPIO_Init+0x228>
 8001172:	2300      	movs	r3, #0
 8001174:	69fa      	ldr	r2, [r7, #28]
 8001176:	f002 0203 	and.w	r2, r2, #3
 800117a:	0092      	lsls	r2, r2, #2
 800117c:	4093      	lsls	r3, r2
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001184:	4935      	ldr	r1, [pc, #212]	; (800125c <HAL_GPIO_Init+0x310>)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	3302      	adds	r3, #2
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001192:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <HAL_GPIO_Init+0x334>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011b6:	4a32      	ldr	r2, [pc, #200]	; (8001280 <HAL_GPIO_Init+0x334>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011bc:	4b30      	ldr	r3, [pc, #192]	; (8001280 <HAL_GPIO_Init+0x334>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e0:	4a27      	ldr	r2, [pc, #156]	; (8001280 <HAL_GPIO_Init+0x334>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <HAL_GPIO_Init+0x334>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800120a:	4a1d      	ldr	r2, [pc, #116]	; (8001280 <HAL_GPIO_Init+0x334>)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <HAL_GPIO_Init+0x334>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001234:	4a12      	ldr	r2, [pc, #72]	; (8001280 <HAL_GPIO_Init+0x334>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3301      	adds	r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	2b0f      	cmp	r3, #15
 8001244:	f67f ae90 	bls.w	8000f68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3724      	adds	r7, #36	; 0x24
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	40013800 	.word	0x40013800
 8001260:	40020000 	.word	0x40020000
 8001264:	40020400 	.word	0x40020400
 8001268:	40020800 	.word	0x40020800
 800126c:	40020c00 	.word	0x40020c00
 8001270:	40021000 	.word	0x40021000
 8001274:	40021400 	.word	0x40021400
 8001278:	40021800 	.word	0x40021800
 800127c:	40021c00 	.word	0x40021c00
 8001280:	40013c00 	.word	0x40013c00

08001284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	887b      	ldrh	r3, [r7, #2]
 8001296:	4013      	ands	r3, r2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d002      	beq.n	80012a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800129c:	2301      	movs	r3, #1
 800129e:	73fb      	strb	r3, [r7, #15]
 80012a0:	e001      	b.n	80012a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
 80012c0:	4613      	mov	r3, r2
 80012c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c4:	787b      	ldrb	r3, [r7, #1]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012d0:	e003      	b.n	80012da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	041a      	lsls	r2, r3, #16
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	619a      	str	r2, [r3, #24]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e267      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d075      	beq.n	80013f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001306:	4b88      	ldr	r3, [pc, #544]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	2b04      	cmp	r3, #4
 8001310:	d00c      	beq.n	800132c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001312:	4b85      	ldr	r3, [pc, #532]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800131a:	2b08      	cmp	r3, #8
 800131c:	d112      	bne.n	8001344 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800131e:	4b82      	ldr	r3, [pc, #520]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800132a:	d10b      	bne.n	8001344 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132c:	4b7e      	ldr	r3, [pc, #504]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d05b      	beq.n	80013f0 <HAL_RCC_OscConfig+0x108>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d157      	bne.n	80013f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e242      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134c:	d106      	bne.n	800135c <HAL_RCC_OscConfig+0x74>
 800134e:	4b76      	ldr	r3, [pc, #472]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a75      	ldr	r2, [pc, #468]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e01d      	b.n	8001398 <HAL_RCC_OscConfig+0xb0>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001364:	d10c      	bne.n	8001380 <HAL_RCC_OscConfig+0x98>
 8001366:	4b70      	ldr	r3, [pc, #448]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a6f      	ldr	r2, [pc, #444]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 800136c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	4b6d      	ldr	r3, [pc, #436]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a6c      	ldr	r2, [pc, #432]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	e00b      	b.n	8001398 <HAL_RCC_OscConfig+0xb0>
 8001380:	4b69      	ldr	r3, [pc, #420]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a68      	ldr	r2, [pc, #416]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4b66      	ldr	r3, [pc, #408]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a65      	ldr	r2, [pc, #404]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d013      	beq.n	80013c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fcc2 	bl	8000d28 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fcbe 	bl	8000d28 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b64      	cmp	r3, #100	; 0x64
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e207      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ba:	4b5b      	ldr	r3, [pc, #364]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCC_OscConfig+0xc0>
 80013c6:	e014      	b.n	80013f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c8:	f7ff fcae 	bl	8000d28 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d0:	f7ff fcaa 	bl	8000d28 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b64      	cmp	r3, #100	; 0x64
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e1f3      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e2:	4b51      	ldr	r3, [pc, #324]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0xe8>
 80013ee:	e000      	b.n	80013f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d063      	beq.n	80014c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013fe:	4b4a      	ldr	r3, [pc, #296]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00b      	beq.n	8001422 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800140a:	4b47      	ldr	r3, [pc, #284]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001412:	2b08      	cmp	r3, #8
 8001414:	d11c      	bne.n	8001450 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001416:	4b44      	ldr	r3, [pc, #272]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d116      	bne.n	8001450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001422:	4b41      	ldr	r3, [pc, #260]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d005      	beq.n	800143a <HAL_RCC_OscConfig+0x152>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d001      	beq.n	800143a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e1c7      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143a:	4b3b      	ldr	r3, [pc, #236]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4937      	ldr	r1, [pc, #220]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144e:	e03a      	b.n	80014c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d020      	beq.n	800149a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001458:	4b34      	ldr	r3, [pc, #208]	; (800152c <HAL_RCC_OscConfig+0x244>)
 800145a:	2201      	movs	r2, #1
 800145c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145e:	f7ff fc63 	bl	8000d28 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001466:	f7ff fc5f 	bl	8000d28 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e1a8      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001478:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001484:	4b28      	ldr	r3, [pc, #160]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	4925      	ldr	r1, [pc, #148]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001494:	4313      	orrs	r3, r2
 8001496:	600b      	str	r3, [r1, #0]
 8001498:	e015      	b.n	80014c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800149a:	4b24      	ldr	r3, [pc, #144]	; (800152c <HAL_RCC_OscConfig+0x244>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff fc42 	bl	8000d28 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a8:	f7ff fc3e 	bl	8000d28 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e187      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ba:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d036      	beq.n	8001540 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d016      	beq.n	8001508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_RCC_OscConfig+0x248>)
 80014dc:	2201      	movs	r2, #1
 80014de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e0:	f7ff fc22 	bl	8000d28 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e8:	f7ff fc1e 	bl	8000d28 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e167      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 80014fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x200>
 8001506:	e01b      	b.n	8001540 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_RCC_OscConfig+0x248>)
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150e:	f7ff fc0b 	bl	8000d28 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001514:	e00e      	b.n	8001534 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001516:	f7ff fc07 	bl	8000d28 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d907      	bls.n	8001534 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e150      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
 8001528:	40023800 	.word	0x40023800
 800152c:	42470000 	.word	0x42470000
 8001530:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001534:	4b88      	ldr	r3, [pc, #544]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1ea      	bne.n	8001516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 8097 	beq.w	800167c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001552:	4b81      	ldr	r3, [pc, #516]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10f      	bne.n	800157e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	4b7d      	ldr	r3, [pc, #500]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a7c      	ldr	r2, [pc, #496]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b7a      	ldr	r3, [pc, #488]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800157a:	2301      	movs	r3, #1
 800157c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157e:	4b77      	ldr	r3, [pc, #476]	; (800175c <HAL_RCC_OscConfig+0x474>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001586:	2b00      	cmp	r3, #0
 8001588:	d118      	bne.n	80015bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800158a:	4b74      	ldr	r3, [pc, #464]	; (800175c <HAL_RCC_OscConfig+0x474>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a73      	ldr	r2, [pc, #460]	; (800175c <HAL_RCC_OscConfig+0x474>)
 8001590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001596:	f7ff fbc7 	bl	8000d28 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159e:	f7ff fbc3 	bl	8000d28 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e10c      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b0:	4b6a      	ldr	r3, [pc, #424]	; (800175c <HAL_RCC_OscConfig+0x474>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d106      	bne.n	80015d2 <HAL_RCC_OscConfig+0x2ea>
 80015c4:	4b64      	ldr	r3, [pc, #400]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c8:	4a63      	ldr	r2, [pc, #396]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6713      	str	r3, [r2, #112]	; 0x70
 80015d0:	e01c      	b.n	800160c <HAL_RCC_OscConfig+0x324>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b05      	cmp	r3, #5
 80015d8:	d10c      	bne.n	80015f4 <HAL_RCC_OscConfig+0x30c>
 80015da:	4b5f      	ldr	r3, [pc, #380]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015de:	4a5e      	ldr	r2, [pc, #376]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015e0:	f043 0304 	orr.w	r3, r3, #4
 80015e4:	6713      	str	r3, [r2, #112]	; 0x70
 80015e6:	4b5c      	ldr	r3, [pc, #368]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ea:	4a5b      	ldr	r2, [pc, #364]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6713      	str	r3, [r2, #112]	; 0x70
 80015f2:	e00b      	b.n	800160c <HAL_RCC_OscConfig+0x324>
 80015f4:	4b58      	ldr	r3, [pc, #352]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f8:	4a57      	ldr	r2, [pc, #348]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015fa:	f023 0301 	bic.w	r3, r3, #1
 80015fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001600:	4b55      	ldr	r3, [pc, #340]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001604:	4a54      	ldr	r2, [pc, #336]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001606:	f023 0304 	bic.w	r3, r3, #4
 800160a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d015      	beq.n	8001640 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001614:	f7ff fb88 	bl	8000d28 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161a:	e00a      	b.n	8001632 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161c:	f7ff fb84 	bl	8000d28 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f241 3288 	movw	r2, #5000	; 0x1388
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e0cb      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001632:	4b49      	ldr	r3, [pc, #292]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0ee      	beq.n	800161c <HAL_RCC_OscConfig+0x334>
 800163e:	e014      	b.n	800166a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001640:	f7ff fb72 	bl	8000d28 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001646:	e00a      	b.n	800165e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001648:	f7ff fb6e 	bl	8000d28 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f241 3288 	movw	r2, #5000	; 0x1388
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e0b5      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165e:	4b3e      	ldr	r3, [pc, #248]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1ee      	bne.n	8001648 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800166a:	7dfb      	ldrb	r3, [r7, #23]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d105      	bne.n	800167c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001670:	4b39      	ldr	r3, [pc, #228]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	4a38      	ldr	r2, [pc, #224]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800167a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80a1 	beq.w	80017c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001686:	4b34      	ldr	r3, [pc, #208]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b08      	cmp	r3, #8
 8001690:	d05c      	beq.n	800174c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d141      	bne.n	800171e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169a:	4b31      	ldr	r3, [pc, #196]	; (8001760 <HAL_RCC_OscConfig+0x478>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fb42 	bl	8000d28 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a8:	f7ff fb3e 	bl	8000d28 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e087      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ba:	4b27      	ldr	r3, [pc, #156]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69da      	ldr	r2, [r3, #28]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	019b      	lsls	r3, r3, #6
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	085b      	lsrs	r3, r3, #1
 80016de:	3b01      	subs	r3, #1
 80016e0:	041b      	lsls	r3, r3, #16
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	061b      	lsls	r3, r3, #24
 80016ea:	491b      	ldr	r1, [pc, #108]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_RCC_OscConfig+0x478>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f6:	f7ff fb17 	bl	8000d28 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fe:	f7ff fb13 	bl	8000d28 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e05c      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f0      	beq.n	80016fe <HAL_RCC_OscConfig+0x416>
 800171c:	e054      	b.n	80017c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <HAL_RCC_OscConfig+0x478>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7ff fb00 	bl	8000d28 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172c:	f7ff fafc 	bl	8000d28 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e045      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x444>
 800174a:	e03d      	b.n	80017c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d107      	bne.n	8001764 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e038      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
 8001758:	40023800 	.word	0x40023800
 800175c:	40007000 	.word	0x40007000
 8001760:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_RCC_OscConfig+0x4ec>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d028      	beq.n	80017c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d121      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178a:	429a      	cmp	r2, r3
 800178c:	d11a      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001794:	4013      	ands	r3, r2
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800179a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800179c:	4293      	cmp	r3, r2
 800179e:	d111      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017aa:	085b      	lsrs	r3, r3, #1
 80017ac:	3b01      	subs	r3, #1
 80017ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d107      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0cc      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017ec:	4b68      	ldr	r3, [pc, #416]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d90c      	bls.n	8001814 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fa:	4b65      	ldr	r3, [pc, #404]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001802:	4b63      	ldr	r3, [pc, #396]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e0b8      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d020      	beq.n	8001862 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800182c:	4b59      	ldr	r3, [pc, #356]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4a58      	ldr	r2, [pc, #352]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001836:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001844:	4b53      	ldr	r3, [pc, #332]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	4a52      	ldr	r2, [pc, #328]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800184e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001850:	4b50      	ldr	r3, [pc, #320]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	494d      	ldr	r1, [pc, #308]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	4313      	orrs	r3, r2
 8001860:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d044      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001876:	4b47      	ldr	r3, [pc, #284]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d119      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e07f      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d003      	beq.n	8001896 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001892:	2b03      	cmp	r3, #3
 8001894:	d107      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001896:	4b3f      	ldr	r3, [pc, #252]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d109      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e06f      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a6:	4b3b      	ldr	r3, [pc, #236]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e067      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b6:	4b37      	ldr	r3, [pc, #220]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f023 0203 	bic.w	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4934      	ldr	r1, [pc, #208]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c8:	f7ff fa2e 	bl	8000d28 <HAL_GetTick>
 80018cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d0:	f7ff fa2a 	bl	8000d28 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e04f      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e6:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 020c 	and.w	r2, r3, #12
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d1eb      	bne.n	80018d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018f8:	4b25      	ldr	r3, [pc, #148]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d20c      	bcs.n	8001920 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001906:	4b22      	ldr	r3, [pc, #136]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e032      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	d008      	beq.n	800193e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4916      	ldr	r1, [pc, #88]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d009      	beq.n	800195e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	490e      	ldr	r1, [pc, #56]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800195e:	f000 f821 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 8001962:	4602      	mov	r2, r0
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	490a      	ldr	r1, [pc, #40]	; (8001998 <HAL_RCC_ClockConfig+0x1c0>)
 8001970:	5ccb      	ldrb	r3, [r1, r3]
 8001972:	fa22 f303 	lsr.w	r3, r2, r3
 8001976:	4a09      	ldr	r2, [pc, #36]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f846 	bl	8000a10 <HAL_InitTick>

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023c00 	.word	0x40023c00
 8001994:	40023800 	.word	0x40023800
 8001998:	08005b64 	.word	0x08005b64
 800199c:	20000024 	.word	0x20000024
 80019a0:	20000028 	.word	0x20000028

080019a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019a8:	b090      	sub	sp, #64	; 0x40
 80019aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	637b      	str	r3, [r7, #52]	; 0x34
 80019b0:	2300      	movs	r3, #0
 80019b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019b4:	2300      	movs	r3, #0
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019bc:	4b59      	ldr	r3, [pc, #356]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d00d      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x40>
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	f200 80a1 	bhi.w	8001b10 <HAL_RCC_GetSysClockFreq+0x16c>
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0x34>
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d003      	beq.n	80019de <HAL_RCC_GetSysClockFreq+0x3a>
 80019d6:	e09b      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019d8:	4b53      	ldr	r3, [pc, #332]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x184>)
 80019da:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80019dc:	e09b      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019de:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x188>)
 80019e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019e2:	e098      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e4:	4b4f      	ldr	r3, [pc, #316]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019ec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ee:	4b4d      	ldr	r3, [pc, #308]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d028      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fa:	4b4a      	ldr	r3, [pc, #296]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	099b      	lsrs	r3, r3, #6
 8001a00:	2200      	movs	r2, #0
 8001a02:	623b      	str	r3, [r7, #32]
 8001a04:	627a      	str	r2, [r7, #36]	; 0x24
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a10:	fb03 f201 	mul.w	r2, r3, r1
 8001a14:	2300      	movs	r3, #0
 8001a16:	fb00 f303 	mul.w	r3, r0, r3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a43      	ldr	r2, [pc, #268]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a1e:	fba0 1202 	umull	r1, r2, r0, r2
 8001a22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a24:	460a      	mov	r2, r1
 8001a26:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a2a:	4413      	add	r3, r2
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a30:	2200      	movs	r2, #0
 8001a32:	61bb      	str	r3, [r7, #24]
 8001a34:	61fa      	str	r2, [r7, #28]
 8001a36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a3e:	f7fe fc17 	bl	8000270 <__aeabi_uldivmod>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4613      	mov	r3, r2
 8001a48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a4a:	e053      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4c:	4b35      	ldr	r3, [pc, #212]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	099b      	lsrs	r3, r3, #6
 8001a52:	2200      	movs	r2, #0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	617a      	str	r2, [r7, #20]
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a5e:	f04f 0b00 	mov.w	fp, #0
 8001a62:	4652      	mov	r2, sl
 8001a64:	465b      	mov	r3, fp
 8001a66:	f04f 0000 	mov.w	r0, #0
 8001a6a:	f04f 0100 	mov.w	r1, #0
 8001a6e:	0159      	lsls	r1, r3, #5
 8001a70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a74:	0150      	lsls	r0, r2, #5
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	ebb2 080a 	subs.w	r8, r2, sl
 8001a7e:	eb63 090b 	sbc.w	r9, r3, fp
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a96:	ebb2 0408 	subs.w	r4, r2, r8
 8001a9a:	eb63 0509 	sbc.w	r5, r3, r9
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	00eb      	lsls	r3, r5, #3
 8001aa8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aac:	00e2      	lsls	r2, r4, #3
 8001aae:	4614      	mov	r4, r2
 8001ab0:	461d      	mov	r5, r3
 8001ab2:	eb14 030a 	adds.w	r3, r4, sl
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	eb45 030b 	adc.w	r3, r5, fp
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aca:	4629      	mov	r1, r5
 8001acc:	028b      	lsls	r3, r1, #10
 8001ace:	4621      	mov	r1, r4
 8001ad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	028a      	lsls	r2, r1, #10
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	60fa      	str	r2, [r7, #12]
 8001ae4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ae8:	f7fe fbc2 	bl	8000270 <__aeabi_uldivmod>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4613      	mov	r3, r2
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	0c1b      	lsrs	r3, r3, #16
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	3301      	adds	r3, #1
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001b04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b0e:	e002      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b12:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3740      	adds	r7, #64	; 0x40
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	00f42400 	.word	0x00f42400
 8001b2c:	017d7840 	.word	0x017d7840

08001b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000024 	.word	0x20000024

08001b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b4c:	f7ff fff0 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b50:	4602      	mov	r2, r0
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	0b5b      	lsrs	r3, r3, #13
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	4903      	ldr	r1, [pc, #12]	; (8001b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b5e:	5ccb      	ldrb	r3, [r1, r3]
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	08005b74 	.word	0x08005b74

08001b70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	220f      	movs	r2, #15
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_RCC_GetClockConfig+0x5c>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 0203 	and.w	r2, r3, #3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <HAL_RCC_GetClockConfig+0x5c>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <HAL_RCC_GetClockConfig+0x5c>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_RCC_GetClockConfig+0x5c>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	08db      	lsrs	r3, r3, #3
 8001baa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <HAL_RCC_GetClockConfig+0x60>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0207 	and.w	r2, r3, #7
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	601a      	str	r2, [r3, #0]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40023c00 	.word	0x40023c00

08001bd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e041      	b.n	8001c6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f839 	bl	8001c72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3304      	adds	r3, #4
 8001c10:	4619      	mov	r1, r3
 8001c12:	4610      	mov	r0, r2
 8001c14:	f000 f9d8 	bl	8001fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d001      	beq.n	8001ca0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e04e      	b.n	8001d3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a23      	ldr	r2, [pc, #140]	; (8001d4c <HAL_TIM_Base_Start_IT+0xc4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d022      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x80>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cca:	d01d      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x80>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a1f      	ldr	r2, [pc, #124]	; (8001d50 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d018      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x80>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a1e      	ldr	r2, [pc, #120]	; (8001d54 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d013      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x80>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d00e      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x80>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1b      	ldr	r2, [pc, #108]	; (8001d5c <HAL_TIM_Base_Start_IT+0xd4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d009      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x80>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a19      	ldr	r2, [pc, #100]	; (8001d60 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d004      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x80>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a18      	ldr	r2, [pc, #96]	; (8001d64 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d111      	bne.n	8001d2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d010      	beq.n	8001d3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0201 	orr.w	r2, r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d2a:	e007      	b.n	8001d3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40010000 	.word	0x40010000
 8001d50:	40000400 	.word	0x40000400
 8001d54:	40000800 	.word	0x40000800
 8001d58:	40000c00 	.word	0x40000c00
 8001d5c:	40010400 	.word	0x40010400
 8001d60:	40014000 	.word	0x40014000
 8001d64:	40001800 	.word	0x40001800

08001d68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d122      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d11b      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0202 	mvn.w	r2, #2
 8001d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f8ee 	bl	8001f8c <HAL_TIM_IC_CaptureCallback>
 8001db0:	e005      	b.n	8001dbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f8e0 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f8f1 	bl	8001fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d122      	bne.n	8001e18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d11b      	bne.n	8001e18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0204 	mvn.w	r2, #4
 8001de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2202      	movs	r2, #2
 8001dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8c4 	bl	8001f8c <HAL_TIM_IC_CaptureCallback>
 8001e04:	e005      	b.n	8001e12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8b6 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f8c7 	bl	8001fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d122      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d11b      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0208 	mvn.w	r2, #8
 8001e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2204      	movs	r2, #4
 8001e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f89a 	bl	8001f8c <HAL_TIM_IC_CaptureCallback>
 8001e58:	e005      	b.n	8001e66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f88c 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f89d 	bl	8001fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f003 0310 	and.w	r3, r3, #16
 8001e76:	2b10      	cmp	r3, #16
 8001e78:	d122      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	2b10      	cmp	r3, #16
 8001e86:	d11b      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0210 	mvn.w	r2, #16
 8001e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2208      	movs	r2, #8
 8001e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f870 	bl	8001f8c <HAL_TIM_IC_CaptureCallback>
 8001eac:	e005      	b.n	8001eba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f862 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f873 	bl	8001fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d10e      	bne.n	8001eec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d107      	bne.n	8001eec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0201 	mvn.w	r2, #1
 8001ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7fe fd4e 	bl	8000988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef6:	2b80      	cmp	r3, #128	; 0x80
 8001ef8:	d10e      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f04:	2b80      	cmp	r3, #128	; 0x80
 8001f06:	d107      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f902 	bl	800211c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f22:	2b40      	cmp	r3, #64	; 0x40
 8001f24:	d10e      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f30:	2b40      	cmp	r3, #64	; 0x40
 8001f32:	d107      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f838 	bl	8001fb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	d10e      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0320 	and.w	r3, r3, #32
 8001f5c:	2b20      	cmp	r3, #32
 8001f5e:	d107      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0220 	mvn.w	r2, #32
 8001f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8cc 	bl	8002108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a40      	ldr	r2, [pc, #256]	; (80020dc <TIM_Base_SetConfig+0x114>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d013      	beq.n	8002008 <TIM_Base_SetConfig+0x40>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe6:	d00f      	beq.n	8002008 <TIM_Base_SetConfig+0x40>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3d      	ldr	r2, [pc, #244]	; (80020e0 <TIM_Base_SetConfig+0x118>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d00b      	beq.n	8002008 <TIM_Base_SetConfig+0x40>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a3c      	ldr	r2, [pc, #240]	; (80020e4 <TIM_Base_SetConfig+0x11c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d007      	beq.n	8002008 <TIM_Base_SetConfig+0x40>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a3b      	ldr	r2, [pc, #236]	; (80020e8 <TIM_Base_SetConfig+0x120>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d003      	beq.n	8002008 <TIM_Base_SetConfig+0x40>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a3a      	ldr	r2, [pc, #232]	; (80020ec <TIM_Base_SetConfig+0x124>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d108      	bne.n	800201a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800200e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a2f      	ldr	r2, [pc, #188]	; (80020dc <TIM_Base_SetConfig+0x114>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d02b      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002028:	d027      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a2c      	ldr	r2, [pc, #176]	; (80020e0 <TIM_Base_SetConfig+0x118>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d023      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a2b      	ldr	r2, [pc, #172]	; (80020e4 <TIM_Base_SetConfig+0x11c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d01f      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a2a      	ldr	r2, [pc, #168]	; (80020e8 <TIM_Base_SetConfig+0x120>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01b      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a29      	ldr	r2, [pc, #164]	; (80020ec <TIM_Base_SetConfig+0x124>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d017      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a28      	ldr	r2, [pc, #160]	; (80020f0 <TIM_Base_SetConfig+0x128>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a27      	ldr	r2, [pc, #156]	; (80020f4 <TIM_Base_SetConfig+0x12c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00f      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a26      	ldr	r2, [pc, #152]	; (80020f8 <TIM_Base_SetConfig+0x130>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00b      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a25      	ldr	r2, [pc, #148]	; (80020fc <TIM_Base_SetConfig+0x134>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d007      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a24      	ldr	r2, [pc, #144]	; (8002100 <TIM_Base_SetConfig+0x138>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d003      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a23      	ldr	r2, [pc, #140]	; (8002104 <TIM_Base_SetConfig+0x13c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d108      	bne.n	800208c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4313      	orrs	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	4313      	orrs	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <TIM_Base_SetConfig+0x114>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d003      	beq.n	80020c0 <TIM_Base_SetConfig+0xf8>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a0c      	ldr	r2, [pc, #48]	; (80020ec <TIM_Base_SetConfig+0x124>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d103      	bne.n	80020c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	615a      	str	r2, [r3, #20]
}
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40010000 	.word	0x40010000
 80020e0:	40000400 	.word	0x40000400
 80020e4:	40000800 	.word	0x40000800
 80020e8:	40000c00 	.word	0x40000c00
 80020ec:	40010400 	.word	0x40010400
 80020f0:	40014000 	.word	0x40014000
 80020f4:	40014400 	.word	0x40014400
 80020f8:	40014800 	.word	0x40014800
 80020fc:	40001800 	.word	0x40001800
 8002100:	40001c00 	.word	0x40001c00
 8002104:	40002000 	.word	0x40002000

08002108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800213e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002142:	2b84      	cmp	r3, #132	; 0x84
 8002144:	d005      	beq.n	8002152 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002146:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4413      	add	r3, r2
 800214e:	3303      	adds	r3, #3
 8002150:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002152:	68fb      	ldr	r3, [r7, #12]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002166:	f3ef 8305 	mrs	r3, IPSR
 800216a:	607b      	str	r3, [r7, #4]
  return(result);
 800216c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800216e:	2b00      	cmp	r3, #0
 8002170:	bf14      	ite	ne
 8002172:	2301      	movne	r3, #1
 8002174:	2300      	moveq	r3, #0
 8002176:	b2db      	uxtb	r3, r3
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002188:	f001 f958 	bl	800343c <vTaskStartScheduler>
  
  return osOK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	bd80      	pop	{r7, pc}

08002192 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002192:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002194:	b089      	sub	sp, #36	; 0x24
 8002196:	af04      	add	r7, sp, #16
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d020      	beq.n	80021e6 <osThreadCreate+0x54>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01c      	beq.n	80021e6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685c      	ldr	r4, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681d      	ldr	r5, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691e      	ldr	r6, [r3, #16]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff ffb6 	bl	8002130 <makeFreeRtosPriority>
 80021c4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80021ce:	9202      	str	r2, [sp, #8]
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	9100      	str	r1, [sp, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	4632      	mov	r2, r6
 80021d8:	4629      	mov	r1, r5
 80021da:	4620      	mov	r0, r4
 80021dc:	f000 ff50 	bl	8003080 <xTaskCreateStatic>
 80021e0:	4603      	mov	r3, r0
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	e01c      	b.n	8002220 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685c      	ldr	r4, [r3, #4]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80021f2:	b29e      	uxth	r6, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff ff98 	bl	8002130 <makeFreeRtosPriority>
 8002200:	4602      	mov	r2, r0
 8002202:	f107 030c 	add.w	r3, r7, #12
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	9200      	str	r2, [sp, #0]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	4632      	mov	r2, r6
 800220e:	4629      	mov	r1, r5
 8002210:	4620      	mov	r0, r4
 8002212:	f000 ff92 	bl	800313a <xTaskCreate>
 8002216:	4603      	mov	r3, r0
 8002218:	2b01      	cmp	r3, #1
 800221a:	d001      	beq.n	8002220 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800221c:	2300      	movs	r3, #0
 800221e:	e000      	b.n	8002222 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002220:	68fb      	ldr	r3, [r7, #12]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800222a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <osDelay+0x16>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	e000      	b.n	8002242 <osDelay+0x18>
 8002240:	2301      	movs	r3, #1
 8002242:	4618      	mov	r0, r3
 8002244:	f001 f8c6 	bl	80033d4 <vTaskDelay>
  
  return osOK;
 8002248:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d007      	beq.n	8002272 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4619      	mov	r1, r3
 8002268:	2001      	movs	r0, #1
 800226a:	f000 faae 	bl	80027ca <xQueueCreateMutexStatic>
 800226e:	4603      	mov	r3, r0
 8002270:	e003      	b.n	800227a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8002272:	2001      	movs	r0, #1
 8002274:	f000 fa91 	bl	800279a <xQueueCreateMutex>
 8002278:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <osMutexWait+0x18>
    return osErrorParameter;
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	e03a      	b.n	8002312 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a6:	d103      	bne.n	80022b0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80022a8:	f04f 33ff 	mov.w	r3, #4294967295
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	e009      	b.n	80022c4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d006      	beq.n	80022c4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <osMutexWait+0x40>
      ticks = 1;
 80022c0:	2301      	movs	r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80022c4:	f7ff ff4c 	bl	8002160 <inHandlerMode>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d017      	beq.n	80022fe <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80022ce:	f107 0308 	add.w	r3, r7, #8
 80022d2:	461a      	mov	r2, r3
 80022d4:	2100      	movs	r1, #0
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fd2a 	bl	8002d30 <xQueueReceiveFromISR>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d001      	beq.n	80022e6 <osMutexWait+0x62>
      return osErrorOS;
 80022e2:	23ff      	movs	r3, #255	; 0xff
 80022e4:	e015      	b.n	8002312 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d011      	beq.n	8002310 <osMutexWait+0x8c>
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <osMutexWait+0x98>)
 80022ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	f3bf 8f4f 	dsb	sy
 80022f8:	f3bf 8f6f 	isb	sy
 80022fc:	e008      	b.n	8002310 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80022fe:	68f9      	ldr	r1, [r7, #12]
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fc09 	bl	8002b18 <xQueueSemaphoreTake>
 8002306:	4603      	mov	r3, r0
 8002308:	2b01      	cmp	r3, #1
 800230a:	d001      	beq.n	8002310 <osMutexWait+0x8c>
    return osErrorOS;
 800230c:	23ff      	movs	r3, #255	; 0xff
 800230e:	e000      	b.n	8002312 <osMutexWait+0x8e>
  }
  
  return osOK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	e000ed04 	.word	0xe000ed04

08002320 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800232c:	2300      	movs	r3, #0
 800232e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8002330:	f7ff ff16 	bl	8002160 <inHandlerMode>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d016      	beq.n	8002368 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800233a:	f107 0308 	add.w	r3, r7, #8
 800233e:	4619      	mov	r1, r3
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 fb5b 	bl	80029fc <xQueueGiveFromISR>
 8002346:	4603      	mov	r3, r0
 8002348:	2b01      	cmp	r3, #1
 800234a:	d001      	beq.n	8002350 <osMutexRelease+0x30>
      return osErrorOS;
 800234c:	23ff      	movs	r3, #255	; 0xff
 800234e:	e017      	b.n	8002380 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d013      	beq.n	800237e <osMutexRelease+0x5e>
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <osMutexRelease+0x68>)
 8002358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	f3bf 8f4f 	dsb	sy
 8002362:	f3bf 8f6f 	isb	sy
 8002366:	e00a      	b.n	800237e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8002368:	2300      	movs	r3, #0
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 fa46 	bl	8002800 <xQueueGenericSend>
 8002374:	4603      	mov	r3, r0
 8002376:	2b01      	cmp	r3, #1
 8002378:	d001      	beq.n	800237e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800237a:	23ff      	movs	r3, #255	; 0xff
 800237c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800237e:	68fb      	ldr	r3, [r7, #12]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	e000ed04 	.word	0xe000ed04

0800238c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f103 0208 	add.w	r2, r3, #8
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295
 80023a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f103 0208 	add.w	r2, r3, #8
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f103 0208 	add.w	r2, r3, #8
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023e6:	b480      	push	{r7}
 80023e8:	b085      	sub	sp, #20
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	601a      	str	r2, [r3, #0]
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800242e:	b480      	push	{r7}
 8002430:	b085      	sub	sp, #20
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d103      	bne.n	800244e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	e00c      	b.n	8002468 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3308      	adds	r3, #8
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	e002      	b.n	800245c <vListInsert+0x2e>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	429a      	cmp	r2, r3
 8002466:	d2f6      	bcs.n	8002456 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	601a      	str	r2, [r3, #0]
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6892      	ldr	r2, [r2, #8]
 80024b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6852      	ldr	r2, [r2, #4]
 80024c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d103      	bne.n	80024d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	1e5a      	subs	r2, r3, #1
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10a      	bne.n	800251e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800251a:	bf00      	nop
 800251c:	e7fe      	b.n	800251c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800251e:	f001 fee1 	bl	80042e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252a:	68f9      	ldr	r1, [r7, #12]
 800252c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800252e:	fb01 f303 	mul.w	r3, r1, r3
 8002532:	441a      	add	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254e:	3b01      	subs	r3, #1
 8002550:	68f9      	ldr	r1, [r7, #12]
 8002552:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	441a      	add	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	22ff      	movs	r2, #255	; 0xff
 8002562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	22ff      	movs	r2, #255	; 0xff
 800256a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d114      	bne.n	800259e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01a      	beq.n	80025b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3310      	adds	r3, #16
 8002580:	4618      	mov	r0, r3
 8002582:	f001 f9ad 	bl	80038e0 <xTaskRemoveFromEventList>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d012      	beq.n	80025b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <xQueueGenericReset+0xcc>)
 800258e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	f3bf 8f4f 	dsb	sy
 8002598:	f3bf 8f6f 	isb	sy
 800259c:	e009      	b.n	80025b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3310      	adds	r3, #16
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fef2 	bl	800238c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	3324      	adds	r3, #36	; 0x24
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff feed 	bl	800238c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80025b2:	f001 fec7 	bl	8004344 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80025b6:	2301      	movs	r3, #1
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	e000ed04 	.word	0xe000ed04

080025c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08e      	sub	sp, #56	; 0x38
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10a      	bne.n	80025ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80025d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025dc:	f383 8811 	msr	BASEPRI, r3
 80025e0:	f3bf 8f6f 	isb	sy
 80025e4:	f3bf 8f4f 	dsb	sy
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80025ea:	bf00      	nop
 80025ec:	e7fe      	b.n	80025ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10a      	bne.n	800260a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80025f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f8:	f383 8811 	msr	BASEPRI, r3
 80025fc:	f3bf 8f6f 	isb	sy
 8002600:	f3bf 8f4f 	dsb	sy
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002606:	bf00      	nop
 8002608:	e7fe      	b.n	8002608 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d002      	beq.n	8002616 <xQueueGenericCreateStatic+0x52>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <xQueueGenericCreateStatic+0x56>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <xQueueGenericCreateStatic+0x58>
 800261a:	2300      	movs	r3, #0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10a      	bne.n	8002636 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002624:	f383 8811 	msr	BASEPRI, r3
 8002628:	f3bf 8f6f 	isb	sy
 800262c:	f3bf 8f4f 	dsb	sy
 8002630:	623b      	str	r3, [r7, #32]
}
 8002632:	bf00      	nop
 8002634:	e7fe      	b.n	8002634 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d102      	bne.n	8002642 <xQueueGenericCreateStatic+0x7e>
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <xQueueGenericCreateStatic+0x82>
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <xQueueGenericCreateStatic+0x84>
 8002646:	2300      	movs	r3, #0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800264c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002650:	f383 8811 	msr	BASEPRI, r3
 8002654:	f3bf 8f6f 	isb	sy
 8002658:	f3bf 8f4f 	dsb	sy
 800265c:	61fb      	str	r3, [r7, #28]
}
 800265e:	bf00      	nop
 8002660:	e7fe      	b.n	8002660 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002662:	2348      	movs	r3, #72	; 0x48
 8002664:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2b48      	cmp	r3, #72	; 0x48
 800266a:	d00a      	beq.n	8002682 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800266c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002670:	f383 8811 	msr	BASEPRI, r3
 8002674:	f3bf 8f6f 	isb	sy
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	61bb      	str	r3, [r7, #24]
}
 800267e:	bf00      	nop
 8002680:	e7fe      	b.n	8002680 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002682:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00d      	beq.n	80026aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002696:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	4613      	mov	r3, r2
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	68b9      	ldr	r1, [r7, #8]
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 f83f 	bl	8002728 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3730      	adds	r7, #48	; 0x30
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	; 0x28
 80026b8:	af02      	add	r7, sp, #8
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	4613      	mov	r3, r2
 80026c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10a      	bne.n	80026de <xQueueGenericCreate+0x2a>
	__asm volatile
 80026c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026cc:	f383 8811 	msr	BASEPRI, r3
 80026d0:	f3bf 8f6f 	isb	sy
 80026d4:	f3bf 8f4f 	dsb	sy
 80026d8:	613b      	str	r3, [r7, #16]
}
 80026da:	bf00      	nop
 80026dc:	e7fe      	b.n	80026dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	fb02 f303 	mul.w	r3, r2, r3
 80026e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	3348      	adds	r3, #72	; 0x48
 80026ec:	4618      	mov	r0, r3
 80026ee:	f001 ff1b 	bl	8004528 <pvPortMalloc>
 80026f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d011      	beq.n	800271e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	3348      	adds	r3, #72	; 0x48
 8002702:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800270c:	79fa      	ldrb	r2, [r7, #7]
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	4613      	mov	r3, r2
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 f805 	bl	8002728 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800271e:	69bb      	ldr	r3, [r7, #24]
	}
 8002720:	4618      	mov	r0, r3
 8002722:	3720      	adds	r7, #32
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d103      	bne.n	8002744 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	e002      	b.n	800274a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002756:	2101      	movs	r1, #1
 8002758:	69b8      	ldr	r0, [r7, #24]
 800275a:	f7ff fecb 	bl	80024f4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00e      	beq.n	8002792 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002786:	2300      	movs	r3, #0
 8002788:	2200      	movs	r2, #0
 800278a:	2100      	movs	r1, #0
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f837 	bl	8002800 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800279a:	b580      	push	{r7, lr}
 800279c:	b086      	sub	sp, #24
 800279e:	af00      	add	r7, sp, #0
 80027a0:	4603      	mov	r3, r0
 80027a2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80027a4:	2301      	movs	r3, #1
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	2300      	movs	r3, #0
 80027aa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	461a      	mov	r2, r3
 80027b0:	6939      	ldr	r1, [r7, #16]
 80027b2:	6978      	ldr	r0, [r7, #20]
 80027b4:	f7ff ff7e 	bl	80026b4 <xQueueGenericCreate>
 80027b8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f7ff ffd3 	bl	8002766 <prvInitialiseMutex>

		return xNewQueue;
 80027c0:	68fb      	ldr	r3, [r7, #12]
	}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b088      	sub	sp, #32
 80027ce:	af02      	add	r7, sp, #8
 80027d0:	4603      	mov	r3, r0
 80027d2:	6039      	str	r1, [r7, #0]
 80027d4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80027d6:	2301      	movs	r3, #1
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	2300      	movs	r3, #0
 80027dc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2200      	movs	r2, #0
 80027e6:	6939      	ldr	r1, [r7, #16]
 80027e8:	6978      	ldr	r0, [r7, #20]
 80027ea:	f7ff feeb 	bl	80025c4 <xQueueGenericCreateStatic>
 80027ee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f7ff ffb8 	bl	8002766 <prvInitialiseMutex>

		return xNewQueue;
 80027f6:	68fb      	ldr	r3, [r7, #12]
	}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08e      	sub	sp, #56	; 0x38
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
 800280c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800280e:	2300      	movs	r3, #0
 8002810:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10a      	bne.n	8002832 <xQueueGenericSend+0x32>
	__asm volatile
 800281c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002820:	f383 8811 	msr	BASEPRI, r3
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800282e:	bf00      	nop
 8002830:	e7fe      	b.n	8002830 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d103      	bne.n	8002840 <xQueueGenericSend+0x40>
 8002838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <xQueueGenericSend+0x44>
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <xQueueGenericSend+0x46>
 8002844:	2300      	movs	r3, #0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10a      	bne.n	8002860 <xQueueGenericSend+0x60>
	__asm volatile
 800284a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284e:	f383 8811 	msr	BASEPRI, r3
 8002852:	f3bf 8f6f 	isb	sy
 8002856:	f3bf 8f4f 	dsb	sy
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800285c:	bf00      	nop
 800285e:	e7fe      	b.n	800285e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d103      	bne.n	800286e <xQueueGenericSend+0x6e>
 8002866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <xQueueGenericSend+0x72>
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <xQueueGenericSend+0x74>
 8002872:	2300      	movs	r3, #0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10a      	bne.n	800288e <xQueueGenericSend+0x8e>
	__asm volatile
 8002878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287c:	f383 8811 	msr	BASEPRI, r3
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	623b      	str	r3, [r7, #32]
}
 800288a:	bf00      	nop
 800288c:	e7fe      	b.n	800288c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800288e:	f001 f9d7 	bl	8003c40 <xTaskGetSchedulerState>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d102      	bne.n	800289e <xQueueGenericSend+0x9e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <xQueueGenericSend+0xa2>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <xQueueGenericSend+0xa4>
 80028a2:	2300      	movs	r3, #0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10a      	bne.n	80028be <xQueueGenericSend+0xbe>
	__asm volatile
 80028a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ac:	f383 8811 	msr	BASEPRI, r3
 80028b0:	f3bf 8f6f 	isb	sy
 80028b4:	f3bf 8f4f 	dsb	sy
 80028b8:	61fb      	str	r3, [r7, #28]
}
 80028ba:	bf00      	nop
 80028bc:	e7fe      	b.n	80028bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028be:	f001 fd11 	bl	80042e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d302      	bcc.n	80028d4 <xQueueGenericSend+0xd4>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d129      	bne.n	8002928 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028da:	f000 fac1 	bl	8002e60 <prvCopyDataToQueue>
 80028de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d010      	beq.n	800290a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ea:	3324      	adds	r3, #36	; 0x24
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fff7 	bl	80038e0 <xTaskRemoveFromEventList>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d013      	beq.n	8002920 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80028f8:	4b3f      	ldr	r3, [pc, #252]	; (80029f8 <xQueueGenericSend+0x1f8>)
 80028fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	e00a      	b.n	8002920 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290c:	2b00      	cmp	r3, #0
 800290e:	d007      	beq.n	8002920 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002910:	4b39      	ldr	r3, [pc, #228]	; (80029f8 <xQueueGenericSend+0x1f8>)
 8002912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002920:	f001 fd10 	bl	8004344 <vPortExitCritical>
				return pdPASS;
 8002924:	2301      	movs	r3, #1
 8002926:	e063      	b.n	80029f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d103      	bne.n	8002936 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800292e:	f001 fd09 	bl	8004344 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002932:	2300      	movs	r3, #0
 8002934:	e05c      	b.n	80029f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002938:	2b00      	cmp	r3, #0
 800293a:	d106      	bne.n	800294a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	4618      	mov	r0, r3
 8002942:	f001 f82f 	bl	80039a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002946:	2301      	movs	r3, #1
 8002948:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800294a:	f001 fcfb 	bl	8004344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800294e:	f000 fddf 	bl	8003510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002952:	f001 fcc7 	bl	80042e4 <vPortEnterCritical>
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800295c:	b25b      	sxtb	r3, r3
 800295e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002962:	d103      	bne.n	800296c <xQueueGenericSend+0x16c>
 8002964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800296c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002972:	b25b      	sxtb	r3, r3
 8002974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002978:	d103      	bne.n	8002982 <xQueueGenericSend+0x182>
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002982:	f001 fcdf 	bl	8004344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002986:	1d3a      	adds	r2, r7, #4
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	4611      	mov	r1, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f001 f81e 	bl	80039d0 <xTaskCheckForTimeOut>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d124      	bne.n	80029e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800299a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800299c:	f000 fb58 	bl	8003050 <prvIsQueueFull>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d018      	beq.n	80029d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	3310      	adds	r3, #16
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 ff72 	bl	8003898 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80029b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029b6:	f000 fae3 	bl	8002f80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80029ba:	f000 fdb7 	bl	800352c <xTaskResumeAll>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f47f af7c 	bne.w	80028be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <xQueueGenericSend+0x1f8>)
 80029c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	f3bf 8f6f 	isb	sy
 80029d6:	e772      	b.n	80028be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80029d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029da:	f000 fad1 	bl	8002f80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029de:	f000 fda5 	bl	800352c <xTaskResumeAll>
 80029e2:	e76c      	b.n	80028be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80029e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029e6:	f000 facb 	bl	8002f80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029ea:	f000 fd9f 	bl	800352c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80029ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3738      	adds	r7, #56	; 0x38
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	e000ed04 	.word	0xe000ed04

080029fc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08e      	sub	sp, #56	; 0x38
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	623b      	str	r3, [r7, #32]
}
 8002a22:	bf00      	nop
 8002a24:	e7fe      	b.n	8002a24 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00a      	beq.n	8002a44 <xQueueGiveFromISR+0x48>
	__asm volatile
 8002a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a32:	f383 8811 	msr	BASEPRI, r3
 8002a36:	f3bf 8f6f 	isb	sy
 8002a3a:	f3bf 8f4f 	dsb	sy
 8002a3e:	61fb      	str	r3, [r7, #28]
}
 8002a40:	bf00      	nop
 8002a42:	e7fe      	b.n	8002a42 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d103      	bne.n	8002a54 <xQueueGiveFromISR+0x58>
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <xQueueGiveFromISR+0x5c>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <xQueueGiveFromISR+0x5e>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10a      	bne.n	8002a74 <xQueueGiveFromISR+0x78>
	__asm volatile
 8002a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	61bb      	str	r3, [r7, #24]
}
 8002a70:	bf00      	nop
 8002a72:	e7fe      	b.n	8002a72 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a74:	f001 fd18 	bl	80044a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002a78:	f3ef 8211 	mrs	r2, BASEPRI
 8002a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	617a      	str	r2, [r7, #20]
 8002a8e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002a90:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a98:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d22b      	bcs.n	8002afc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ab6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abe:	d112      	bne.n	8002ae6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d016      	beq.n	8002af6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aca:	3324      	adds	r3, #36	; 0x24
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 ff07 	bl	80038e0 <xTaskRemoveFromEventList>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00e      	beq.n	8002af6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	e007      	b.n	8002af6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ae6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aea:	3301      	adds	r3, #1
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	b25a      	sxtb	r2, r3
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002af6:	2301      	movs	r3, #1
 8002af8:	637b      	str	r3, [r7, #52]	; 0x34
 8002afa:	e001      	b.n	8002b00 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	637b      	str	r3, [r7, #52]	; 0x34
 8002b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b02:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b0a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3738      	adds	r7, #56	; 0x38
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08e      	sub	sp, #56	; 0x38
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10a      	bne.n	8002b4a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b38:	f383 8811 	msr	BASEPRI, r3
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	623b      	str	r3, [r7, #32]
}
 8002b46:	bf00      	nop
 8002b48:	e7fe      	b.n	8002b48 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b56:	f383 8811 	msr	BASEPRI, r3
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	61fb      	str	r3, [r7, #28]
}
 8002b64:	bf00      	nop
 8002b66:	e7fe      	b.n	8002b66 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b68:	f001 f86a 	bl	8003c40 <xTaskGetSchedulerState>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d102      	bne.n	8002b78 <xQueueSemaphoreTake+0x60>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <xQueueSemaphoreTake+0x64>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <xQueueSemaphoreTake+0x66>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10a      	bne.n	8002b98 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b86:	f383 8811 	msr	BASEPRI, r3
 8002b8a:	f3bf 8f6f 	isb	sy
 8002b8e:	f3bf 8f4f 	dsb	sy
 8002b92:	61bb      	str	r3, [r7, #24]
}
 8002b94:	bf00      	nop
 8002b96:	e7fe      	b.n	8002b96 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b98:	f001 fba4 	bl	80042e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d024      	beq.n	8002bf2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002baa:	1e5a      	subs	r2, r3, #1
 8002bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d104      	bne.n	8002bc2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002bb8:	f001 f9ea 	bl	8003f90 <pvTaskIncrementMutexHeldCount>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00f      	beq.n	8002bea <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bcc:	3310      	adds	r3, #16
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 fe86 	bl	80038e0 <xTaskRemoveFromEventList>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d007      	beq.n	8002bea <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002bda:	4b54      	ldr	r3, [pc, #336]	; (8002d2c <xQueueSemaphoreTake+0x214>)
 8002bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002bea:	f001 fbab 	bl	8004344 <vPortExitCritical>
				return pdPASS;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e097      	b.n	8002d22 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d111      	bne.n	8002c1c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c02:	f383 8811 	msr	BASEPRI, r3
 8002c06:	f3bf 8f6f 	isb	sy
 8002c0a:	f3bf 8f4f 	dsb	sy
 8002c0e:	617b      	str	r3, [r7, #20]
}
 8002c10:	bf00      	nop
 8002c12:	e7fe      	b.n	8002c12 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002c14:	f001 fb96 	bl	8004344 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	e082      	b.n	8002d22 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c22:	f107 030c 	add.w	r3, r7, #12
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 febc 	bl	80039a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c30:	f001 fb88 	bl	8004344 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c34:	f000 fc6c 	bl	8003510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c38:	f001 fb54 	bl	80042e4 <vPortEnterCritical>
 8002c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c42:	b25b      	sxtb	r3, r3
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d103      	bne.n	8002c52 <xQueueSemaphoreTake+0x13a>
 8002c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c58:	b25b      	sxtb	r3, r3
 8002c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5e:	d103      	bne.n	8002c68 <xQueueSemaphoreTake+0x150>
 8002c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c68:	f001 fb6c 	bl	8004344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c6c:	463a      	mov	r2, r7
 8002c6e:	f107 030c 	add.w	r3, r7, #12
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 feab 	bl	80039d0 <xTaskCheckForTimeOut>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d132      	bne.n	8002ce6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c82:	f000 f9cf 	bl	8003024 <prvIsQueueEmpty>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d026      	beq.n	8002cda <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d109      	bne.n	8002ca8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002c94:	f001 fb26 	bl	80042e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 ffed 	bl	8003c7c <xTaskPriorityInherit>
 8002ca2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002ca4:	f001 fb4e 	bl	8004344 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002caa:	3324      	adds	r3, #36	; 0x24
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	4611      	mov	r1, r2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fdf1 	bl	8003898 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002cb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cb8:	f000 f962 	bl	8002f80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002cbc:	f000 fc36 	bl	800352c <xTaskResumeAll>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f47f af68 	bne.w	8002b98 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002cc8:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <xQueueSemaphoreTake+0x214>)
 8002cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	e75e      	b.n	8002b98 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002cda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cdc:	f000 f950 	bl	8002f80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ce0:	f000 fc24 	bl	800352c <xTaskResumeAll>
 8002ce4:	e758      	b.n	8002b98 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002ce6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ce8:	f000 f94a 	bl	8002f80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cec:	f000 fc1e 	bl	800352c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cf2:	f000 f997 	bl	8003024 <prvIsQueueEmpty>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f43f af4d 	beq.w	8002b98 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00d      	beq.n	8002d20 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002d04:	f001 faee 	bl	80042e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002d08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d0a:	f000 f891 	bl	8002e30 <prvGetDisinheritPriorityAfterTimeout>
 8002d0e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 f8ac 	bl	8003e74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002d1c:	f001 fb12 	bl	8004344 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002d20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3738      	adds	r7, #56	; 0x38
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	e000ed04 	.word	0xe000ed04

08002d30 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08e      	sub	sp, #56	; 0x38
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10a      	bne.n	8002d5c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4a:	f383 8811 	msr	BASEPRI, r3
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	623b      	str	r3, [r7, #32]
}
 8002d58:	bf00      	nop
 8002d5a:	e7fe      	b.n	8002d5a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d103      	bne.n	8002d6a <xQueueReceiveFromISR+0x3a>
 8002d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <xQueueReceiveFromISR+0x3e>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <xQueueReceiveFromISR+0x40>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10a      	bne.n	8002d8a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	61fb      	str	r3, [r7, #28]
}
 8002d86:	bf00      	nop
 8002d88:	e7fe      	b.n	8002d88 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d8a:	f001 fb8d 	bl	80044a8 <vPortValidateInterruptPriority>
	__asm volatile
 8002d8e:	f3ef 8211 	mrs	r2, BASEPRI
 8002d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d96:	f383 8811 	msr	BASEPRI, r3
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	f3bf 8f4f 	dsb	sy
 8002da2:	61ba      	str	r2, [r7, #24]
 8002da4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002da6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d02f      	beq.n	8002e16 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dc4:	f000 f8b6 	bl	8002f34 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dca:	1e5a      	subs	r2, r3, #1
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002dd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd8:	d112      	bne.n	8002e00 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d016      	beq.n	8002e10 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	3310      	adds	r3, #16
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 fd7a 	bl	80038e0 <xTaskRemoveFromEventList>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00e      	beq.n	8002e10 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00b      	beq.n	8002e10 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	e007      	b.n	8002e10 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e04:	3301      	adds	r3, #1
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	b25a      	sxtb	r2, r3
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002e10:	2301      	movs	r3, #1
 8002e12:	637b      	str	r3, [r7, #52]	; 0x34
 8002e14:	e001      	b.n	8002e1a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	637b      	str	r3, [r7, #52]	; 0x34
 8002e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f383 8811 	msr	BASEPRI, r3
}
 8002e24:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3738      	adds	r7, #56	; 0x38
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d006      	beq.n	8002e4e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f1c3 0307 	rsb	r3, r3, #7
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	e001      	b.n	8002e52 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002e52:	68fb      	ldr	r3, [r7, #12]
	}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10d      	bne.n	8002e9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d14d      	bne.n	8002f22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 ff6c 	bl	8003d68 <xTaskPriorityDisinherit>
 8002e90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	e043      	b.n	8002f22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d119      	bne.n	8002ed4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6858      	ldr	r0, [r3, #4]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68b9      	ldr	r1, [r7, #8]
 8002eac:	f001 fe49 	bl	8004b42 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	441a      	add	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d32b      	bcc.n	8002f22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	e026      	b.n	8002f22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	68d8      	ldr	r0, [r3, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	461a      	mov	r2, r3
 8002ede:	68b9      	ldr	r1, [r7, #8]
 8002ee0:	f001 fe2f 	bl	8004b42 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	425b      	negs	r3, r3
 8002eee:	441a      	add	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d207      	bcs.n	8002f10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	425b      	negs	r3, r3
 8002f0a:	441a      	add	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d105      	bne.n	8002f22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002f2a:	697b      	ldr	r3, [r7, #20]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d018      	beq.n	8002f78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	441a      	add	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d303      	bcc.n	8002f68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68d9      	ldr	r1, [r3, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	461a      	mov	r2, r3
 8002f72:	6838      	ldr	r0, [r7, #0]
 8002f74:	f001 fde5 	bl	8004b42 <memcpy>
	}
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f88:	f001 f9ac 	bl	80042e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f94:	e011      	b.n	8002fba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d012      	beq.n	8002fc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3324      	adds	r3, #36	; 0x24
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fc9c 	bl	80038e0 <xTaskRemoveFromEventList>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002fae:	f000 fd71 	bl	8003a94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	dce9      	bgt.n	8002f96 <prvUnlockQueue+0x16>
 8002fc2:	e000      	b.n	8002fc6 <prvUnlockQueue+0x46>
					break;
 8002fc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	22ff      	movs	r2, #255	; 0xff
 8002fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002fce:	f001 f9b9 	bl	8004344 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002fd2:	f001 f987 	bl	80042e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fde:	e011      	b.n	8003004 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d012      	beq.n	800300e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3310      	adds	r3, #16
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fc77 	bl	80038e0 <xTaskRemoveFromEventList>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ff8:	f000 fd4c 	bl	8003a94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ffc:	7bbb      	ldrb	r3, [r7, #14]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b2db      	uxtb	r3, r3
 8003002:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003004:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003008:	2b00      	cmp	r3, #0
 800300a:	dce9      	bgt.n	8002fe0 <prvUnlockQueue+0x60>
 800300c:	e000      	b.n	8003010 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800300e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	22ff      	movs	r2, #255	; 0xff
 8003014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003018:	f001 f994 	bl	8004344 <vPortExitCritical>
}
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800302c:	f001 f95a 	bl	80042e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003034:	2b00      	cmp	r3, #0
 8003036:	d102      	bne.n	800303e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003038:	2301      	movs	r3, #1
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	e001      	b.n	8003042 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003042:	f001 f97f 	bl	8004344 <vPortExitCritical>

	return xReturn;
 8003046:	68fb      	ldr	r3, [r7, #12]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003058:	f001 f944 	bl	80042e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003064:	429a      	cmp	r2, r3
 8003066:	d102      	bne.n	800306e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003068:	2301      	movs	r3, #1
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	e001      	b.n	8003072 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003072:	f001 f967 	bl	8004344 <vPortExitCritical>

	return xReturn;
 8003076:	68fb      	ldr	r3, [r7, #12]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08e      	sub	sp, #56	; 0x38
 8003084:	af04      	add	r7, sp, #16
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800308e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10a      	bne.n	80030aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	623b      	str	r3, [r7, #32]
}
 80030a6:	bf00      	nop
 80030a8:	e7fe      	b.n	80030a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80030aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10a      	bne.n	80030c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80030b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	61fb      	str	r3, [r7, #28]
}
 80030c2:	bf00      	nop
 80030c4:	e7fe      	b.n	80030c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80030c6:	23b4      	movs	r3, #180	; 0xb4
 80030c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	2bb4      	cmp	r3, #180	; 0xb4
 80030ce:	d00a      	beq.n	80030e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80030d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d4:	f383 8811 	msr	BASEPRI, r3
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	61bb      	str	r3, [r7, #24]
}
 80030e2:	bf00      	nop
 80030e4:	e7fe      	b.n	80030e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80030e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80030e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d01e      	beq.n	800312c <xTaskCreateStatic+0xac>
 80030ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01b      	beq.n	800312c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	2202      	movs	r2, #2
 8003102:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003106:	2300      	movs	r3, #0
 8003108:	9303      	str	r3, [sp, #12]
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	9302      	str	r3, [sp, #8]
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	9301      	str	r3, [sp, #4]
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 f850 	bl	80031c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003126:	f000 f8eb 	bl	8003300 <prvAddNewTaskToReadyList>
 800312a:	e001      	b.n	8003130 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003130:	697b      	ldr	r3, [r7, #20]
	}
 8003132:	4618      	mov	r0, r3
 8003134:	3728      	adds	r7, #40	; 0x28
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800313a:	b580      	push	{r7, lr}
 800313c:	b08c      	sub	sp, #48	; 0x30
 800313e:	af04      	add	r7, sp, #16
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	603b      	str	r3, [r7, #0]
 8003146:	4613      	mov	r3, r2
 8003148:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4618      	mov	r0, r3
 8003150:	f001 f9ea 	bl	8004528 <pvPortMalloc>
 8003154:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00e      	beq.n	800317a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800315c:	20b4      	movs	r0, #180	; 0xb4
 800315e:	f001 f9e3 	bl	8004528 <pvPortMalloc>
 8003162:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
 8003170:	e005      	b.n	800317e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003172:	6978      	ldr	r0, [r7, #20]
 8003174:	f001 faa4 	bl	80046c0 <vPortFree>
 8003178:	e001      	b.n	800317e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d017      	beq.n	80031b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800318c:	88fa      	ldrh	r2, [r7, #6]
 800318e:	2300      	movs	r3, #0
 8003190:	9303      	str	r3, [sp, #12]
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	9302      	str	r3, [sp, #8]
 8003196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003198:	9301      	str	r3, [sp, #4]
 800319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f80e 	bl	80031c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031a8:	69f8      	ldr	r0, [r7, #28]
 80031aa:	f000 f8a9 	bl	8003300 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80031ae:	2301      	movs	r3, #1
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	e002      	b.n	80031ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295
 80031b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80031ba:	69bb      	ldr	r3, [r7, #24]
	}
 80031bc:	4618      	mov	r0, r3
 80031be:	3720      	adds	r7, #32
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80031d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031dc:	3b01      	subs	r3, #1
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	f023 0307 	bic.w	r3, r3, #7
 80031ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <prvInitialiseNewTask+0x48>
	__asm volatile
 80031f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fa:	f383 8811 	msr	BASEPRI, r3
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	617b      	str	r3, [r7, #20]
}
 8003208:	bf00      	nop
 800320a:	e7fe      	b.n	800320a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d01f      	beq.n	8003252 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003212:	2300      	movs	r3, #0
 8003214:	61fb      	str	r3, [r7, #28]
 8003216:	e012      	b.n	800323e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	4413      	add	r3, r2
 800321e:	7819      	ldrb	r1, [r3, #0]
 8003220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	4413      	add	r3, r2
 8003226:	3334      	adds	r3, #52	; 0x34
 8003228:	460a      	mov	r2, r1
 800322a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	4413      	add	r3, r2
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d006      	beq.n	8003246 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	3301      	adds	r3, #1
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	2b0f      	cmp	r3, #15
 8003242:	d9e9      	bls.n	8003218 <prvInitialiseNewTask+0x54>
 8003244:	e000      	b.n	8003248 <prvInitialiseNewTask+0x84>
			{
				break;
 8003246:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003250:	e003      	b.n	800325a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	2b06      	cmp	r3, #6
 800325e:	d901      	bls.n	8003264 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003260:	2306      	movs	r3, #6
 8003262:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003268:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800326e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003272:	2200      	movs	r2, #0
 8003274:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003278:	3304      	adds	r3, #4
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff f8a6 	bl	80023cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	3318      	adds	r3, #24
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff f8a1 	bl	80023cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800328e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	f1c3 0207 	rsb	r2, r3, #7
 8003296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003298:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800329e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80032a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a2:	2200      	movs	r2, #0
 80032a4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80032b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b2:	334c      	adds	r3, #76	; 0x4c
 80032b4:	2260      	movs	r2, #96	; 0x60
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f001 fc50 	bl	8004b5e <memset>
 80032be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c0:	4a0c      	ldr	r2, [pc, #48]	; (80032f4 <prvInitialiseNewTask+0x130>)
 80032c2:	651a      	str	r2, [r3, #80]	; 0x50
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c6:	4a0c      	ldr	r2, [pc, #48]	; (80032f8 <prvInitialiseNewTask+0x134>)
 80032c8:	655a      	str	r2, [r3, #84]	; 0x54
 80032ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032cc:	4a0b      	ldr	r2, [pc, #44]	; (80032fc <prvInitialiseNewTask+0x138>)
 80032ce:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	68f9      	ldr	r1, [r7, #12]
 80032d4:	69b8      	ldr	r0, [r7, #24]
 80032d6:	f000 fed5 	bl	8004084 <pxPortInitialiseStack>
 80032da:	4602      	mov	r2, r0
 80032dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80032e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032ec:	bf00      	nop
 80032ee:	3720      	adds	r7, #32
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	08005b9c 	.word	0x08005b9c
 80032f8:	08005bbc 	.word	0x08005bbc
 80032fc:	08005b7c 	.word	0x08005b7c

08003300 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003308:	f000 ffec 	bl	80042e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800330c:	4b2a      	ldr	r3, [pc, #168]	; (80033b8 <prvAddNewTaskToReadyList+0xb8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3301      	adds	r3, #1
 8003312:	4a29      	ldr	r2, [pc, #164]	; (80033b8 <prvAddNewTaskToReadyList+0xb8>)
 8003314:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003316:	4b29      	ldr	r3, [pc, #164]	; (80033bc <prvAddNewTaskToReadyList+0xbc>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800331e:	4a27      	ldr	r2, [pc, #156]	; (80033bc <prvAddNewTaskToReadyList+0xbc>)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003324:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <prvAddNewTaskToReadyList+0xb8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d110      	bne.n	800334e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800332c:	f000 fbc6 	bl	8003abc <prvInitialiseTaskLists>
 8003330:	e00d      	b.n	800334e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003332:	4b23      	ldr	r3, [pc, #140]	; (80033c0 <prvAddNewTaskToReadyList+0xc0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d109      	bne.n	800334e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800333a:	4b20      	ldr	r3, [pc, #128]	; (80033bc <prvAddNewTaskToReadyList+0xbc>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	429a      	cmp	r2, r3
 8003346:	d802      	bhi.n	800334e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003348:	4a1c      	ldr	r2, [pc, #112]	; (80033bc <prvAddNewTaskToReadyList+0xbc>)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800334e:	4b1d      	ldr	r3, [pc, #116]	; (80033c4 <prvAddNewTaskToReadyList+0xc4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3301      	adds	r3, #1
 8003354:	4a1b      	ldr	r2, [pc, #108]	; (80033c4 <prvAddNewTaskToReadyList+0xc4>)
 8003356:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	2201      	movs	r2, #1
 800335e:	409a      	lsls	r2, r3
 8003360:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <prvAddNewTaskToReadyList+0xc8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4313      	orrs	r3, r2
 8003366:	4a18      	ldr	r2, [pc, #96]	; (80033c8 <prvAddNewTaskToReadyList+0xc8>)
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4a15      	ldr	r2, [pc, #84]	; (80033cc <prvAddNewTaskToReadyList+0xcc>)
 8003378:	441a      	add	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3304      	adds	r3, #4
 800337e:	4619      	mov	r1, r3
 8003380:	4610      	mov	r0, r2
 8003382:	f7ff f830 	bl	80023e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003386:	f000 ffdd 	bl	8004344 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800338a:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <prvAddNewTaskToReadyList+0xc0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00e      	beq.n	80033b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003392:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <prvAddNewTaskToReadyList+0xbc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	429a      	cmp	r2, r3
 800339e:	d207      	bcs.n	80033b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <prvAddNewTaskToReadyList+0xd0>)
 80033a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033b0:	bf00      	nop
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	200004c8 	.word	0x200004c8
 80033bc:	200003c8 	.word	0x200003c8
 80033c0:	200004d4 	.word	0x200004d4
 80033c4:	200004e4 	.word	0x200004e4
 80033c8:	200004d0 	.word	0x200004d0
 80033cc:	200003cc 	.word	0x200003cc
 80033d0:	e000ed04 	.word	0xe000ed04

080033d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d017      	beq.n	8003416 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <vTaskDelay+0x60>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <vTaskDelay+0x30>
	__asm volatile
 80033ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f2:	f383 8811 	msr	BASEPRI, r3
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	f3bf 8f4f 	dsb	sy
 80033fe:	60bb      	str	r3, [r7, #8]
}
 8003400:	bf00      	nop
 8003402:	e7fe      	b.n	8003402 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003404:	f000 f884 	bl	8003510 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003408:	2100      	movs	r1, #0
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fdd4 	bl	8003fb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003410:	f000 f88c 	bl	800352c <xTaskResumeAll>
 8003414:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d107      	bne.n	800342c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <vTaskDelay+0x64>)
 800341e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800342c:	bf00      	nop
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	200004f0 	.word	0x200004f0
 8003438:	e000ed04 	.word	0xe000ed04

0800343c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08a      	sub	sp, #40	; 0x28
 8003440:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003442:	2300      	movs	r3, #0
 8003444:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003446:	2300      	movs	r3, #0
 8003448:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800344a:	463a      	mov	r2, r7
 800344c:	1d39      	adds	r1, r7, #4
 800344e:	f107 0308 	add.w	r3, r7, #8
 8003452:	4618      	mov	r0, r3
 8003454:	f7fd f88e 	bl	8000574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003458:	6839      	ldr	r1, [r7, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	9202      	str	r2, [sp, #8]
 8003460:	9301      	str	r3, [sp, #4]
 8003462:	2300      	movs	r3, #0
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	2300      	movs	r3, #0
 8003468:	460a      	mov	r2, r1
 800346a:	4921      	ldr	r1, [pc, #132]	; (80034f0 <vTaskStartScheduler+0xb4>)
 800346c:	4821      	ldr	r0, [pc, #132]	; (80034f4 <vTaskStartScheduler+0xb8>)
 800346e:	f7ff fe07 	bl	8003080 <xTaskCreateStatic>
 8003472:	4603      	mov	r3, r0
 8003474:	4a20      	ldr	r2, [pc, #128]	; (80034f8 <vTaskStartScheduler+0xbc>)
 8003476:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003478:	4b1f      	ldr	r3, [pc, #124]	; (80034f8 <vTaskStartScheduler+0xbc>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003480:	2301      	movs	r3, #1
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	e001      	b.n	800348a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d11b      	bne.n	80034c8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	613b      	str	r3, [r7, #16]
}
 80034a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80034a4:	4b15      	ldr	r3, [pc, #84]	; (80034fc <vTaskStartScheduler+0xc0>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	334c      	adds	r3, #76	; 0x4c
 80034aa:	4a15      	ldr	r2, [pc, #84]	; (8003500 <vTaskStartScheduler+0xc4>)
 80034ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034ae:	4b15      	ldr	r3, [pc, #84]	; (8003504 <vTaskStartScheduler+0xc8>)
 80034b0:	f04f 32ff 	mov.w	r2, #4294967295
 80034b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034b6:	4b14      	ldr	r3, [pc, #80]	; (8003508 <vTaskStartScheduler+0xcc>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80034bc:	4b13      	ldr	r3, [pc, #76]	; (800350c <vTaskStartScheduler+0xd0>)
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034c2:	f000 fe6d 	bl	80041a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034c6:	e00e      	b.n	80034e6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ce:	d10a      	bne.n	80034e6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	60fb      	str	r3, [r7, #12]
}
 80034e2:	bf00      	nop
 80034e4:	e7fe      	b.n	80034e4 <vTaskStartScheduler+0xa8>
}
 80034e6:	bf00      	nop
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	08005b5c 	.word	0x08005b5c
 80034f4:	08003aad 	.word	0x08003aad
 80034f8:	200004ec 	.word	0x200004ec
 80034fc:	200003c8 	.word	0x200003c8
 8003500:	20000034 	.word	0x20000034
 8003504:	200004e8 	.word	0x200004e8
 8003508:	200004d4 	.word	0x200004d4
 800350c:	200004cc 	.word	0x200004cc

08003510 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003514:	4b04      	ldr	r3, [pc, #16]	; (8003528 <vTaskSuspendAll+0x18>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3301      	adds	r3, #1
 800351a:	4a03      	ldr	r2, [pc, #12]	; (8003528 <vTaskSuspendAll+0x18>)
 800351c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800351e:	bf00      	nop
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	200004f0 	.word	0x200004f0

0800352c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800353a:	4b41      	ldr	r3, [pc, #260]	; (8003640 <xTaskResumeAll+0x114>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10a      	bne.n	8003558 <xTaskResumeAll+0x2c>
	__asm volatile
 8003542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	603b      	str	r3, [r7, #0]
}
 8003554:	bf00      	nop
 8003556:	e7fe      	b.n	8003556 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003558:	f000 fec4 	bl	80042e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800355c:	4b38      	ldr	r3, [pc, #224]	; (8003640 <xTaskResumeAll+0x114>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3b01      	subs	r3, #1
 8003562:	4a37      	ldr	r2, [pc, #220]	; (8003640 <xTaskResumeAll+0x114>)
 8003564:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003566:	4b36      	ldr	r3, [pc, #216]	; (8003640 <xTaskResumeAll+0x114>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d161      	bne.n	8003632 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800356e:	4b35      	ldr	r3, [pc, #212]	; (8003644 <xTaskResumeAll+0x118>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d05d      	beq.n	8003632 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003576:	e02e      	b.n	80035d6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003578:	4b33      	ldr	r3, [pc, #204]	; (8003648 <xTaskResumeAll+0x11c>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	3318      	adds	r3, #24
 8003584:	4618      	mov	r0, r3
 8003586:	f7fe ff8b 	bl	80024a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3304      	adds	r3, #4
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe ff86 	bl	80024a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	2201      	movs	r2, #1
 800359a:	409a      	lsls	r2, r3
 800359c:	4b2b      	ldr	r3, [pc, #172]	; (800364c <xTaskResumeAll+0x120>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	4a2a      	ldr	r2, [pc, #168]	; (800364c <xTaskResumeAll+0x120>)
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4a27      	ldr	r2, [pc, #156]	; (8003650 <xTaskResumeAll+0x124>)
 80035b4:	441a      	add	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3304      	adds	r3, #4
 80035ba:	4619      	mov	r1, r3
 80035bc:	4610      	mov	r0, r2
 80035be:	f7fe ff12 	bl	80023e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c6:	4b23      	ldr	r3, [pc, #140]	; (8003654 <xTaskResumeAll+0x128>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d302      	bcc.n	80035d6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80035d0:	4b21      	ldr	r3, [pc, #132]	; (8003658 <xTaskResumeAll+0x12c>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035d6:	4b1c      	ldr	r3, [pc, #112]	; (8003648 <xTaskResumeAll+0x11c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1cc      	bne.n	8003578 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035e4:	f000 fb0c 	bl	8003c00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80035e8:	4b1c      	ldr	r3, [pc, #112]	; (800365c <xTaskResumeAll+0x130>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d010      	beq.n	8003616 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80035f4:	f000 f836 	bl	8003664 <xTaskIncrementTick>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80035fe:	4b16      	ldr	r3, [pc, #88]	; (8003658 <xTaskResumeAll+0x12c>)
 8003600:	2201      	movs	r2, #1
 8003602:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3b01      	subs	r3, #1
 8003608:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f1      	bne.n	80035f4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003610:	4b12      	ldr	r3, [pc, #72]	; (800365c <xTaskResumeAll+0x130>)
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003616:	4b10      	ldr	r3, [pc, #64]	; (8003658 <xTaskResumeAll+0x12c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d009      	beq.n	8003632 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800361e:	2301      	movs	r3, #1
 8003620:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003622:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <xTaskResumeAll+0x134>)
 8003624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	f3bf 8f4f 	dsb	sy
 800362e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003632:	f000 fe87 	bl	8004344 <vPortExitCritical>

	return xAlreadyYielded;
 8003636:	68bb      	ldr	r3, [r7, #8]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	200004f0 	.word	0x200004f0
 8003644:	200004c8 	.word	0x200004c8
 8003648:	20000488 	.word	0x20000488
 800364c:	200004d0 	.word	0x200004d0
 8003650:	200003cc 	.word	0x200003cc
 8003654:	200003c8 	.word	0x200003c8
 8003658:	200004dc 	.word	0x200004dc
 800365c:	200004d8 	.word	0x200004d8
 8003660:	e000ed04 	.word	0xe000ed04

08003664 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800366e:	4b4e      	ldr	r3, [pc, #312]	; (80037a8 <xTaskIncrementTick+0x144>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	f040 808e 	bne.w	8003794 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003678:	4b4c      	ldr	r3, [pc, #304]	; (80037ac <xTaskIncrementTick+0x148>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3301      	adds	r3, #1
 800367e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003680:	4a4a      	ldr	r2, [pc, #296]	; (80037ac <xTaskIncrementTick+0x148>)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d120      	bne.n	80036ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800368c:	4b48      	ldr	r3, [pc, #288]	; (80037b0 <xTaskIncrementTick+0x14c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <xTaskIncrementTick+0x48>
	__asm volatile
 8003696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369a:	f383 8811 	msr	BASEPRI, r3
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	603b      	str	r3, [r7, #0]
}
 80036a8:	bf00      	nop
 80036aa:	e7fe      	b.n	80036aa <xTaskIncrementTick+0x46>
 80036ac:	4b40      	ldr	r3, [pc, #256]	; (80037b0 <xTaskIncrementTick+0x14c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	4b40      	ldr	r3, [pc, #256]	; (80037b4 <xTaskIncrementTick+0x150>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a3e      	ldr	r2, [pc, #248]	; (80037b0 <xTaskIncrementTick+0x14c>)
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	4a3e      	ldr	r2, [pc, #248]	; (80037b4 <xTaskIncrementTick+0x150>)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	4b3d      	ldr	r3, [pc, #244]	; (80037b8 <xTaskIncrementTick+0x154>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3301      	adds	r3, #1
 80036c6:	4a3c      	ldr	r2, [pc, #240]	; (80037b8 <xTaskIncrementTick+0x154>)
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	f000 fa99 	bl	8003c00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80036ce:	4b3b      	ldr	r3, [pc, #236]	; (80037bc <xTaskIncrementTick+0x158>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d348      	bcc.n	800376a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036d8:	4b35      	ldr	r3, [pc, #212]	; (80037b0 <xTaskIncrementTick+0x14c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d104      	bne.n	80036ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036e2:	4b36      	ldr	r3, [pc, #216]	; (80037bc <xTaskIncrementTick+0x158>)
 80036e4:	f04f 32ff 	mov.w	r2, #4294967295
 80036e8:	601a      	str	r2, [r3, #0]
					break;
 80036ea:	e03e      	b.n	800376a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036ec:	4b30      	ldr	r3, [pc, #192]	; (80037b0 <xTaskIncrementTick+0x14c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	429a      	cmp	r2, r3
 8003702:	d203      	bcs.n	800370c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003704:	4a2d      	ldr	r2, [pc, #180]	; (80037bc <xTaskIncrementTick+0x158>)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800370a:	e02e      	b.n	800376a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	3304      	adds	r3, #4
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe fec5 	bl	80024a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	2b00      	cmp	r3, #0
 800371c:	d004      	beq.n	8003728 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	3318      	adds	r3, #24
 8003722:	4618      	mov	r0, r3
 8003724:	f7fe febc 	bl	80024a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	2201      	movs	r2, #1
 800372e:	409a      	lsls	r2, r3
 8003730:	4b23      	ldr	r3, [pc, #140]	; (80037c0 <xTaskIncrementTick+0x15c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4313      	orrs	r3, r2
 8003736:	4a22      	ldr	r2, [pc, #136]	; (80037c0 <xTaskIncrementTick+0x15c>)
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4a1f      	ldr	r2, [pc, #124]	; (80037c4 <xTaskIncrementTick+0x160>)
 8003748:	441a      	add	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	3304      	adds	r3, #4
 800374e:	4619      	mov	r1, r3
 8003750:	4610      	mov	r0, r2
 8003752:	f7fe fe48 	bl	80023e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375a:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <xTaskIncrementTick+0x164>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	429a      	cmp	r2, r3
 8003762:	d3b9      	bcc.n	80036d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003764:	2301      	movs	r3, #1
 8003766:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003768:	e7b6      	b.n	80036d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800376a:	4b17      	ldr	r3, [pc, #92]	; (80037c8 <xTaskIncrementTick+0x164>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003770:	4914      	ldr	r1, [pc, #80]	; (80037c4 <xTaskIncrementTick+0x160>)
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d901      	bls.n	8003786 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003782:	2301      	movs	r3, #1
 8003784:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003786:	4b11      	ldr	r3, [pc, #68]	; (80037cc <xTaskIncrementTick+0x168>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800378e:	2301      	movs	r3, #1
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	e004      	b.n	800379e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003794:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <xTaskIncrementTick+0x16c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3301      	adds	r3, #1
 800379a:	4a0d      	ldr	r2, [pc, #52]	; (80037d0 <xTaskIncrementTick+0x16c>)
 800379c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800379e:	697b      	ldr	r3, [r7, #20]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	200004f0 	.word	0x200004f0
 80037ac:	200004cc 	.word	0x200004cc
 80037b0:	20000480 	.word	0x20000480
 80037b4:	20000484 	.word	0x20000484
 80037b8:	200004e0 	.word	0x200004e0
 80037bc:	200004e8 	.word	0x200004e8
 80037c0:	200004d0 	.word	0x200004d0
 80037c4:	200003cc 	.word	0x200003cc
 80037c8:	200003c8 	.word	0x200003c8
 80037cc:	200004dc 	.word	0x200004dc
 80037d0:	200004d8 	.word	0x200004d8

080037d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037da:	4b29      	ldr	r3, [pc, #164]	; (8003880 <vTaskSwitchContext+0xac>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80037e2:	4b28      	ldr	r3, [pc, #160]	; (8003884 <vTaskSwitchContext+0xb0>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80037e8:	e044      	b.n	8003874 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80037ea:	4b26      	ldr	r3, [pc, #152]	; (8003884 <vTaskSwitchContext+0xb0>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037f0:	4b25      	ldr	r3, [pc, #148]	; (8003888 <vTaskSwitchContext+0xb4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	fab3 f383 	clz	r3, r3
 80037fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80037fe:	7afb      	ldrb	r3, [r7, #11]
 8003800:	f1c3 031f 	rsb	r3, r3, #31
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	4921      	ldr	r1, [pc, #132]	; (800388c <vTaskSwitchContext+0xb8>)
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <vTaskSwitchContext+0x5c>
	__asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	607b      	str	r3, [r7, #4]
}
 800382c:	bf00      	nop
 800382e:	e7fe      	b.n	800382e <vTaskSwitchContext+0x5a>
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4a14      	ldr	r2, [pc, #80]	; (800388c <vTaskSwitchContext+0xb8>)
 800383c:	4413      	add	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	3308      	adds	r3, #8
 8003852:	429a      	cmp	r2, r3
 8003854:	d104      	bne.n	8003860 <vTaskSwitchContext+0x8c>
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	605a      	str	r2, [r3, #4]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <vTaskSwitchContext+0xbc>)
 8003868:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800386a:	4b09      	ldr	r3, [pc, #36]	; (8003890 <vTaskSwitchContext+0xbc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	334c      	adds	r3, #76	; 0x4c
 8003870:	4a08      	ldr	r2, [pc, #32]	; (8003894 <vTaskSwitchContext+0xc0>)
 8003872:	6013      	str	r3, [r2, #0]
}
 8003874:	bf00      	nop
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	200004f0 	.word	0x200004f0
 8003884:	200004dc 	.word	0x200004dc
 8003888:	200004d0 	.word	0x200004d0
 800388c:	200003cc 	.word	0x200003cc
 8003890:	200003c8 	.word	0x200003c8
 8003894:	20000034 	.word	0x20000034

08003898 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10a      	bne.n	80038be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80038a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ac:	f383 8811 	msr	BASEPRI, r3
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	60fb      	str	r3, [r7, #12]
}
 80038ba:	bf00      	nop
 80038bc:	e7fe      	b.n	80038bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038be:	4b07      	ldr	r3, [pc, #28]	; (80038dc <vTaskPlaceOnEventList+0x44>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3318      	adds	r3, #24
 80038c4:	4619      	mov	r1, r3
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fe fdb1 	bl	800242e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038cc:	2101      	movs	r1, #1
 80038ce:	6838      	ldr	r0, [r7, #0]
 80038d0:	f000 fb72 	bl	8003fb8 <prvAddCurrentTaskToDelayedList>
}
 80038d4:	bf00      	nop
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	200003c8 	.word	0x200003c8

080038e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10a      	bne.n	800390c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80038f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	60fb      	str	r3, [r7, #12]
}
 8003908:	bf00      	nop
 800390a:	e7fe      	b.n	800390a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	3318      	adds	r3, #24
 8003910:	4618      	mov	r0, r3
 8003912:	f7fe fdc5 	bl	80024a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003916:	4b1d      	ldr	r3, [pc, #116]	; (800398c <xTaskRemoveFromEventList+0xac>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d11c      	bne.n	8003958 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	3304      	adds	r3, #4
 8003922:	4618      	mov	r0, r3
 8003924:	f7fe fdbc 	bl	80024a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	2201      	movs	r2, #1
 800392e:	409a      	lsls	r2, r3
 8003930:	4b17      	ldr	r3, [pc, #92]	; (8003990 <xTaskRemoveFromEventList+0xb0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4313      	orrs	r3, r2
 8003936:	4a16      	ldr	r2, [pc, #88]	; (8003990 <xTaskRemoveFromEventList+0xb0>)
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393e:	4613      	mov	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4a13      	ldr	r2, [pc, #76]	; (8003994 <xTaskRemoveFromEventList+0xb4>)
 8003948:	441a      	add	r2, r3
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	3304      	adds	r3, #4
 800394e:	4619      	mov	r1, r3
 8003950:	4610      	mov	r0, r2
 8003952:	f7fe fd48 	bl	80023e6 <vListInsertEnd>
 8003956:	e005      	b.n	8003964 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	3318      	adds	r3, #24
 800395c:	4619      	mov	r1, r3
 800395e:	480e      	ldr	r0, [pc, #56]	; (8003998 <xTaskRemoveFromEventList+0xb8>)
 8003960:	f7fe fd41 	bl	80023e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003968:	4b0c      	ldr	r3, [pc, #48]	; (800399c <xTaskRemoveFromEventList+0xbc>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	429a      	cmp	r2, r3
 8003970:	d905      	bls.n	800397e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003972:	2301      	movs	r3, #1
 8003974:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003976:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <xTaskRemoveFromEventList+0xc0>)
 8003978:	2201      	movs	r2, #1
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	e001      	b.n	8003982 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003982:	697b      	ldr	r3, [r7, #20]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	200004f0 	.word	0x200004f0
 8003990:	200004d0 	.word	0x200004d0
 8003994:	200003cc 	.word	0x200003cc
 8003998:	20000488 	.word	0x20000488
 800399c:	200003c8 	.word	0x200003c8
 80039a0:	200004dc 	.word	0x200004dc

080039a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039ac:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <vTaskInternalSetTimeOutState+0x24>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <vTaskInternalSetTimeOutState+0x28>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	605a      	str	r2, [r3, #4]
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	200004e0 	.word	0x200004e0
 80039cc:	200004cc 	.word	0x200004cc

080039d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10a      	bne.n	80039f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80039e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	613b      	str	r3, [r7, #16]
}
 80039f2:	bf00      	nop
 80039f4:	e7fe      	b.n	80039f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10a      	bne.n	8003a12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	60fb      	str	r3, [r7, #12]
}
 8003a0e:	bf00      	nop
 8003a10:	e7fe      	b.n	8003a10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003a12:	f000 fc67 	bl	80042e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a16:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <xTaskCheckForTimeOut+0xbc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2e:	d102      	bne.n	8003a36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	e023      	b.n	8003a7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <xTaskCheckForTimeOut+0xc0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d007      	beq.n	8003a52 <xTaskCheckForTimeOut+0x82>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d302      	bcc.n	8003a52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	61fb      	str	r3, [r7, #28]
 8003a50:	e015      	b.n	8003a7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d20b      	bcs.n	8003a74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	1ad2      	subs	r2, r2, r3
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff ff9b 	bl	80039a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	e004      	b.n	8003a7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003a7e:	f000 fc61 	bl	8004344 <vPortExitCritical>

	return xReturn;
 8003a82:	69fb      	ldr	r3, [r7, #28]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	200004cc 	.word	0x200004cc
 8003a90:	200004e0 	.word	0x200004e0

08003a94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a98:	4b03      	ldr	r3, [pc, #12]	; (8003aa8 <vTaskMissedYield+0x14>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]
}
 8003a9e:	bf00      	nop
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	200004dc 	.word	0x200004dc

08003aac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ab4:	f000 f842 	bl	8003b3c <prvCheckTasksWaitingTermination>
 8003ab8:	e7fc      	b.n	8003ab4 <prvIdleTask+0x8>
	...

08003abc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	607b      	str	r3, [r7, #4]
 8003ac6:	e00c      	b.n	8003ae2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4a12      	ldr	r2, [pc, #72]	; (8003b1c <prvInitialiseTaskLists+0x60>)
 8003ad4:	4413      	add	r3, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe fc58 	bl	800238c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	607b      	str	r3, [r7, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b06      	cmp	r3, #6
 8003ae6:	d9ef      	bls.n	8003ac8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ae8:	480d      	ldr	r0, [pc, #52]	; (8003b20 <prvInitialiseTaskLists+0x64>)
 8003aea:	f7fe fc4f 	bl	800238c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003aee:	480d      	ldr	r0, [pc, #52]	; (8003b24 <prvInitialiseTaskLists+0x68>)
 8003af0:	f7fe fc4c 	bl	800238c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003af4:	480c      	ldr	r0, [pc, #48]	; (8003b28 <prvInitialiseTaskLists+0x6c>)
 8003af6:	f7fe fc49 	bl	800238c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003afa:	480c      	ldr	r0, [pc, #48]	; (8003b2c <prvInitialiseTaskLists+0x70>)
 8003afc:	f7fe fc46 	bl	800238c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b00:	480b      	ldr	r0, [pc, #44]	; (8003b30 <prvInitialiseTaskLists+0x74>)
 8003b02:	f7fe fc43 	bl	800238c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b06:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <prvInitialiseTaskLists+0x78>)
 8003b08:	4a05      	ldr	r2, [pc, #20]	; (8003b20 <prvInitialiseTaskLists+0x64>)
 8003b0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <prvInitialiseTaskLists+0x7c>)
 8003b0e:	4a05      	ldr	r2, [pc, #20]	; (8003b24 <prvInitialiseTaskLists+0x68>)
 8003b10:	601a      	str	r2, [r3, #0]
}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	200003cc 	.word	0x200003cc
 8003b20:	20000458 	.word	0x20000458
 8003b24:	2000046c 	.word	0x2000046c
 8003b28:	20000488 	.word	0x20000488
 8003b2c:	2000049c 	.word	0x2000049c
 8003b30:	200004b4 	.word	0x200004b4
 8003b34:	20000480 	.word	0x20000480
 8003b38:	20000484 	.word	0x20000484

08003b3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b42:	e019      	b.n	8003b78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b44:	f000 fbce 	bl	80042e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b48:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <prvCheckTasksWaitingTermination+0x50>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3304      	adds	r3, #4
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fe fca3 	bl	80024a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b5a:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <prvCheckTasksWaitingTermination+0x54>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	4a0b      	ldr	r2, [pc, #44]	; (8003b90 <prvCheckTasksWaitingTermination+0x54>)
 8003b62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b64:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <prvCheckTasksWaitingTermination+0x58>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	4a0a      	ldr	r2, [pc, #40]	; (8003b94 <prvCheckTasksWaitingTermination+0x58>)
 8003b6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b6e:	f000 fbe9 	bl	8004344 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f810 	bl	8003b98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b78:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <prvCheckTasksWaitingTermination+0x58>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e1      	bne.n	8003b44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	2000049c 	.word	0x2000049c
 8003b90:	200004c8 	.word	0x200004c8
 8003b94:	200004b0 	.word	0x200004b0

08003b98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	334c      	adds	r3, #76	; 0x4c
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f001 f913 	bl	8004dd0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d108      	bne.n	8003bc6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fd81 	bl	80046c0 <vPortFree>
				vPortFree( pxTCB );
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fd7e 	bl	80046c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003bc4:	e018      	b.n	8003bf8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d103      	bne.n	8003bd8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fd75 	bl	80046c0 <vPortFree>
	}
 8003bd6:	e00f      	b.n	8003bf8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d00a      	beq.n	8003bf8 <prvDeleteTCB+0x60>
	__asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	60fb      	str	r3, [r7, #12]
}
 8003bf4:	bf00      	nop
 8003bf6:	e7fe      	b.n	8003bf6 <prvDeleteTCB+0x5e>
	}
 8003bf8:	bf00      	nop
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c06:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <prvResetNextTaskUnblockTime+0x38>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d104      	bne.n	8003c1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c10:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <prvResetNextTaskUnblockTime+0x3c>)
 8003c12:	f04f 32ff 	mov.w	r2, #4294967295
 8003c16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c18:	e008      	b.n	8003c2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c1a:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <prvResetNextTaskUnblockTime+0x38>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	4a04      	ldr	r2, [pc, #16]	; (8003c3c <prvResetNextTaskUnblockTime+0x3c>)
 8003c2a:	6013      	str	r3, [r2, #0]
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	20000480 	.word	0x20000480
 8003c3c:	200004e8 	.word	0x200004e8

08003c40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c46:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <xTaskGetSchedulerState+0x34>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d102      	bne.n	8003c54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	607b      	str	r3, [r7, #4]
 8003c52:	e008      	b.n	8003c66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c54:	4b08      	ldr	r3, [pc, #32]	; (8003c78 <xTaskGetSchedulerState+0x38>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d102      	bne.n	8003c62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	607b      	str	r3, [r7, #4]
 8003c60:	e001      	b.n	8003c66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c62:	2300      	movs	r3, #0
 8003c64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c66:	687b      	ldr	r3, [r7, #4]
	}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	200004d4 	.word	0x200004d4
 8003c78:	200004f0 	.word	0x200004f0

08003c7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d05e      	beq.n	8003d50 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c96:	4b31      	ldr	r3, [pc, #196]	; (8003d5c <xTaskPriorityInherit+0xe0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d24e      	bcs.n	8003d3e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	db06      	blt.n	8003cb6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ca8:	4b2c      	ldr	r3, [pc, #176]	; (8003d5c <xTaskPriorityInherit+0xe0>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	f1c3 0207 	rsb	r2, r3, #7
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	6959      	ldr	r1, [r3, #20]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4a26      	ldr	r2, [pc, #152]	; (8003d60 <xTaskPriorityInherit+0xe4>)
 8003cc8:	4413      	add	r3, r2
 8003cca:	4299      	cmp	r1, r3
 8003ccc:	d12f      	bne.n	8003d2e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fe fbe4 	bl	80024a0 <uxListRemove>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10a      	bne.n	8003cf4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	43da      	mvns	r2, r3
 8003cea:	4b1e      	ldr	r3, [pc, #120]	; (8003d64 <xTaskPriorityInherit+0xe8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	4a1c      	ldr	r2, [pc, #112]	; (8003d64 <xTaskPriorityInherit+0xe8>)
 8003cf2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003cf4:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <xTaskPriorityInherit+0xe0>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	2201      	movs	r2, #1
 8003d04:	409a      	lsls	r2, r3
 8003d06:	4b17      	ldr	r3, [pc, #92]	; (8003d64 <xTaskPriorityInherit+0xe8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	4a15      	ldr	r2, [pc, #84]	; (8003d64 <xTaskPriorityInherit+0xe8>)
 8003d0e:	6013      	str	r3, [r2, #0]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d14:	4613      	mov	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4a10      	ldr	r2, [pc, #64]	; (8003d60 <xTaskPriorityInherit+0xe4>)
 8003d1e:	441a      	add	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	3304      	adds	r3, #4
 8003d24:	4619      	mov	r1, r3
 8003d26:	4610      	mov	r0, r2
 8003d28:	f7fe fb5d 	bl	80023e6 <vListInsertEnd>
 8003d2c:	e004      	b.n	8003d38 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003d2e:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <xTaskPriorityInherit+0xe0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	e008      	b.n	8003d50 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d42:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <xTaskPriorityInherit+0xe0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d201      	bcs.n	8003d50 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d50:	68fb      	ldr	r3, [r7, #12]
	}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	200003c8 	.word	0x200003c8
 8003d60:	200003cc 	.word	0x200003cc
 8003d64:	200004d0 	.word	0x200004d0

08003d68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d06e      	beq.n	8003e5c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d7e:	4b3a      	ldr	r3, [pc, #232]	; (8003e68 <xTaskPriorityDisinherit+0x100>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d00a      	beq.n	8003d9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8c:	f383 8811 	msr	BASEPRI, r3
 8003d90:	f3bf 8f6f 	isb	sy
 8003d94:	f3bf 8f4f 	dsb	sy
 8003d98:	60fb      	str	r3, [r7, #12]
}
 8003d9a:	bf00      	nop
 8003d9c:	e7fe      	b.n	8003d9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10a      	bne.n	8003dbc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	60bb      	str	r3, [r7, #8]
}
 8003db8:	bf00      	nop
 8003dba:	e7fe      	b.n	8003dba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc0:	1e5a      	subs	r2, r3, #1
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d044      	beq.n	8003e5c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d140      	bne.n	8003e5c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fe fb5e 	bl	80024a0 <uxListRemove>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d115      	bne.n	8003e16 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dee:	491f      	ldr	r1, [pc, #124]	; (8003e6c <xTaskPriorityDisinherit+0x104>)
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10a      	bne.n	8003e16 <xTaskPriorityDisinherit+0xae>
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	2201      	movs	r2, #1
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	4b18      	ldr	r3, [pc, #96]	; (8003e70 <xTaskPriorityDisinherit+0x108>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4013      	ands	r3, r2
 8003e12:	4a17      	ldr	r2, [pc, #92]	; (8003e70 <xTaskPriorityDisinherit+0x108>)
 8003e14:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	f1c3 0207 	rsb	r2, r3, #7
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	2201      	movs	r2, #1
 8003e30:	409a      	lsls	r2, r3
 8003e32:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <xTaskPriorityDisinherit+0x108>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	4a0d      	ldr	r2, [pc, #52]	; (8003e70 <xTaskPriorityDisinherit+0x108>)
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4a08      	ldr	r2, [pc, #32]	; (8003e6c <xTaskPriorityDisinherit+0x104>)
 8003e4a:	441a      	add	r2, r3
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	4619      	mov	r1, r3
 8003e52:	4610      	mov	r0, r2
 8003e54:	f7fe fac7 	bl	80023e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e5c:	697b      	ldr	r3, [r7, #20]
	}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	200003c8 	.word	0x200003c8
 8003e6c:	200003cc 	.word	0x200003cc
 8003e70:	200004d0 	.word	0x200004d0

08003e74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003e82:	2301      	movs	r3, #1
 8003e84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d077      	beq.n	8003f7c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10a      	bne.n	8003eaa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	60fb      	str	r3, [r7, #12]
}
 8003ea6:	bf00      	nop
 8003ea8:	e7fe      	b.n	8003ea8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d902      	bls.n	8003eba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	61fb      	str	r3, [r7, #28]
 8003eb8:	e002      	b.n	8003ec0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d058      	beq.n	8003f7c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d153      	bne.n	8003f7c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003ed4:	4b2b      	ldr	r3, [pc, #172]	; (8003f84 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d10a      	bne.n	8003ef4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	60bb      	str	r3, [r7, #8]
}
 8003ef0:	bf00      	nop
 8003ef2:	e7fe      	b.n	8003ef2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	69fa      	ldr	r2, [r7, #28]
 8003efe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	db04      	blt.n	8003f12 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f1c3 0207 	rsb	r2, r3, #7
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	6959      	ldr	r1, [r3, #20]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4a19      	ldr	r2, [pc, #100]	; (8003f88 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003f22:	4413      	add	r3, r2
 8003f24:	4299      	cmp	r1, r3
 8003f26:	d129      	bne.n	8003f7c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fe fab7 	bl	80024a0 <uxListRemove>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	43da      	mvns	r2, r3
 8003f44:	4b11      	ldr	r3, [pc, #68]	; (8003f8c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	4a10      	ldr	r2, [pc, #64]	; (8003f8c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003f4c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	2201      	movs	r2, #1
 8003f54:	409a      	lsls	r2, r3
 8003f56:	4b0d      	ldr	r3, [pc, #52]	; (8003f8c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	4a0b      	ldr	r2, [pc, #44]	; (8003f8c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4a06      	ldr	r2, [pc, #24]	; (8003f88 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003f6e:	441a      	add	r2, r3
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	3304      	adds	r3, #4
 8003f74:	4619      	mov	r1, r3
 8003f76:	4610      	mov	r0, r2
 8003f78:	f7fe fa35 	bl	80023e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f7c:	bf00      	nop
 8003f7e:	3720      	adds	r7, #32
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	200003c8 	.word	0x200003c8
 8003f88:	200003cc 	.word	0x200003cc
 8003f8c:	200004d0 	.word	0x200004d0

08003f90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003f94:	4b07      	ldr	r3, [pc, #28]	; (8003fb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d004      	beq.n	8003fa6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003f9c:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fa2:	3201      	adds	r2, #1
 8003fa4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003fa6:	4b03      	ldr	r3, [pc, #12]	; (8003fb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
	}
 8003faa:	4618      	mov	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	200003c8 	.word	0x200003c8

08003fb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fc2:	4b29      	ldr	r3, [pc, #164]	; (8004068 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fc8:	4b28      	ldr	r3, [pc, #160]	; (800406c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fe fa66 	bl	80024a0 <uxListRemove>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10b      	bne.n	8003ff2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003fda:	4b24      	ldr	r3, [pc, #144]	; (800406c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	43da      	mvns	r2, r3
 8003fe8:	4b21      	ldr	r3, [pc, #132]	; (8004070 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4013      	ands	r3, r2
 8003fee:	4a20      	ldr	r2, [pc, #128]	; (8004070 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ff0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff8:	d10a      	bne.n	8004010 <prvAddCurrentTaskToDelayedList+0x58>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d007      	beq.n	8004010 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004000:	4b1a      	ldr	r3, [pc, #104]	; (800406c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3304      	adds	r3, #4
 8004006:	4619      	mov	r1, r3
 8004008:	481a      	ldr	r0, [pc, #104]	; (8004074 <prvAddCurrentTaskToDelayedList+0xbc>)
 800400a:	f7fe f9ec 	bl	80023e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800400e:	e026      	b.n	800405e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4413      	add	r3, r2
 8004016:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004018:	4b14      	ldr	r3, [pc, #80]	; (800406c <prvAddCurrentTaskToDelayedList+0xb4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	429a      	cmp	r2, r3
 8004026:	d209      	bcs.n	800403c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004028:	4b13      	ldr	r3, [pc, #76]	; (8004078 <prvAddCurrentTaskToDelayedList+0xc0>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	4b0f      	ldr	r3, [pc, #60]	; (800406c <prvAddCurrentTaskToDelayedList+0xb4>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3304      	adds	r3, #4
 8004032:	4619      	mov	r1, r3
 8004034:	4610      	mov	r0, r2
 8004036:	f7fe f9fa 	bl	800242e <vListInsert>
}
 800403a:	e010      	b.n	800405e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800403c:	4b0f      	ldr	r3, [pc, #60]	; (800407c <prvAddCurrentTaskToDelayedList+0xc4>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b0a      	ldr	r3, [pc, #40]	; (800406c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3304      	adds	r3, #4
 8004046:	4619      	mov	r1, r3
 8004048:	4610      	mov	r0, r2
 800404a:	f7fe f9f0 	bl	800242e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800404e:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	429a      	cmp	r2, r3
 8004056:	d202      	bcs.n	800405e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004058:	4a09      	ldr	r2, [pc, #36]	; (8004080 <prvAddCurrentTaskToDelayedList+0xc8>)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	6013      	str	r3, [r2, #0]
}
 800405e:	bf00      	nop
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	200004cc 	.word	0x200004cc
 800406c:	200003c8 	.word	0x200003c8
 8004070:	200004d0 	.word	0x200004d0
 8004074:	200004b4 	.word	0x200004b4
 8004078:	20000484 	.word	0x20000484
 800407c:	20000480 	.word	0x20000480
 8004080:	200004e8 	.word	0x200004e8

08004084 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3b04      	subs	r3, #4
 8004094:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800409c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3b04      	subs	r3, #4
 80040a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f023 0201 	bic.w	r2, r3, #1
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	3b04      	subs	r3, #4
 80040b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040b4:	4a0c      	ldr	r2, [pc, #48]	; (80040e8 <pxPortInitialiseStack+0x64>)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3b14      	subs	r3, #20
 80040be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	3b04      	subs	r3, #4
 80040ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f06f 0202 	mvn.w	r2, #2
 80040d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	3b20      	subs	r3, #32
 80040d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80040da:	68fb      	ldr	r3, [r7, #12]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	080040ed 	.word	0x080040ed

080040ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80040f2:	2300      	movs	r3, #0
 80040f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040f6:	4b12      	ldr	r3, [pc, #72]	; (8004140 <prvTaskExitError+0x54>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fe:	d00a      	beq.n	8004116 <prvTaskExitError+0x2a>
	__asm volatile
 8004100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	60fb      	str	r3, [r7, #12]
}
 8004112:	bf00      	nop
 8004114:	e7fe      	b.n	8004114 <prvTaskExitError+0x28>
	__asm volatile
 8004116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	60bb      	str	r3, [r7, #8]
}
 8004128:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800412a:	bf00      	nop
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0fc      	beq.n	800412c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004132:	bf00      	nop
 8004134:	bf00      	nop
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	20000030 	.word	0x20000030
	...

08004150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004150:	4b07      	ldr	r3, [pc, #28]	; (8004170 <pxCurrentTCBConst2>)
 8004152:	6819      	ldr	r1, [r3, #0]
 8004154:	6808      	ldr	r0, [r1, #0]
 8004156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800415a:	f380 8809 	msr	PSP, r0
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f04f 0000 	mov.w	r0, #0
 8004166:	f380 8811 	msr	BASEPRI, r0
 800416a:	4770      	bx	lr
 800416c:	f3af 8000 	nop.w

08004170 <pxCurrentTCBConst2>:
 8004170:	200003c8 	.word	0x200003c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop

08004178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004178:	4808      	ldr	r0, [pc, #32]	; (800419c <prvPortStartFirstTask+0x24>)
 800417a:	6800      	ldr	r0, [r0, #0]
 800417c:	6800      	ldr	r0, [r0, #0]
 800417e:	f380 8808 	msr	MSP, r0
 8004182:	f04f 0000 	mov.w	r0, #0
 8004186:	f380 8814 	msr	CONTROL, r0
 800418a:	b662      	cpsie	i
 800418c:	b661      	cpsie	f
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	df00      	svc	0
 8004198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800419a:	bf00      	nop
 800419c:	e000ed08 	.word	0xe000ed08

080041a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041a6:	4b46      	ldr	r3, [pc, #280]	; (80042c0 <xPortStartScheduler+0x120>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a46      	ldr	r2, [pc, #280]	; (80042c4 <xPortStartScheduler+0x124>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d10a      	bne.n	80041c6 <xPortStartScheduler+0x26>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	613b      	str	r3, [r7, #16]
}
 80041c2:	bf00      	nop
 80041c4:	e7fe      	b.n	80041c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041c6:	4b3e      	ldr	r3, [pc, #248]	; (80042c0 <xPortStartScheduler+0x120>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a3f      	ldr	r2, [pc, #252]	; (80042c8 <xPortStartScheduler+0x128>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d10a      	bne.n	80041e6 <xPortStartScheduler+0x46>
	__asm volatile
 80041d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	60fb      	str	r3, [r7, #12]
}
 80041e2:	bf00      	nop
 80041e4:	e7fe      	b.n	80041e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041e6:	4b39      	ldr	r3, [pc, #228]	; (80042cc <xPortStartScheduler+0x12c>)
 80041e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	22ff      	movs	r2, #255	; 0xff
 80041f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004208:	b2da      	uxtb	r2, r3
 800420a:	4b31      	ldr	r3, [pc, #196]	; (80042d0 <xPortStartScheduler+0x130>)
 800420c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800420e:	4b31      	ldr	r3, [pc, #196]	; (80042d4 <xPortStartScheduler+0x134>)
 8004210:	2207      	movs	r2, #7
 8004212:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004214:	e009      	b.n	800422a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004216:	4b2f      	ldr	r3, [pc, #188]	; (80042d4 <xPortStartScheduler+0x134>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3b01      	subs	r3, #1
 800421c:	4a2d      	ldr	r2, [pc, #180]	; (80042d4 <xPortStartScheduler+0x134>)
 800421e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	b2db      	uxtb	r3, r3
 8004228:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800422a:	78fb      	ldrb	r3, [r7, #3]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004232:	2b80      	cmp	r3, #128	; 0x80
 8004234:	d0ef      	beq.n	8004216 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004236:	4b27      	ldr	r3, [pc, #156]	; (80042d4 <xPortStartScheduler+0x134>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f1c3 0307 	rsb	r3, r3, #7
 800423e:	2b04      	cmp	r3, #4
 8004240:	d00a      	beq.n	8004258 <xPortStartScheduler+0xb8>
	__asm volatile
 8004242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	60bb      	str	r3, [r7, #8]
}
 8004254:	bf00      	nop
 8004256:	e7fe      	b.n	8004256 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004258:	4b1e      	ldr	r3, [pc, #120]	; (80042d4 <xPortStartScheduler+0x134>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	4a1d      	ldr	r2, [pc, #116]	; (80042d4 <xPortStartScheduler+0x134>)
 8004260:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004262:	4b1c      	ldr	r3, [pc, #112]	; (80042d4 <xPortStartScheduler+0x134>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800426a:	4a1a      	ldr	r2, [pc, #104]	; (80042d4 <xPortStartScheduler+0x134>)
 800426c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	b2da      	uxtb	r2, r3
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004276:	4b18      	ldr	r3, [pc, #96]	; (80042d8 <xPortStartScheduler+0x138>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a17      	ldr	r2, [pc, #92]	; (80042d8 <xPortStartScheduler+0x138>)
 800427c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004280:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004282:	4b15      	ldr	r3, [pc, #84]	; (80042d8 <xPortStartScheduler+0x138>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a14      	ldr	r2, [pc, #80]	; (80042d8 <xPortStartScheduler+0x138>)
 8004288:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800428c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800428e:	f000 f8dd 	bl	800444c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004292:	4b12      	ldr	r3, [pc, #72]	; (80042dc <xPortStartScheduler+0x13c>)
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004298:	f000 f8fc 	bl	8004494 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800429c:	4b10      	ldr	r3, [pc, #64]	; (80042e0 <xPortStartScheduler+0x140>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a0f      	ldr	r2, [pc, #60]	; (80042e0 <xPortStartScheduler+0x140>)
 80042a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80042a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80042a8:	f7ff ff66 	bl	8004178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80042ac:	f7ff fa92 	bl	80037d4 <vTaskSwitchContext>
	prvTaskExitError();
 80042b0:	f7ff ff1c 	bl	80040ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	e000ed00 	.word	0xe000ed00
 80042c4:	410fc271 	.word	0x410fc271
 80042c8:	410fc270 	.word	0x410fc270
 80042cc:	e000e400 	.word	0xe000e400
 80042d0:	200004f4 	.word	0x200004f4
 80042d4:	200004f8 	.word	0x200004f8
 80042d8:	e000ed20 	.word	0xe000ed20
 80042dc:	20000030 	.word	0x20000030
 80042e0:	e000ef34 	.word	0xe000ef34

080042e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
	__asm volatile
 80042ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	607b      	str	r3, [r7, #4]
}
 80042fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80042fe:	4b0f      	ldr	r3, [pc, #60]	; (800433c <vPortEnterCritical+0x58>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3301      	adds	r3, #1
 8004304:	4a0d      	ldr	r2, [pc, #52]	; (800433c <vPortEnterCritical+0x58>)
 8004306:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004308:	4b0c      	ldr	r3, [pc, #48]	; (800433c <vPortEnterCritical+0x58>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d10f      	bne.n	8004330 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004310:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <vPortEnterCritical+0x5c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <vPortEnterCritical+0x4c>
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	603b      	str	r3, [r7, #0]
}
 800432c:	bf00      	nop
 800432e:	e7fe      	b.n	800432e <vPortEnterCritical+0x4a>
	}
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	20000030 	.word	0x20000030
 8004340:	e000ed04 	.word	0xe000ed04

08004344 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800434a:	4b12      	ldr	r3, [pc, #72]	; (8004394 <vPortExitCritical+0x50>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10a      	bne.n	8004368 <vPortExitCritical+0x24>
	__asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	607b      	str	r3, [r7, #4]
}
 8004364:	bf00      	nop
 8004366:	e7fe      	b.n	8004366 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004368:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <vPortExitCritical+0x50>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3b01      	subs	r3, #1
 800436e:	4a09      	ldr	r2, [pc, #36]	; (8004394 <vPortExitCritical+0x50>)
 8004370:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004372:	4b08      	ldr	r3, [pc, #32]	; (8004394 <vPortExitCritical+0x50>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d105      	bne.n	8004386 <vPortExitCritical+0x42>
 800437a:	2300      	movs	r3, #0
 800437c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	f383 8811 	msr	BASEPRI, r3
}
 8004384:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	20000030 	.word	0x20000030
	...

080043a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80043a0:	f3ef 8009 	mrs	r0, PSP
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	4b15      	ldr	r3, [pc, #84]	; (8004400 <pxCurrentTCBConst>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	f01e 0f10 	tst.w	lr, #16
 80043b0:	bf08      	it	eq
 80043b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ba:	6010      	str	r0, [r2, #0]
 80043bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80043c4:	f380 8811 	msr	BASEPRI, r0
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f7ff fa00 	bl	80037d4 <vTaskSwitchContext>
 80043d4:	f04f 0000 	mov.w	r0, #0
 80043d8:	f380 8811 	msr	BASEPRI, r0
 80043dc:	bc09      	pop	{r0, r3}
 80043de:	6819      	ldr	r1, [r3, #0]
 80043e0:	6808      	ldr	r0, [r1, #0]
 80043e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e6:	f01e 0f10 	tst.w	lr, #16
 80043ea:	bf08      	it	eq
 80043ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80043f0:	f380 8809 	msr	PSP, r0
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	f3af 8000 	nop.w

08004400 <pxCurrentTCBConst>:
 8004400:	200003c8 	.word	0x200003c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004404:	bf00      	nop
 8004406:	bf00      	nop

08004408 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
	__asm volatile
 800440e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	607b      	str	r3, [r7, #4]
}
 8004420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004422:	f7ff f91f 	bl	8003664 <xTaskIncrementTick>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800442c:	4b06      	ldr	r3, [pc, #24]	; (8004448 <SysTick_Handler+0x40>)
 800442e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	2300      	movs	r3, #0
 8004436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	f383 8811 	msr	BASEPRI, r3
}
 800443e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	e000ed04 	.word	0xe000ed04

0800444c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004450:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <vPortSetupTimerInterrupt+0x34>)
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004456:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <vPortSetupTimerInterrupt+0x38>)
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <vPortSetupTimerInterrupt+0x3c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a0a      	ldr	r2, [pc, #40]	; (800448c <vPortSetupTimerInterrupt+0x40>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	099b      	lsrs	r3, r3, #6
 8004468:	4a09      	ldr	r2, [pc, #36]	; (8004490 <vPortSetupTimerInterrupt+0x44>)
 800446a:	3b01      	subs	r3, #1
 800446c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800446e:	4b04      	ldr	r3, [pc, #16]	; (8004480 <vPortSetupTimerInterrupt+0x34>)
 8004470:	2207      	movs	r2, #7
 8004472:	601a      	str	r2, [r3, #0]
}
 8004474:	bf00      	nop
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	e000e010 	.word	0xe000e010
 8004484:	e000e018 	.word	0xe000e018
 8004488:	20000024 	.word	0x20000024
 800448c:	10624dd3 	.word	0x10624dd3
 8004490:	e000e014 	.word	0xe000e014

08004494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004494:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80044a4 <vPortEnableVFP+0x10>
 8004498:	6801      	ldr	r1, [r0, #0]
 800449a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800449e:	6001      	str	r1, [r0, #0]
 80044a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80044a2:	bf00      	nop
 80044a4:	e000ed88 	.word	0xe000ed88

080044a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80044ae:	f3ef 8305 	mrs	r3, IPSR
 80044b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b0f      	cmp	r3, #15
 80044b8:	d914      	bls.n	80044e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80044ba:	4a17      	ldr	r2, [pc, #92]	; (8004518 <vPortValidateInterruptPriority+0x70>)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4413      	add	r3, r2
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80044c4:	4b15      	ldr	r3, [pc, #84]	; (800451c <vPortValidateInterruptPriority+0x74>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	7afa      	ldrb	r2, [r7, #11]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d20a      	bcs.n	80044e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	607b      	str	r3, [r7, #4]
}
 80044e0:	bf00      	nop
 80044e2:	e7fe      	b.n	80044e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80044e4:	4b0e      	ldr	r3, [pc, #56]	; (8004520 <vPortValidateInterruptPriority+0x78>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044ec:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <vPortValidateInterruptPriority+0x7c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d90a      	bls.n	800450a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	603b      	str	r3, [r7, #0]
}
 8004506:	bf00      	nop
 8004508:	e7fe      	b.n	8004508 <vPortValidateInterruptPriority+0x60>
	}
 800450a:	bf00      	nop
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	e000e3f0 	.word	0xe000e3f0
 800451c:	200004f4 	.word	0x200004f4
 8004520:	e000ed0c 	.word	0xe000ed0c
 8004524:	200004f8 	.word	0x200004f8

08004528 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	; 0x28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004530:	2300      	movs	r3, #0
 8004532:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004534:	f7fe ffec 	bl	8003510 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004538:	4b5b      	ldr	r3, [pc, #364]	; (80046a8 <pvPortMalloc+0x180>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004540:	f000 f920 	bl	8004784 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004544:	4b59      	ldr	r3, [pc, #356]	; (80046ac <pvPortMalloc+0x184>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4013      	ands	r3, r2
 800454c:	2b00      	cmp	r3, #0
 800454e:	f040 8093 	bne.w	8004678 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d01d      	beq.n	8004594 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004558:	2208      	movs	r2, #8
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	2b00      	cmp	r3, #0
 8004568:	d014      	beq.n	8004594 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f023 0307 	bic.w	r3, r3, #7
 8004570:	3308      	adds	r3, #8
 8004572:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <pvPortMalloc+0x6c>
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	617b      	str	r3, [r7, #20]
}
 8004590:	bf00      	nop
 8004592:	e7fe      	b.n	8004592 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d06e      	beq.n	8004678 <pvPortMalloc+0x150>
 800459a:	4b45      	ldr	r3, [pc, #276]	; (80046b0 <pvPortMalloc+0x188>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d869      	bhi.n	8004678 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045a4:	4b43      	ldr	r3, [pc, #268]	; (80046b4 <pvPortMalloc+0x18c>)
 80045a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045a8:	4b42      	ldr	r3, [pc, #264]	; (80046b4 <pvPortMalloc+0x18c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045ae:	e004      	b.n	80045ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d903      	bls.n	80045cc <pvPortMalloc+0xa4>
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1f1      	bne.n	80045b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045cc:	4b36      	ldr	r3, [pc, #216]	; (80046a8 <pvPortMalloc+0x180>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d050      	beq.n	8004678 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2208      	movs	r2, #8
 80045dc:	4413      	add	r3, r2
 80045de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	1ad2      	subs	r2, r2, r3
 80045f0:	2308      	movs	r3, #8
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d91f      	bls.n	8004638 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4413      	add	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <pvPortMalloc+0xf8>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	613b      	str	r3, [r7, #16]
}
 800461c:	bf00      	nop
 800461e:	e7fe      	b.n	800461e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	1ad2      	subs	r2, r2, r3
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004632:	69b8      	ldr	r0, [r7, #24]
 8004634:	f000 f908 	bl	8004848 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004638:	4b1d      	ldr	r3, [pc, #116]	; (80046b0 <pvPortMalloc+0x188>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	4a1b      	ldr	r2, [pc, #108]	; (80046b0 <pvPortMalloc+0x188>)
 8004644:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004646:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <pvPortMalloc+0x188>)
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <pvPortMalloc+0x190>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d203      	bcs.n	800465a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004652:	4b17      	ldr	r3, [pc, #92]	; (80046b0 <pvPortMalloc+0x188>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a18      	ldr	r2, [pc, #96]	; (80046b8 <pvPortMalloc+0x190>)
 8004658:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	4b13      	ldr	r3, [pc, #76]	; (80046ac <pvPortMalloc+0x184>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	431a      	orrs	r2, r3
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800466e:	4b13      	ldr	r3, [pc, #76]	; (80046bc <pvPortMalloc+0x194>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3301      	adds	r3, #1
 8004674:	4a11      	ldr	r2, [pc, #68]	; (80046bc <pvPortMalloc+0x194>)
 8004676:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004678:	f7fe ff58 	bl	800352c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <pvPortMalloc+0x174>
	__asm volatile
 8004686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	60fb      	str	r3, [r7, #12]
}
 8004698:	bf00      	nop
 800469a:	e7fe      	b.n	800469a <pvPortMalloc+0x172>
	return pvReturn;
 800469c:	69fb      	ldr	r3, [r7, #28]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3728      	adds	r7, #40	; 0x28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20004104 	.word	0x20004104
 80046ac:	20004118 	.word	0x20004118
 80046b0:	20004108 	.word	0x20004108
 80046b4:	200040fc 	.word	0x200040fc
 80046b8:	2000410c 	.word	0x2000410c
 80046bc:	20004110 	.word	0x20004110

080046c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d04d      	beq.n	800476e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80046d2:	2308      	movs	r3, #8
 80046d4:	425b      	negs	r3, r3
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4413      	add	r3, r2
 80046da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	4b24      	ldr	r3, [pc, #144]	; (8004778 <vPortFree+0xb8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10a      	bne.n	8004704 <vPortFree+0x44>
	__asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	60fb      	str	r3, [r7, #12]
}
 8004700:	bf00      	nop
 8004702:	e7fe      	b.n	8004702 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <vPortFree+0x62>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	60bb      	str	r3, [r7, #8]
}
 800471e:	bf00      	nop
 8004720:	e7fe      	b.n	8004720 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	4b14      	ldr	r3, [pc, #80]	; (8004778 <vPortFree+0xb8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4013      	ands	r3, r2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01e      	beq.n	800476e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d11a      	bne.n	800476e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	4b0e      	ldr	r3, [pc, #56]	; (8004778 <vPortFree+0xb8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	43db      	mvns	r3, r3
 8004742:	401a      	ands	r2, r3
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004748:	f7fe fee2 	bl	8003510 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <vPortFree+0xbc>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4413      	add	r3, r2
 8004756:	4a09      	ldr	r2, [pc, #36]	; (800477c <vPortFree+0xbc>)
 8004758:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800475a:	6938      	ldr	r0, [r7, #16]
 800475c:	f000 f874 	bl	8004848 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004760:	4b07      	ldr	r3, [pc, #28]	; (8004780 <vPortFree+0xc0>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3301      	adds	r3, #1
 8004766:	4a06      	ldr	r2, [pc, #24]	; (8004780 <vPortFree+0xc0>)
 8004768:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800476a:	f7fe fedf 	bl	800352c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800476e:	bf00      	nop
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20004118 	.word	0x20004118
 800477c:	20004108 	.word	0x20004108
 8004780:	20004114 	.word	0x20004114

08004784 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800478a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800478e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004790:	4b27      	ldr	r3, [pc, #156]	; (8004830 <prvHeapInit+0xac>)
 8004792:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00c      	beq.n	80047b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3307      	adds	r3, #7
 80047a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0307 	bic.w	r3, r3, #7
 80047aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	4a1f      	ldr	r2, [pc, #124]	; (8004830 <prvHeapInit+0xac>)
 80047b4:	4413      	add	r3, r2
 80047b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047bc:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <prvHeapInit+0xb0>)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047c2:	4b1c      	ldr	r3, [pc, #112]	; (8004834 <prvHeapInit+0xb0>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	4413      	add	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80047d0:	2208      	movs	r2, #8
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1a9b      	subs	r3, r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0307 	bic.w	r3, r3, #7
 80047de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4a15      	ldr	r2, [pc, #84]	; (8004838 <prvHeapInit+0xb4>)
 80047e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80047e6:	4b14      	ldr	r3, [pc, #80]	; (8004838 <prvHeapInit+0xb4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2200      	movs	r2, #0
 80047ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80047ee:	4b12      	ldr	r3, [pc, #72]	; (8004838 <prvHeapInit+0xb4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	1ad2      	subs	r2, r2, r3
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004804:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <prvHeapInit+0xb4>)
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	4a0a      	ldr	r2, [pc, #40]	; (800483c <prvHeapInit+0xb8>)
 8004812:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4a09      	ldr	r2, [pc, #36]	; (8004840 <prvHeapInit+0xbc>)
 800481a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800481c:	4b09      	ldr	r3, [pc, #36]	; (8004844 <prvHeapInit+0xc0>)
 800481e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004822:	601a      	str	r2, [r3, #0]
}
 8004824:	bf00      	nop
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	200004fc 	.word	0x200004fc
 8004834:	200040fc 	.word	0x200040fc
 8004838:	20004104 	.word	0x20004104
 800483c:	2000410c 	.word	0x2000410c
 8004840:	20004108 	.word	0x20004108
 8004844:	20004118 	.word	0x20004118

08004848 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004850:	4b28      	ldr	r3, [pc, #160]	; (80048f4 <prvInsertBlockIntoFreeList+0xac>)
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	e002      	b.n	800485c <prvInsertBlockIntoFreeList+0x14>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	429a      	cmp	r2, r3
 8004864:	d8f7      	bhi.n	8004856 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	4413      	add	r3, r2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	429a      	cmp	r2, r3
 8004876:	d108      	bne.n	800488a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	441a      	add	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	441a      	add	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d118      	bne.n	80048d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	4b15      	ldr	r3, [pc, #84]	; (80048f8 <prvInsertBlockIntoFreeList+0xb0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d00d      	beq.n	80048c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	441a      	add	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	e008      	b.n	80048d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048c6:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <prvInsertBlockIntoFreeList+0xb0>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	e003      	b.n	80048d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d002      	beq.n	80048e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048e6:	bf00      	nop
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	200040fc 	.word	0x200040fc
 80048f8:	20004104 	.word	0x20004104

080048fc <__errno>:
 80048fc:	4b01      	ldr	r3, [pc, #4]	; (8004904 <__errno+0x8>)
 80048fe:	6818      	ldr	r0, [r3, #0]
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	20000034 	.word	0x20000034

08004908 <std>:
 8004908:	2300      	movs	r3, #0
 800490a:	b510      	push	{r4, lr}
 800490c:	4604      	mov	r4, r0
 800490e:	e9c0 3300 	strd	r3, r3, [r0]
 8004912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004916:	6083      	str	r3, [r0, #8]
 8004918:	8181      	strh	r1, [r0, #12]
 800491a:	6643      	str	r3, [r0, #100]	; 0x64
 800491c:	81c2      	strh	r2, [r0, #14]
 800491e:	6183      	str	r3, [r0, #24]
 8004920:	4619      	mov	r1, r3
 8004922:	2208      	movs	r2, #8
 8004924:	305c      	adds	r0, #92	; 0x5c
 8004926:	f000 f91a 	bl	8004b5e <memset>
 800492a:	4b05      	ldr	r3, [pc, #20]	; (8004940 <std+0x38>)
 800492c:	6263      	str	r3, [r4, #36]	; 0x24
 800492e:	4b05      	ldr	r3, [pc, #20]	; (8004944 <std+0x3c>)
 8004930:	62a3      	str	r3, [r4, #40]	; 0x28
 8004932:	4b05      	ldr	r3, [pc, #20]	; (8004948 <std+0x40>)
 8004934:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004936:	4b05      	ldr	r3, [pc, #20]	; (800494c <std+0x44>)
 8004938:	6224      	str	r4, [r4, #32]
 800493a:	6323      	str	r3, [r4, #48]	; 0x30
 800493c:	bd10      	pop	{r4, pc}
 800493e:	bf00      	nop
 8004940:	08004ea9 	.word	0x08004ea9
 8004944:	08004ecb 	.word	0x08004ecb
 8004948:	08004f03 	.word	0x08004f03
 800494c:	08004f27 	.word	0x08004f27

08004950 <_cleanup_r>:
 8004950:	4901      	ldr	r1, [pc, #4]	; (8004958 <_cleanup_r+0x8>)
 8004952:	f000 b8af 	b.w	8004ab4 <_fwalk_reent>
 8004956:	bf00      	nop
 8004958:	08005201 	.word	0x08005201

0800495c <__sfmoreglue>:
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	2268      	movs	r2, #104	; 0x68
 8004960:	1e4d      	subs	r5, r1, #1
 8004962:	4355      	muls	r5, r2
 8004964:	460e      	mov	r6, r1
 8004966:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800496a:	f000 f921 	bl	8004bb0 <_malloc_r>
 800496e:	4604      	mov	r4, r0
 8004970:	b140      	cbz	r0, 8004984 <__sfmoreglue+0x28>
 8004972:	2100      	movs	r1, #0
 8004974:	e9c0 1600 	strd	r1, r6, [r0]
 8004978:	300c      	adds	r0, #12
 800497a:	60a0      	str	r0, [r4, #8]
 800497c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004980:	f000 f8ed 	bl	8004b5e <memset>
 8004984:	4620      	mov	r0, r4
 8004986:	bd70      	pop	{r4, r5, r6, pc}

08004988 <__sfp_lock_acquire>:
 8004988:	4801      	ldr	r0, [pc, #4]	; (8004990 <__sfp_lock_acquire+0x8>)
 800498a:	f000 b8d8 	b.w	8004b3e <__retarget_lock_acquire_recursive>
 800498e:	bf00      	nop
 8004990:	2000411d 	.word	0x2000411d

08004994 <__sfp_lock_release>:
 8004994:	4801      	ldr	r0, [pc, #4]	; (800499c <__sfp_lock_release+0x8>)
 8004996:	f000 b8d3 	b.w	8004b40 <__retarget_lock_release_recursive>
 800499a:	bf00      	nop
 800499c:	2000411d 	.word	0x2000411d

080049a0 <__sinit_lock_acquire>:
 80049a0:	4801      	ldr	r0, [pc, #4]	; (80049a8 <__sinit_lock_acquire+0x8>)
 80049a2:	f000 b8cc 	b.w	8004b3e <__retarget_lock_acquire_recursive>
 80049a6:	bf00      	nop
 80049a8:	2000411e 	.word	0x2000411e

080049ac <__sinit_lock_release>:
 80049ac:	4801      	ldr	r0, [pc, #4]	; (80049b4 <__sinit_lock_release+0x8>)
 80049ae:	f000 b8c7 	b.w	8004b40 <__retarget_lock_release_recursive>
 80049b2:	bf00      	nop
 80049b4:	2000411e 	.word	0x2000411e

080049b8 <__sinit>:
 80049b8:	b510      	push	{r4, lr}
 80049ba:	4604      	mov	r4, r0
 80049bc:	f7ff fff0 	bl	80049a0 <__sinit_lock_acquire>
 80049c0:	69a3      	ldr	r3, [r4, #24]
 80049c2:	b11b      	cbz	r3, 80049cc <__sinit+0x14>
 80049c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049c8:	f7ff bff0 	b.w	80049ac <__sinit_lock_release>
 80049cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80049d0:	6523      	str	r3, [r4, #80]	; 0x50
 80049d2:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <__sinit+0x68>)
 80049d4:	4a13      	ldr	r2, [pc, #76]	; (8004a24 <__sinit+0x6c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80049da:	42a3      	cmp	r3, r4
 80049dc:	bf04      	itt	eq
 80049de:	2301      	moveq	r3, #1
 80049e0:	61a3      	streq	r3, [r4, #24]
 80049e2:	4620      	mov	r0, r4
 80049e4:	f000 f820 	bl	8004a28 <__sfp>
 80049e8:	6060      	str	r0, [r4, #4]
 80049ea:	4620      	mov	r0, r4
 80049ec:	f000 f81c 	bl	8004a28 <__sfp>
 80049f0:	60a0      	str	r0, [r4, #8]
 80049f2:	4620      	mov	r0, r4
 80049f4:	f000 f818 	bl	8004a28 <__sfp>
 80049f8:	2200      	movs	r2, #0
 80049fa:	60e0      	str	r0, [r4, #12]
 80049fc:	2104      	movs	r1, #4
 80049fe:	6860      	ldr	r0, [r4, #4]
 8004a00:	f7ff ff82 	bl	8004908 <std>
 8004a04:	68a0      	ldr	r0, [r4, #8]
 8004a06:	2201      	movs	r2, #1
 8004a08:	2109      	movs	r1, #9
 8004a0a:	f7ff ff7d 	bl	8004908 <std>
 8004a0e:	68e0      	ldr	r0, [r4, #12]
 8004a10:	2202      	movs	r2, #2
 8004a12:	2112      	movs	r1, #18
 8004a14:	f7ff ff78 	bl	8004908 <std>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	61a3      	str	r3, [r4, #24]
 8004a1c:	e7d2      	b.n	80049c4 <__sinit+0xc>
 8004a1e:	bf00      	nop
 8004a20:	08005bdc 	.word	0x08005bdc
 8004a24:	08004951 	.word	0x08004951

08004a28 <__sfp>:
 8004a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2a:	4607      	mov	r7, r0
 8004a2c:	f7ff ffac 	bl	8004988 <__sfp_lock_acquire>
 8004a30:	4b1e      	ldr	r3, [pc, #120]	; (8004aac <__sfp+0x84>)
 8004a32:	681e      	ldr	r6, [r3, #0]
 8004a34:	69b3      	ldr	r3, [r6, #24]
 8004a36:	b913      	cbnz	r3, 8004a3e <__sfp+0x16>
 8004a38:	4630      	mov	r0, r6
 8004a3a:	f7ff ffbd 	bl	80049b8 <__sinit>
 8004a3e:	3648      	adds	r6, #72	; 0x48
 8004a40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a44:	3b01      	subs	r3, #1
 8004a46:	d503      	bpl.n	8004a50 <__sfp+0x28>
 8004a48:	6833      	ldr	r3, [r6, #0]
 8004a4a:	b30b      	cbz	r3, 8004a90 <__sfp+0x68>
 8004a4c:	6836      	ldr	r6, [r6, #0]
 8004a4e:	e7f7      	b.n	8004a40 <__sfp+0x18>
 8004a50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a54:	b9d5      	cbnz	r5, 8004a8c <__sfp+0x64>
 8004a56:	4b16      	ldr	r3, [pc, #88]	; (8004ab0 <__sfp+0x88>)
 8004a58:	60e3      	str	r3, [r4, #12]
 8004a5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a5e:	6665      	str	r5, [r4, #100]	; 0x64
 8004a60:	f000 f86c 	bl	8004b3c <__retarget_lock_init_recursive>
 8004a64:	f7ff ff96 	bl	8004994 <__sfp_lock_release>
 8004a68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a70:	6025      	str	r5, [r4, #0]
 8004a72:	61a5      	str	r5, [r4, #24]
 8004a74:	2208      	movs	r2, #8
 8004a76:	4629      	mov	r1, r5
 8004a78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a7c:	f000 f86f 	bl	8004b5e <memset>
 8004a80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a88:	4620      	mov	r0, r4
 8004a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a8c:	3468      	adds	r4, #104	; 0x68
 8004a8e:	e7d9      	b.n	8004a44 <__sfp+0x1c>
 8004a90:	2104      	movs	r1, #4
 8004a92:	4638      	mov	r0, r7
 8004a94:	f7ff ff62 	bl	800495c <__sfmoreglue>
 8004a98:	4604      	mov	r4, r0
 8004a9a:	6030      	str	r0, [r6, #0]
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	d1d5      	bne.n	8004a4c <__sfp+0x24>
 8004aa0:	f7ff ff78 	bl	8004994 <__sfp_lock_release>
 8004aa4:	230c      	movs	r3, #12
 8004aa6:	603b      	str	r3, [r7, #0]
 8004aa8:	e7ee      	b.n	8004a88 <__sfp+0x60>
 8004aaa:	bf00      	nop
 8004aac:	08005bdc 	.word	0x08005bdc
 8004ab0:	ffff0001 	.word	0xffff0001

08004ab4 <_fwalk_reent>:
 8004ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ab8:	4606      	mov	r6, r0
 8004aba:	4688      	mov	r8, r1
 8004abc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ac0:	2700      	movs	r7, #0
 8004ac2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ac6:	f1b9 0901 	subs.w	r9, r9, #1
 8004aca:	d505      	bpl.n	8004ad8 <_fwalk_reent+0x24>
 8004acc:	6824      	ldr	r4, [r4, #0]
 8004ace:	2c00      	cmp	r4, #0
 8004ad0:	d1f7      	bne.n	8004ac2 <_fwalk_reent+0xe>
 8004ad2:	4638      	mov	r0, r7
 8004ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ad8:	89ab      	ldrh	r3, [r5, #12]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d907      	bls.n	8004aee <_fwalk_reent+0x3a>
 8004ade:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	d003      	beq.n	8004aee <_fwalk_reent+0x3a>
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	4630      	mov	r0, r6
 8004aea:	47c0      	blx	r8
 8004aec:	4307      	orrs	r7, r0
 8004aee:	3568      	adds	r5, #104	; 0x68
 8004af0:	e7e9      	b.n	8004ac6 <_fwalk_reent+0x12>
	...

08004af4 <__libc_init_array>:
 8004af4:	b570      	push	{r4, r5, r6, lr}
 8004af6:	4d0d      	ldr	r5, [pc, #52]	; (8004b2c <__libc_init_array+0x38>)
 8004af8:	4c0d      	ldr	r4, [pc, #52]	; (8004b30 <__libc_init_array+0x3c>)
 8004afa:	1b64      	subs	r4, r4, r5
 8004afc:	10a4      	asrs	r4, r4, #2
 8004afe:	2600      	movs	r6, #0
 8004b00:	42a6      	cmp	r6, r4
 8004b02:	d109      	bne.n	8004b18 <__libc_init_array+0x24>
 8004b04:	4d0b      	ldr	r5, [pc, #44]	; (8004b34 <__libc_init_array+0x40>)
 8004b06:	4c0c      	ldr	r4, [pc, #48]	; (8004b38 <__libc_init_array+0x44>)
 8004b08:	f000 ffa8 	bl	8005a5c <_init>
 8004b0c:	1b64      	subs	r4, r4, r5
 8004b0e:	10a4      	asrs	r4, r4, #2
 8004b10:	2600      	movs	r6, #0
 8004b12:	42a6      	cmp	r6, r4
 8004b14:	d105      	bne.n	8004b22 <__libc_init_array+0x2e>
 8004b16:	bd70      	pop	{r4, r5, r6, pc}
 8004b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b1c:	4798      	blx	r3
 8004b1e:	3601      	adds	r6, #1
 8004b20:	e7ee      	b.n	8004b00 <__libc_init_array+0xc>
 8004b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b26:	4798      	blx	r3
 8004b28:	3601      	adds	r6, #1
 8004b2a:	e7f2      	b.n	8004b12 <__libc_init_array+0x1e>
 8004b2c:	08005c1c 	.word	0x08005c1c
 8004b30:	08005c1c 	.word	0x08005c1c
 8004b34:	08005c1c 	.word	0x08005c1c
 8004b38:	08005c20 	.word	0x08005c20

08004b3c <__retarget_lock_init_recursive>:
 8004b3c:	4770      	bx	lr

08004b3e <__retarget_lock_acquire_recursive>:
 8004b3e:	4770      	bx	lr

08004b40 <__retarget_lock_release_recursive>:
 8004b40:	4770      	bx	lr

08004b42 <memcpy>:
 8004b42:	440a      	add	r2, r1
 8004b44:	4291      	cmp	r1, r2
 8004b46:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b4a:	d100      	bne.n	8004b4e <memcpy+0xc>
 8004b4c:	4770      	bx	lr
 8004b4e:	b510      	push	{r4, lr}
 8004b50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b58:	4291      	cmp	r1, r2
 8004b5a:	d1f9      	bne.n	8004b50 <memcpy+0xe>
 8004b5c:	bd10      	pop	{r4, pc}

08004b5e <memset>:
 8004b5e:	4402      	add	r2, r0
 8004b60:	4603      	mov	r3, r0
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d100      	bne.n	8004b68 <memset+0xa>
 8004b66:	4770      	bx	lr
 8004b68:	f803 1b01 	strb.w	r1, [r3], #1
 8004b6c:	e7f9      	b.n	8004b62 <memset+0x4>
	...

08004b70 <sbrk_aligned>:
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	4e0e      	ldr	r6, [pc, #56]	; (8004bac <sbrk_aligned+0x3c>)
 8004b74:	460c      	mov	r4, r1
 8004b76:	6831      	ldr	r1, [r6, #0]
 8004b78:	4605      	mov	r5, r0
 8004b7a:	b911      	cbnz	r1, 8004b82 <sbrk_aligned+0x12>
 8004b7c:	f000 f984 	bl	8004e88 <_sbrk_r>
 8004b80:	6030      	str	r0, [r6, #0]
 8004b82:	4621      	mov	r1, r4
 8004b84:	4628      	mov	r0, r5
 8004b86:	f000 f97f 	bl	8004e88 <_sbrk_r>
 8004b8a:	1c43      	adds	r3, r0, #1
 8004b8c:	d00a      	beq.n	8004ba4 <sbrk_aligned+0x34>
 8004b8e:	1cc4      	adds	r4, r0, #3
 8004b90:	f024 0403 	bic.w	r4, r4, #3
 8004b94:	42a0      	cmp	r0, r4
 8004b96:	d007      	beq.n	8004ba8 <sbrk_aligned+0x38>
 8004b98:	1a21      	subs	r1, r4, r0
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	f000 f974 	bl	8004e88 <_sbrk_r>
 8004ba0:	3001      	adds	r0, #1
 8004ba2:	d101      	bne.n	8004ba8 <sbrk_aligned+0x38>
 8004ba4:	f04f 34ff 	mov.w	r4, #4294967295
 8004ba8:	4620      	mov	r0, r4
 8004baa:	bd70      	pop	{r4, r5, r6, pc}
 8004bac:	20004124 	.word	0x20004124

08004bb0 <_malloc_r>:
 8004bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb4:	1ccd      	adds	r5, r1, #3
 8004bb6:	f025 0503 	bic.w	r5, r5, #3
 8004bba:	3508      	adds	r5, #8
 8004bbc:	2d0c      	cmp	r5, #12
 8004bbe:	bf38      	it	cc
 8004bc0:	250c      	movcc	r5, #12
 8004bc2:	2d00      	cmp	r5, #0
 8004bc4:	4607      	mov	r7, r0
 8004bc6:	db01      	blt.n	8004bcc <_malloc_r+0x1c>
 8004bc8:	42a9      	cmp	r1, r5
 8004bca:	d905      	bls.n	8004bd8 <_malloc_r+0x28>
 8004bcc:	230c      	movs	r3, #12
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	2600      	movs	r6, #0
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bd8:	4e2e      	ldr	r6, [pc, #184]	; (8004c94 <_malloc_r+0xe4>)
 8004bda:	f000 fbc5 	bl	8005368 <__malloc_lock>
 8004bde:	6833      	ldr	r3, [r6, #0]
 8004be0:	461c      	mov	r4, r3
 8004be2:	bb34      	cbnz	r4, 8004c32 <_malloc_r+0x82>
 8004be4:	4629      	mov	r1, r5
 8004be6:	4638      	mov	r0, r7
 8004be8:	f7ff ffc2 	bl	8004b70 <sbrk_aligned>
 8004bec:	1c43      	adds	r3, r0, #1
 8004bee:	4604      	mov	r4, r0
 8004bf0:	d14d      	bne.n	8004c8e <_malloc_r+0xde>
 8004bf2:	6834      	ldr	r4, [r6, #0]
 8004bf4:	4626      	mov	r6, r4
 8004bf6:	2e00      	cmp	r6, #0
 8004bf8:	d140      	bne.n	8004c7c <_malloc_r+0xcc>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	4638      	mov	r0, r7
 8004c00:	eb04 0803 	add.w	r8, r4, r3
 8004c04:	f000 f940 	bl	8004e88 <_sbrk_r>
 8004c08:	4580      	cmp	r8, r0
 8004c0a:	d13a      	bne.n	8004c82 <_malloc_r+0xd2>
 8004c0c:	6821      	ldr	r1, [r4, #0]
 8004c0e:	3503      	adds	r5, #3
 8004c10:	1a6d      	subs	r5, r5, r1
 8004c12:	f025 0503 	bic.w	r5, r5, #3
 8004c16:	3508      	adds	r5, #8
 8004c18:	2d0c      	cmp	r5, #12
 8004c1a:	bf38      	it	cc
 8004c1c:	250c      	movcc	r5, #12
 8004c1e:	4629      	mov	r1, r5
 8004c20:	4638      	mov	r0, r7
 8004c22:	f7ff ffa5 	bl	8004b70 <sbrk_aligned>
 8004c26:	3001      	adds	r0, #1
 8004c28:	d02b      	beq.n	8004c82 <_malloc_r+0xd2>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	442b      	add	r3, r5
 8004c2e:	6023      	str	r3, [r4, #0]
 8004c30:	e00e      	b.n	8004c50 <_malloc_r+0xa0>
 8004c32:	6822      	ldr	r2, [r4, #0]
 8004c34:	1b52      	subs	r2, r2, r5
 8004c36:	d41e      	bmi.n	8004c76 <_malloc_r+0xc6>
 8004c38:	2a0b      	cmp	r2, #11
 8004c3a:	d916      	bls.n	8004c6a <_malloc_r+0xba>
 8004c3c:	1961      	adds	r1, r4, r5
 8004c3e:	42a3      	cmp	r3, r4
 8004c40:	6025      	str	r5, [r4, #0]
 8004c42:	bf18      	it	ne
 8004c44:	6059      	strne	r1, [r3, #4]
 8004c46:	6863      	ldr	r3, [r4, #4]
 8004c48:	bf08      	it	eq
 8004c4a:	6031      	streq	r1, [r6, #0]
 8004c4c:	5162      	str	r2, [r4, r5]
 8004c4e:	604b      	str	r3, [r1, #4]
 8004c50:	4638      	mov	r0, r7
 8004c52:	f104 060b 	add.w	r6, r4, #11
 8004c56:	f000 fb8d 	bl	8005374 <__malloc_unlock>
 8004c5a:	f026 0607 	bic.w	r6, r6, #7
 8004c5e:	1d23      	adds	r3, r4, #4
 8004c60:	1af2      	subs	r2, r6, r3
 8004c62:	d0b6      	beq.n	8004bd2 <_malloc_r+0x22>
 8004c64:	1b9b      	subs	r3, r3, r6
 8004c66:	50a3      	str	r3, [r4, r2]
 8004c68:	e7b3      	b.n	8004bd2 <_malloc_r+0x22>
 8004c6a:	6862      	ldr	r2, [r4, #4]
 8004c6c:	42a3      	cmp	r3, r4
 8004c6e:	bf0c      	ite	eq
 8004c70:	6032      	streq	r2, [r6, #0]
 8004c72:	605a      	strne	r2, [r3, #4]
 8004c74:	e7ec      	b.n	8004c50 <_malloc_r+0xa0>
 8004c76:	4623      	mov	r3, r4
 8004c78:	6864      	ldr	r4, [r4, #4]
 8004c7a:	e7b2      	b.n	8004be2 <_malloc_r+0x32>
 8004c7c:	4634      	mov	r4, r6
 8004c7e:	6876      	ldr	r6, [r6, #4]
 8004c80:	e7b9      	b.n	8004bf6 <_malloc_r+0x46>
 8004c82:	230c      	movs	r3, #12
 8004c84:	603b      	str	r3, [r7, #0]
 8004c86:	4638      	mov	r0, r7
 8004c88:	f000 fb74 	bl	8005374 <__malloc_unlock>
 8004c8c:	e7a1      	b.n	8004bd2 <_malloc_r+0x22>
 8004c8e:	6025      	str	r5, [r4, #0]
 8004c90:	e7de      	b.n	8004c50 <_malloc_r+0xa0>
 8004c92:	bf00      	nop
 8004c94:	20004120 	.word	0x20004120

08004c98 <iprintf>:
 8004c98:	b40f      	push	{r0, r1, r2, r3}
 8004c9a:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <iprintf+0x2c>)
 8004c9c:	b513      	push	{r0, r1, r4, lr}
 8004c9e:	681c      	ldr	r4, [r3, #0]
 8004ca0:	b124      	cbz	r4, 8004cac <iprintf+0x14>
 8004ca2:	69a3      	ldr	r3, [r4, #24]
 8004ca4:	b913      	cbnz	r3, 8004cac <iprintf+0x14>
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	f7ff fe86 	bl	80049b8 <__sinit>
 8004cac:	ab05      	add	r3, sp, #20
 8004cae:	9a04      	ldr	r2, [sp, #16]
 8004cb0:	68a1      	ldr	r1, [r4, #8]
 8004cb2:	9301      	str	r3, [sp, #4]
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f000 fbd9 	bl	800546c <_vfiprintf_r>
 8004cba:	b002      	add	sp, #8
 8004cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cc0:	b004      	add	sp, #16
 8004cc2:	4770      	bx	lr
 8004cc4:	20000034 	.word	0x20000034

08004cc8 <_puts_r>:
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	460e      	mov	r6, r1
 8004ccc:	4605      	mov	r5, r0
 8004cce:	b118      	cbz	r0, 8004cd8 <_puts_r+0x10>
 8004cd0:	6983      	ldr	r3, [r0, #24]
 8004cd2:	b90b      	cbnz	r3, 8004cd8 <_puts_r+0x10>
 8004cd4:	f7ff fe70 	bl	80049b8 <__sinit>
 8004cd8:	69ab      	ldr	r3, [r5, #24]
 8004cda:	68ac      	ldr	r4, [r5, #8]
 8004cdc:	b913      	cbnz	r3, 8004ce4 <_puts_r+0x1c>
 8004cde:	4628      	mov	r0, r5
 8004ce0:	f7ff fe6a 	bl	80049b8 <__sinit>
 8004ce4:	4b2c      	ldr	r3, [pc, #176]	; (8004d98 <_puts_r+0xd0>)
 8004ce6:	429c      	cmp	r4, r3
 8004ce8:	d120      	bne.n	8004d2c <_puts_r+0x64>
 8004cea:	686c      	ldr	r4, [r5, #4]
 8004cec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cee:	07db      	lsls	r3, r3, #31
 8004cf0:	d405      	bmi.n	8004cfe <_puts_r+0x36>
 8004cf2:	89a3      	ldrh	r3, [r4, #12]
 8004cf4:	0598      	lsls	r0, r3, #22
 8004cf6:	d402      	bmi.n	8004cfe <_puts_r+0x36>
 8004cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cfa:	f7ff ff20 	bl	8004b3e <__retarget_lock_acquire_recursive>
 8004cfe:	89a3      	ldrh	r3, [r4, #12]
 8004d00:	0719      	lsls	r1, r3, #28
 8004d02:	d51d      	bpl.n	8004d40 <_puts_r+0x78>
 8004d04:	6923      	ldr	r3, [r4, #16]
 8004d06:	b1db      	cbz	r3, 8004d40 <_puts_r+0x78>
 8004d08:	3e01      	subs	r6, #1
 8004d0a:	68a3      	ldr	r3, [r4, #8]
 8004d0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d10:	3b01      	subs	r3, #1
 8004d12:	60a3      	str	r3, [r4, #8]
 8004d14:	bb39      	cbnz	r1, 8004d66 <_puts_r+0x9e>
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	da38      	bge.n	8004d8c <_puts_r+0xc4>
 8004d1a:	4622      	mov	r2, r4
 8004d1c:	210a      	movs	r1, #10
 8004d1e:	4628      	mov	r0, r5
 8004d20:	f000 f906 	bl	8004f30 <__swbuf_r>
 8004d24:	3001      	adds	r0, #1
 8004d26:	d011      	beq.n	8004d4c <_puts_r+0x84>
 8004d28:	250a      	movs	r5, #10
 8004d2a:	e011      	b.n	8004d50 <_puts_r+0x88>
 8004d2c:	4b1b      	ldr	r3, [pc, #108]	; (8004d9c <_puts_r+0xd4>)
 8004d2e:	429c      	cmp	r4, r3
 8004d30:	d101      	bne.n	8004d36 <_puts_r+0x6e>
 8004d32:	68ac      	ldr	r4, [r5, #8]
 8004d34:	e7da      	b.n	8004cec <_puts_r+0x24>
 8004d36:	4b1a      	ldr	r3, [pc, #104]	; (8004da0 <_puts_r+0xd8>)
 8004d38:	429c      	cmp	r4, r3
 8004d3a:	bf08      	it	eq
 8004d3c:	68ec      	ldreq	r4, [r5, #12]
 8004d3e:	e7d5      	b.n	8004cec <_puts_r+0x24>
 8004d40:	4621      	mov	r1, r4
 8004d42:	4628      	mov	r0, r5
 8004d44:	f000 f958 	bl	8004ff8 <__swsetup_r>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d0dd      	beq.n	8004d08 <_puts_r+0x40>
 8004d4c:	f04f 35ff 	mov.w	r5, #4294967295
 8004d50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d52:	07da      	lsls	r2, r3, #31
 8004d54:	d405      	bmi.n	8004d62 <_puts_r+0x9a>
 8004d56:	89a3      	ldrh	r3, [r4, #12]
 8004d58:	059b      	lsls	r3, r3, #22
 8004d5a:	d402      	bmi.n	8004d62 <_puts_r+0x9a>
 8004d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d5e:	f7ff feef 	bl	8004b40 <__retarget_lock_release_recursive>
 8004d62:	4628      	mov	r0, r5
 8004d64:	bd70      	pop	{r4, r5, r6, pc}
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	da04      	bge.n	8004d74 <_puts_r+0xac>
 8004d6a:	69a2      	ldr	r2, [r4, #24]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	dc06      	bgt.n	8004d7e <_puts_r+0xb6>
 8004d70:	290a      	cmp	r1, #10
 8004d72:	d004      	beq.n	8004d7e <_puts_r+0xb6>
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	6022      	str	r2, [r4, #0]
 8004d7a:	7019      	strb	r1, [r3, #0]
 8004d7c:	e7c5      	b.n	8004d0a <_puts_r+0x42>
 8004d7e:	4622      	mov	r2, r4
 8004d80:	4628      	mov	r0, r5
 8004d82:	f000 f8d5 	bl	8004f30 <__swbuf_r>
 8004d86:	3001      	adds	r0, #1
 8004d88:	d1bf      	bne.n	8004d0a <_puts_r+0x42>
 8004d8a:	e7df      	b.n	8004d4c <_puts_r+0x84>
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	250a      	movs	r5, #10
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	6022      	str	r2, [r4, #0]
 8004d94:	701d      	strb	r5, [r3, #0]
 8004d96:	e7db      	b.n	8004d50 <_puts_r+0x88>
 8004d98:	08005b9c 	.word	0x08005b9c
 8004d9c:	08005bbc 	.word	0x08005bbc
 8004da0:	08005b7c 	.word	0x08005b7c

08004da4 <puts>:
 8004da4:	4b02      	ldr	r3, [pc, #8]	; (8004db0 <puts+0xc>)
 8004da6:	4601      	mov	r1, r0
 8004da8:	6818      	ldr	r0, [r3, #0]
 8004daa:	f7ff bf8d 	b.w	8004cc8 <_puts_r>
 8004dae:	bf00      	nop
 8004db0:	20000034 	.word	0x20000034

08004db4 <cleanup_glue>:
 8004db4:	b538      	push	{r3, r4, r5, lr}
 8004db6:	460c      	mov	r4, r1
 8004db8:	6809      	ldr	r1, [r1, #0]
 8004dba:	4605      	mov	r5, r0
 8004dbc:	b109      	cbz	r1, 8004dc2 <cleanup_glue+0xe>
 8004dbe:	f7ff fff9 	bl	8004db4 <cleanup_glue>
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dca:	f000 bad9 	b.w	8005380 <_free_r>
	...

08004dd0 <_reclaim_reent>:
 8004dd0:	4b2c      	ldr	r3, [pc, #176]	; (8004e84 <_reclaim_reent+0xb4>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4283      	cmp	r3, r0
 8004dd6:	b570      	push	{r4, r5, r6, lr}
 8004dd8:	4604      	mov	r4, r0
 8004dda:	d051      	beq.n	8004e80 <_reclaim_reent+0xb0>
 8004ddc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004dde:	b143      	cbz	r3, 8004df2 <_reclaim_reent+0x22>
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d14a      	bne.n	8004e7c <_reclaim_reent+0xac>
 8004de6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004de8:	6819      	ldr	r1, [r3, #0]
 8004dea:	b111      	cbz	r1, 8004df2 <_reclaim_reent+0x22>
 8004dec:	4620      	mov	r0, r4
 8004dee:	f000 fac7 	bl	8005380 <_free_r>
 8004df2:	6961      	ldr	r1, [r4, #20]
 8004df4:	b111      	cbz	r1, 8004dfc <_reclaim_reent+0x2c>
 8004df6:	4620      	mov	r0, r4
 8004df8:	f000 fac2 	bl	8005380 <_free_r>
 8004dfc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004dfe:	b111      	cbz	r1, 8004e06 <_reclaim_reent+0x36>
 8004e00:	4620      	mov	r0, r4
 8004e02:	f000 fabd 	bl	8005380 <_free_r>
 8004e06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004e08:	b111      	cbz	r1, 8004e10 <_reclaim_reent+0x40>
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	f000 fab8 	bl	8005380 <_free_r>
 8004e10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004e12:	b111      	cbz	r1, 8004e1a <_reclaim_reent+0x4a>
 8004e14:	4620      	mov	r0, r4
 8004e16:	f000 fab3 	bl	8005380 <_free_r>
 8004e1a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004e1c:	b111      	cbz	r1, 8004e24 <_reclaim_reent+0x54>
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f000 faae 	bl	8005380 <_free_r>
 8004e24:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004e26:	b111      	cbz	r1, 8004e2e <_reclaim_reent+0x5e>
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f000 faa9 	bl	8005380 <_free_r>
 8004e2e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004e30:	b111      	cbz	r1, 8004e38 <_reclaim_reent+0x68>
 8004e32:	4620      	mov	r0, r4
 8004e34:	f000 faa4 	bl	8005380 <_free_r>
 8004e38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e3a:	b111      	cbz	r1, 8004e42 <_reclaim_reent+0x72>
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	f000 fa9f 	bl	8005380 <_free_r>
 8004e42:	69a3      	ldr	r3, [r4, #24]
 8004e44:	b1e3      	cbz	r3, 8004e80 <_reclaim_reent+0xb0>
 8004e46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e48:	4620      	mov	r0, r4
 8004e4a:	4798      	blx	r3
 8004e4c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004e4e:	b1b9      	cbz	r1, 8004e80 <_reclaim_reent+0xb0>
 8004e50:	4620      	mov	r0, r4
 8004e52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004e56:	f7ff bfad 	b.w	8004db4 <cleanup_glue>
 8004e5a:	5949      	ldr	r1, [r1, r5]
 8004e5c:	b941      	cbnz	r1, 8004e70 <_reclaim_reent+0xa0>
 8004e5e:	3504      	adds	r5, #4
 8004e60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e62:	2d80      	cmp	r5, #128	; 0x80
 8004e64:	68d9      	ldr	r1, [r3, #12]
 8004e66:	d1f8      	bne.n	8004e5a <_reclaim_reent+0x8a>
 8004e68:	4620      	mov	r0, r4
 8004e6a:	f000 fa89 	bl	8005380 <_free_r>
 8004e6e:	e7ba      	b.n	8004de6 <_reclaim_reent+0x16>
 8004e70:	680e      	ldr	r6, [r1, #0]
 8004e72:	4620      	mov	r0, r4
 8004e74:	f000 fa84 	bl	8005380 <_free_r>
 8004e78:	4631      	mov	r1, r6
 8004e7a:	e7ef      	b.n	8004e5c <_reclaim_reent+0x8c>
 8004e7c:	2500      	movs	r5, #0
 8004e7e:	e7ef      	b.n	8004e60 <_reclaim_reent+0x90>
 8004e80:	bd70      	pop	{r4, r5, r6, pc}
 8004e82:	bf00      	nop
 8004e84:	20000034 	.word	0x20000034

08004e88 <_sbrk_r>:
 8004e88:	b538      	push	{r3, r4, r5, lr}
 8004e8a:	4d06      	ldr	r5, [pc, #24]	; (8004ea4 <_sbrk_r+0x1c>)
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	4604      	mov	r4, r0
 8004e90:	4608      	mov	r0, r1
 8004e92:	602b      	str	r3, [r5, #0]
 8004e94:	f7fb fea0 	bl	8000bd8 <_sbrk>
 8004e98:	1c43      	adds	r3, r0, #1
 8004e9a:	d102      	bne.n	8004ea2 <_sbrk_r+0x1a>
 8004e9c:	682b      	ldr	r3, [r5, #0]
 8004e9e:	b103      	cbz	r3, 8004ea2 <_sbrk_r+0x1a>
 8004ea0:	6023      	str	r3, [r4, #0]
 8004ea2:	bd38      	pop	{r3, r4, r5, pc}
 8004ea4:	20004128 	.word	0x20004128

08004ea8 <__sread>:
 8004ea8:	b510      	push	{r4, lr}
 8004eaa:	460c      	mov	r4, r1
 8004eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb0:	f000 fda0 	bl	80059f4 <_read_r>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	bfab      	itete	ge
 8004eb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004eba:	89a3      	ldrhlt	r3, [r4, #12]
 8004ebc:	181b      	addge	r3, r3, r0
 8004ebe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ec2:	bfac      	ite	ge
 8004ec4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ec6:	81a3      	strhlt	r3, [r4, #12]
 8004ec8:	bd10      	pop	{r4, pc}

08004eca <__swrite>:
 8004eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ece:	461f      	mov	r7, r3
 8004ed0:	898b      	ldrh	r3, [r1, #12]
 8004ed2:	05db      	lsls	r3, r3, #23
 8004ed4:	4605      	mov	r5, r0
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	4616      	mov	r6, r2
 8004eda:	d505      	bpl.n	8004ee8 <__swrite+0x1e>
 8004edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f000 f9c8 	bl	8005278 <_lseek_r>
 8004ee8:	89a3      	ldrh	r3, [r4, #12]
 8004eea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004eee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ef2:	81a3      	strh	r3, [r4, #12]
 8004ef4:	4632      	mov	r2, r6
 8004ef6:	463b      	mov	r3, r7
 8004ef8:	4628      	mov	r0, r5
 8004efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004efe:	f000 b869 	b.w	8004fd4 <_write_r>

08004f02 <__sseek>:
 8004f02:	b510      	push	{r4, lr}
 8004f04:	460c      	mov	r4, r1
 8004f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f0a:	f000 f9b5 	bl	8005278 <_lseek_r>
 8004f0e:	1c43      	adds	r3, r0, #1
 8004f10:	89a3      	ldrh	r3, [r4, #12]
 8004f12:	bf15      	itete	ne
 8004f14:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f1e:	81a3      	strheq	r3, [r4, #12]
 8004f20:	bf18      	it	ne
 8004f22:	81a3      	strhne	r3, [r4, #12]
 8004f24:	bd10      	pop	{r4, pc}

08004f26 <__sclose>:
 8004f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f2a:	f000 b8d3 	b.w	80050d4 <_close_r>
	...

08004f30 <__swbuf_r>:
 8004f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f32:	460e      	mov	r6, r1
 8004f34:	4614      	mov	r4, r2
 8004f36:	4605      	mov	r5, r0
 8004f38:	b118      	cbz	r0, 8004f42 <__swbuf_r+0x12>
 8004f3a:	6983      	ldr	r3, [r0, #24]
 8004f3c:	b90b      	cbnz	r3, 8004f42 <__swbuf_r+0x12>
 8004f3e:	f7ff fd3b 	bl	80049b8 <__sinit>
 8004f42:	4b21      	ldr	r3, [pc, #132]	; (8004fc8 <__swbuf_r+0x98>)
 8004f44:	429c      	cmp	r4, r3
 8004f46:	d12b      	bne.n	8004fa0 <__swbuf_r+0x70>
 8004f48:	686c      	ldr	r4, [r5, #4]
 8004f4a:	69a3      	ldr	r3, [r4, #24]
 8004f4c:	60a3      	str	r3, [r4, #8]
 8004f4e:	89a3      	ldrh	r3, [r4, #12]
 8004f50:	071a      	lsls	r2, r3, #28
 8004f52:	d52f      	bpl.n	8004fb4 <__swbuf_r+0x84>
 8004f54:	6923      	ldr	r3, [r4, #16]
 8004f56:	b36b      	cbz	r3, 8004fb4 <__swbuf_r+0x84>
 8004f58:	6923      	ldr	r3, [r4, #16]
 8004f5a:	6820      	ldr	r0, [r4, #0]
 8004f5c:	1ac0      	subs	r0, r0, r3
 8004f5e:	6963      	ldr	r3, [r4, #20]
 8004f60:	b2f6      	uxtb	r6, r6
 8004f62:	4283      	cmp	r3, r0
 8004f64:	4637      	mov	r7, r6
 8004f66:	dc04      	bgt.n	8004f72 <__swbuf_r+0x42>
 8004f68:	4621      	mov	r1, r4
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f000 f948 	bl	8005200 <_fflush_r>
 8004f70:	bb30      	cbnz	r0, 8004fc0 <__swbuf_r+0x90>
 8004f72:	68a3      	ldr	r3, [r4, #8]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	60a3      	str	r3, [r4, #8]
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	6022      	str	r2, [r4, #0]
 8004f7e:	701e      	strb	r6, [r3, #0]
 8004f80:	6963      	ldr	r3, [r4, #20]
 8004f82:	3001      	adds	r0, #1
 8004f84:	4283      	cmp	r3, r0
 8004f86:	d004      	beq.n	8004f92 <__swbuf_r+0x62>
 8004f88:	89a3      	ldrh	r3, [r4, #12]
 8004f8a:	07db      	lsls	r3, r3, #31
 8004f8c:	d506      	bpl.n	8004f9c <__swbuf_r+0x6c>
 8004f8e:	2e0a      	cmp	r6, #10
 8004f90:	d104      	bne.n	8004f9c <__swbuf_r+0x6c>
 8004f92:	4621      	mov	r1, r4
 8004f94:	4628      	mov	r0, r5
 8004f96:	f000 f933 	bl	8005200 <_fflush_r>
 8004f9a:	b988      	cbnz	r0, 8004fc0 <__swbuf_r+0x90>
 8004f9c:	4638      	mov	r0, r7
 8004f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <__swbuf_r+0x9c>)
 8004fa2:	429c      	cmp	r4, r3
 8004fa4:	d101      	bne.n	8004faa <__swbuf_r+0x7a>
 8004fa6:	68ac      	ldr	r4, [r5, #8]
 8004fa8:	e7cf      	b.n	8004f4a <__swbuf_r+0x1a>
 8004faa:	4b09      	ldr	r3, [pc, #36]	; (8004fd0 <__swbuf_r+0xa0>)
 8004fac:	429c      	cmp	r4, r3
 8004fae:	bf08      	it	eq
 8004fb0:	68ec      	ldreq	r4, [r5, #12]
 8004fb2:	e7ca      	b.n	8004f4a <__swbuf_r+0x1a>
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f000 f81e 	bl	8004ff8 <__swsetup_r>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d0cb      	beq.n	8004f58 <__swbuf_r+0x28>
 8004fc0:	f04f 37ff 	mov.w	r7, #4294967295
 8004fc4:	e7ea      	b.n	8004f9c <__swbuf_r+0x6c>
 8004fc6:	bf00      	nop
 8004fc8:	08005b9c 	.word	0x08005b9c
 8004fcc:	08005bbc 	.word	0x08005bbc
 8004fd0:	08005b7c 	.word	0x08005b7c

08004fd4 <_write_r>:
 8004fd4:	b538      	push	{r3, r4, r5, lr}
 8004fd6:	4d07      	ldr	r5, [pc, #28]	; (8004ff4 <_write_r+0x20>)
 8004fd8:	4604      	mov	r4, r0
 8004fda:	4608      	mov	r0, r1
 8004fdc:	4611      	mov	r1, r2
 8004fde:	2200      	movs	r2, #0
 8004fe0:	602a      	str	r2, [r5, #0]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	f7fb fb07 	bl	80005f6 <_write>
 8004fe8:	1c43      	adds	r3, r0, #1
 8004fea:	d102      	bne.n	8004ff2 <_write_r+0x1e>
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	b103      	cbz	r3, 8004ff2 <_write_r+0x1e>
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	bd38      	pop	{r3, r4, r5, pc}
 8004ff4:	20004128 	.word	0x20004128

08004ff8 <__swsetup_r>:
 8004ff8:	4b32      	ldr	r3, [pc, #200]	; (80050c4 <__swsetup_r+0xcc>)
 8004ffa:	b570      	push	{r4, r5, r6, lr}
 8004ffc:	681d      	ldr	r5, [r3, #0]
 8004ffe:	4606      	mov	r6, r0
 8005000:	460c      	mov	r4, r1
 8005002:	b125      	cbz	r5, 800500e <__swsetup_r+0x16>
 8005004:	69ab      	ldr	r3, [r5, #24]
 8005006:	b913      	cbnz	r3, 800500e <__swsetup_r+0x16>
 8005008:	4628      	mov	r0, r5
 800500a:	f7ff fcd5 	bl	80049b8 <__sinit>
 800500e:	4b2e      	ldr	r3, [pc, #184]	; (80050c8 <__swsetup_r+0xd0>)
 8005010:	429c      	cmp	r4, r3
 8005012:	d10f      	bne.n	8005034 <__swsetup_r+0x3c>
 8005014:	686c      	ldr	r4, [r5, #4]
 8005016:	89a3      	ldrh	r3, [r4, #12]
 8005018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800501c:	0719      	lsls	r1, r3, #28
 800501e:	d42c      	bmi.n	800507a <__swsetup_r+0x82>
 8005020:	06dd      	lsls	r5, r3, #27
 8005022:	d411      	bmi.n	8005048 <__swsetup_r+0x50>
 8005024:	2309      	movs	r3, #9
 8005026:	6033      	str	r3, [r6, #0]
 8005028:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800502c:	81a3      	strh	r3, [r4, #12]
 800502e:	f04f 30ff 	mov.w	r0, #4294967295
 8005032:	e03e      	b.n	80050b2 <__swsetup_r+0xba>
 8005034:	4b25      	ldr	r3, [pc, #148]	; (80050cc <__swsetup_r+0xd4>)
 8005036:	429c      	cmp	r4, r3
 8005038:	d101      	bne.n	800503e <__swsetup_r+0x46>
 800503a:	68ac      	ldr	r4, [r5, #8]
 800503c:	e7eb      	b.n	8005016 <__swsetup_r+0x1e>
 800503e:	4b24      	ldr	r3, [pc, #144]	; (80050d0 <__swsetup_r+0xd8>)
 8005040:	429c      	cmp	r4, r3
 8005042:	bf08      	it	eq
 8005044:	68ec      	ldreq	r4, [r5, #12]
 8005046:	e7e6      	b.n	8005016 <__swsetup_r+0x1e>
 8005048:	0758      	lsls	r0, r3, #29
 800504a:	d512      	bpl.n	8005072 <__swsetup_r+0x7a>
 800504c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800504e:	b141      	cbz	r1, 8005062 <__swsetup_r+0x6a>
 8005050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005054:	4299      	cmp	r1, r3
 8005056:	d002      	beq.n	800505e <__swsetup_r+0x66>
 8005058:	4630      	mov	r0, r6
 800505a:	f000 f991 	bl	8005380 <_free_r>
 800505e:	2300      	movs	r3, #0
 8005060:	6363      	str	r3, [r4, #52]	; 0x34
 8005062:	89a3      	ldrh	r3, [r4, #12]
 8005064:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005068:	81a3      	strh	r3, [r4, #12]
 800506a:	2300      	movs	r3, #0
 800506c:	6063      	str	r3, [r4, #4]
 800506e:	6923      	ldr	r3, [r4, #16]
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	89a3      	ldrh	r3, [r4, #12]
 8005074:	f043 0308 	orr.w	r3, r3, #8
 8005078:	81a3      	strh	r3, [r4, #12]
 800507a:	6923      	ldr	r3, [r4, #16]
 800507c:	b94b      	cbnz	r3, 8005092 <__swsetup_r+0x9a>
 800507e:	89a3      	ldrh	r3, [r4, #12]
 8005080:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005088:	d003      	beq.n	8005092 <__swsetup_r+0x9a>
 800508a:	4621      	mov	r1, r4
 800508c:	4630      	mov	r0, r6
 800508e:	f000 f92b 	bl	80052e8 <__smakebuf_r>
 8005092:	89a0      	ldrh	r0, [r4, #12]
 8005094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005098:	f010 0301 	ands.w	r3, r0, #1
 800509c:	d00a      	beq.n	80050b4 <__swsetup_r+0xbc>
 800509e:	2300      	movs	r3, #0
 80050a0:	60a3      	str	r3, [r4, #8]
 80050a2:	6963      	ldr	r3, [r4, #20]
 80050a4:	425b      	negs	r3, r3
 80050a6:	61a3      	str	r3, [r4, #24]
 80050a8:	6923      	ldr	r3, [r4, #16]
 80050aa:	b943      	cbnz	r3, 80050be <__swsetup_r+0xc6>
 80050ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80050b0:	d1ba      	bne.n	8005028 <__swsetup_r+0x30>
 80050b2:	bd70      	pop	{r4, r5, r6, pc}
 80050b4:	0781      	lsls	r1, r0, #30
 80050b6:	bf58      	it	pl
 80050b8:	6963      	ldrpl	r3, [r4, #20]
 80050ba:	60a3      	str	r3, [r4, #8]
 80050bc:	e7f4      	b.n	80050a8 <__swsetup_r+0xb0>
 80050be:	2000      	movs	r0, #0
 80050c0:	e7f7      	b.n	80050b2 <__swsetup_r+0xba>
 80050c2:	bf00      	nop
 80050c4:	20000034 	.word	0x20000034
 80050c8:	08005b9c 	.word	0x08005b9c
 80050cc:	08005bbc 	.word	0x08005bbc
 80050d0:	08005b7c 	.word	0x08005b7c

080050d4 <_close_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	4d06      	ldr	r5, [pc, #24]	; (80050f0 <_close_r+0x1c>)
 80050d8:	2300      	movs	r3, #0
 80050da:	4604      	mov	r4, r0
 80050dc:	4608      	mov	r0, r1
 80050de:	602b      	str	r3, [r5, #0]
 80050e0:	f7fb fd45 	bl	8000b6e <_close>
 80050e4:	1c43      	adds	r3, r0, #1
 80050e6:	d102      	bne.n	80050ee <_close_r+0x1a>
 80050e8:	682b      	ldr	r3, [r5, #0]
 80050ea:	b103      	cbz	r3, 80050ee <_close_r+0x1a>
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	bd38      	pop	{r3, r4, r5, pc}
 80050f0:	20004128 	.word	0x20004128

080050f4 <__sflush_r>:
 80050f4:	898a      	ldrh	r2, [r1, #12]
 80050f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050fa:	4605      	mov	r5, r0
 80050fc:	0710      	lsls	r0, r2, #28
 80050fe:	460c      	mov	r4, r1
 8005100:	d458      	bmi.n	80051b4 <__sflush_r+0xc0>
 8005102:	684b      	ldr	r3, [r1, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	dc05      	bgt.n	8005114 <__sflush_r+0x20>
 8005108:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800510a:	2b00      	cmp	r3, #0
 800510c:	dc02      	bgt.n	8005114 <__sflush_r+0x20>
 800510e:	2000      	movs	r0, #0
 8005110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005114:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005116:	2e00      	cmp	r6, #0
 8005118:	d0f9      	beq.n	800510e <__sflush_r+0x1a>
 800511a:	2300      	movs	r3, #0
 800511c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005120:	682f      	ldr	r7, [r5, #0]
 8005122:	602b      	str	r3, [r5, #0]
 8005124:	d032      	beq.n	800518c <__sflush_r+0x98>
 8005126:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	075a      	lsls	r2, r3, #29
 800512c:	d505      	bpl.n	800513a <__sflush_r+0x46>
 800512e:	6863      	ldr	r3, [r4, #4]
 8005130:	1ac0      	subs	r0, r0, r3
 8005132:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005134:	b10b      	cbz	r3, 800513a <__sflush_r+0x46>
 8005136:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005138:	1ac0      	subs	r0, r0, r3
 800513a:	2300      	movs	r3, #0
 800513c:	4602      	mov	r2, r0
 800513e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005140:	6a21      	ldr	r1, [r4, #32]
 8005142:	4628      	mov	r0, r5
 8005144:	47b0      	blx	r6
 8005146:	1c43      	adds	r3, r0, #1
 8005148:	89a3      	ldrh	r3, [r4, #12]
 800514a:	d106      	bne.n	800515a <__sflush_r+0x66>
 800514c:	6829      	ldr	r1, [r5, #0]
 800514e:	291d      	cmp	r1, #29
 8005150:	d82c      	bhi.n	80051ac <__sflush_r+0xb8>
 8005152:	4a2a      	ldr	r2, [pc, #168]	; (80051fc <__sflush_r+0x108>)
 8005154:	40ca      	lsrs	r2, r1
 8005156:	07d6      	lsls	r6, r2, #31
 8005158:	d528      	bpl.n	80051ac <__sflush_r+0xb8>
 800515a:	2200      	movs	r2, #0
 800515c:	6062      	str	r2, [r4, #4]
 800515e:	04d9      	lsls	r1, r3, #19
 8005160:	6922      	ldr	r2, [r4, #16]
 8005162:	6022      	str	r2, [r4, #0]
 8005164:	d504      	bpl.n	8005170 <__sflush_r+0x7c>
 8005166:	1c42      	adds	r2, r0, #1
 8005168:	d101      	bne.n	800516e <__sflush_r+0x7a>
 800516a:	682b      	ldr	r3, [r5, #0]
 800516c:	b903      	cbnz	r3, 8005170 <__sflush_r+0x7c>
 800516e:	6560      	str	r0, [r4, #84]	; 0x54
 8005170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005172:	602f      	str	r7, [r5, #0]
 8005174:	2900      	cmp	r1, #0
 8005176:	d0ca      	beq.n	800510e <__sflush_r+0x1a>
 8005178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800517c:	4299      	cmp	r1, r3
 800517e:	d002      	beq.n	8005186 <__sflush_r+0x92>
 8005180:	4628      	mov	r0, r5
 8005182:	f000 f8fd 	bl	8005380 <_free_r>
 8005186:	2000      	movs	r0, #0
 8005188:	6360      	str	r0, [r4, #52]	; 0x34
 800518a:	e7c1      	b.n	8005110 <__sflush_r+0x1c>
 800518c:	6a21      	ldr	r1, [r4, #32]
 800518e:	2301      	movs	r3, #1
 8005190:	4628      	mov	r0, r5
 8005192:	47b0      	blx	r6
 8005194:	1c41      	adds	r1, r0, #1
 8005196:	d1c7      	bne.n	8005128 <__sflush_r+0x34>
 8005198:	682b      	ldr	r3, [r5, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0c4      	beq.n	8005128 <__sflush_r+0x34>
 800519e:	2b1d      	cmp	r3, #29
 80051a0:	d001      	beq.n	80051a6 <__sflush_r+0xb2>
 80051a2:	2b16      	cmp	r3, #22
 80051a4:	d101      	bne.n	80051aa <__sflush_r+0xb6>
 80051a6:	602f      	str	r7, [r5, #0]
 80051a8:	e7b1      	b.n	800510e <__sflush_r+0x1a>
 80051aa:	89a3      	ldrh	r3, [r4, #12]
 80051ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051b0:	81a3      	strh	r3, [r4, #12]
 80051b2:	e7ad      	b.n	8005110 <__sflush_r+0x1c>
 80051b4:	690f      	ldr	r7, [r1, #16]
 80051b6:	2f00      	cmp	r7, #0
 80051b8:	d0a9      	beq.n	800510e <__sflush_r+0x1a>
 80051ba:	0793      	lsls	r3, r2, #30
 80051bc:	680e      	ldr	r6, [r1, #0]
 80051be:	bf08      	it	eq
 80051c0:	694b      	ldreq	r3, [r1, #20]
 80051c2:	600f      	str	r7, [r1, #0]
 80051c4:	bf18      	it	ne
 80051c6:	2300      	movne	r3, #0
 80051c8:	eba6 0807 	sub.w	r8, r6, r7
 80051cc:	608b      	str	r3, [r1, #8]
 80051ce:	f1b8 0f00 	cmp.w	r8, #0
 80051d2:	dd9c      	ble.n	800510e <__sflush_r+0x1a>
 80051d4:	6a21      	ldr	r1, [r4, #32]
 80051d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80051d8:	4643      	mov	r3, r8
 80051da:	463a      	mov	r2, r7
 80051dc:	4628      	mov	r0, r5
 80051de:	47b0      	blx	r6
 80051e0:	2800      	cmp	r0, #0
 80051e2:	dc06      	bgt.n	80051f2 <__sflush_r+0xfe>
 80051e4:	89a3      	ldrh	r3, [r4, #12]
 80051e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ea:	81a3      	strh	r3, [r4, #12]
 80051ec:	f04f 30ff 	mov.w	r0, #4294967295
 80051f0:	e78e      	b.n	8005110 <__sflush_r+0x1c>
 80051f2:	4407      	add	r7, r0
 80051f4:	eba8 0800 	sub.w	r8, r8, r0
 80051f8:	e7e9      	b.n	80051ce <__sflush_r+0xda>
 80051fa:	bf00      	nop
 80051fc:	20400001 	.word	0x20400001

08005200 <_fflush_r>:
 8005200:	b538      	push	{r3, r4, r5, lr}
 8005202:	690b      	ldr	r3, [r1, #16]
 8005204:	4605      	mov	r5, r0
 8005206:	460c      	mov	r4, r1
 8005208:	b913      	cbnz	r3, 8005210 <_fflush_r+0x10>
 800520a:	2500      	movs	r5, #0
 800520c:	4628      	mov	r0, r5
 800520e:	bd38      	pop	{r3, r4, r5, pc}
 8005210:	b118      	cbz	r0, 800521a <_fflush_r+0x1a>
 8005212:	6983      	ldr	r3, [r0, #24]
 8005214:	b90b      	cbnz	r3, 800521a <_fflush_r+0x1a>
 8005216:	f7ff fbcf 	bl	80049b8 <__sinit>
 800521a:	4b14      	ldr	r3, [pc, #80]	; (800526c <_fflush_r+0x6c>)
 800521c:	429c      	cmp	r4, r3
 800521e:	d11b      	bne.n	8005258 <_fflush_r+0x58>
 8005220:	686c      	ldr	r4, [r5, #4]
 8005222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0ef      	beq.n	800520a <_fflush_r+0xa>
 800522a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800522c:	07d0      	lsls	r0, r2, #31
 800522e:	d404      	bmi.n	800523a <_fflush_r+0x3a>
 8005230:	0599      	lsls	r1, r3, #22
 8005232:	d402      	bmi.n	800523a <_fflush_r+0x3a>
 8005234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005236:	f7ff fc82 	bl	8004b3e <__retarget_lock_acquire_recursive>
 800523a:	4628      	mov	r0, r5
 800523c:	4621      	mov	r1, r4
 800523e:	f7ff ff59 	bl	80050f4 <__sflush_r>
 8005242:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005244:	07da      	lsls	r2, r3, #31
 8005246:	4605      	mov	r5, r0
 8005248:	d4e0      	bmi.n	800520c <_fflush_r+0xc>
 800524a:	89a3      	ldrh	r3, [r4, #12]
 800524c:	059b      	lsls	r3, r3, #22
 800524e:	d4dd      	bmi.n	800520c <_fflush_r+0xc>
 8005250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005252:	f7ff fc75 	bl	8004b40 <__retarget_lock_release_recursive>
 8005256:	e7d9      	b.n	800520c <_fflush_r+0xc>
 8005258:	4b05      	ldr	r3, [pc, #20]	; (8005270 <_fflush_r+0x70>)
 800525a:	429c      	cmp	r4, r3
 800525c:	d101      	bne.n	8005262 <_fflush_r+0x62>
 800525e:	68ac      	ldr	r4, [r5, #8]
 8005260:	e7df      	b.n	8005222 <_fflush_r+0x22>
 8005262:	4b04      	ldr	r3, [pc, #16]	; (8005274 <_fflush_r+0x74>)
 8005264:	429c      	cmp	r4, r3
 8005266:	bf08      	it	eq
 8005268:	68ec      	ldreq	r4, [r5, #12]
 800526a:	e7da      	b.n	8005222 <_fflush_r+0x22>
 800526c:	08005b9c 	.word	0x08005b9c
 8005270:	08005bbc 	.word	0x08005bbc
 8005274:	08005b7c 	.word	0x08005b7c

08005278 <_lseek_r>:
 8005278:	b538      	push	{r3, r4, r5, lr}
 800527a:	4d07      	ldr	r5, [pc, #28]	; (8005298 <_lseek_r+0x20>)
 800527c:	4604      	mov	r4, r0
 800527e:	4608      	mov	r0, r1
 8005280:	4611      	mov	r1, r2
 8005282:	2200      	movs	r2, #0
 8005284:	602a      	str	r2, [r5, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	f7fb fc98 	bl	8000bbc <_lseek>
 800528c:	1c43      	adds	r3, r0, #1
 800528e:	d102      	bne.n	8005296 <_lseek_r+0x1e>
 8005290:	682b      	ldr	r3, [r5, #0]
 8005292:	b103      	cbz	r3, 8005296 <_lseek_r+0x1e>
 8005294:	6023      	str	r3, [r4, #0]
 8005296:	bd38      	pop	{r3, r4, r5, pc}
 8005298:	20004128 	.word	0x20004128

0800529c <__swhatbuf_r>:
 800529c:	b570      	push	{r4, r5, r6, lr}
 800529e:	460e      	mov	r6, r1
 80052a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a4:	2900      	cmp	r1, #0
 80052a6:	b096      	sub	sp, #88	; 0x58
 80052a8:	4614      	mov	r4, r2
 80052aa:	461d      	mov	r5, r3
 80052ac:	da08      	bge.n	80052c0 <__swhatbuf_r+0x24>
 80052ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	602a      	str	r2, [r5, #0]
 80052b6:	061a      	lsls	r2, r3, #24
 80052b8:	d410      	bmi.n	80052dc <__swhatbuf_r+0x40>
 80052ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052be:	e00e      	b.n	80052de <__swhatbuf_r+0x42>
 80052c0:	466a      	mov	r2, sp
 80052c2:	f000 fba9 	bl	8005a18 <_fstat_r>
 80052c6:	2800      	cmp	r0, #0
 80052c8:	dbf1      	blt.n	80052ae <__swhatbuf_r+0x12>
 80052ca:	9a01      	ldr	r2, [sp, #4]
 80052cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80052d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80052d4:	425a      	negs	r2, r3
 80052d6:	415a      	adcs	r2, r3
 80052d8:	602a      	str	r2, [r5, #0]
 80052da:	e7ee      	b.n	80052ba <__swhatbuf_r+0x1e>
 80052dc:	2340      	movs	r3, #64	; 0x40
 80052de:	2000      	movs	r0, #0
 80052e0:	6023      	str	r3, [r4, #0]
 80052e2:	b016      	add	sp, #88	; 0x58
 80052e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080052e8 <__smakebuf_r>:
 80052e8:	898b      	ldrh	r3, [r1, #12]
 80052ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052ec:	079d      	lsls	r5, r3, #30
 80052ee:	4606      	mov	r6, r0
 80052f0:	460c      	mov	r4, r1
 80052f2:	d507      	bpl.n	8005304 <__smakebuf_r+0x1c>
 80052f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052f8:	6023      	str	r3, [r4, #0]
 80052fa:	6123      	str	r3, [r4, #16]
 80052fc:	2301      	movs	r3, #1
 80052fe:	6163      	str	r3, [r4, #20]
 8005300:	b002      	add	sp, #8
 8005302:	bd70      	pop	{r4, r5, r6, pc}
 8005304:	ab01      	add	r3, sp, #4
 8005306:	466a      	mov	r2, sp
 8005308:	f7ff ffc8 	bl	800529c <__swhatbuf_r>
 800530c:	9900      	ldr	r1, [sp, #0]
 800530e:	4605      	mov	r5, r0
 8005310:	4630      	mov	r0, r6
 8005312:	f7ff fc4d 	bl	8004bb0 <_malloc_r>
 8005316:	b948      	cbnz	r0, 800532c <__smakebuf_r+0x44>
 8005318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800531c:	059a      	lsls	r2, r3, #22
 800531e:	d4ef      	bmi.n	8005300 <__smakebuf_r+0x18>
 8005320:	f023 0303 	bic.w	r3, r3, #3
 8005324:	f043 0302 	orr.w	r3, r3, #2
 8005328:	81a3      	strh	r3, [r4, #12]
 800532a:	e7e3      	b.n	80052f4 <__smakebuf_r+0xc>
 800532c:	4b0d      	ldr	r3, [pc, #52]	; (8005364 <__smakebuf_r+0x7c>)
 800532e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005330:	89a3      	ldrh	r3, [r4, #12]
 8005332:	6020      	str	r0, [r4, #0]
 8005334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005338:	81a3      	strh	r3, [r4, #12]
 800533a:	9b00      	ldr	r3, [sp, #0]
 800533c:	6163      	str	r3, [r4, #20]
 800533e:	9b01      	ldr	r3, [sp, #4]
 8005340:	6120      	str	r0, [r4, #16]
 8005342:	b15b      	cbz	r3, 800535c <__smakebuf_r+0x74>
 8005344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005348:	4630      	mov	r0, r6
 800534a:	f000 fb77 	bl	8005a3c <_isatty_r>
 800534e:	b128      	cbz	r0, 800535c <__smakebuf_r+0x74>
 8005350:	89a3      	ldrh	r3, [r4, #12]
 8005352:	f023 0303 	bic.w	r3, r3, #3
 8005356:	f043 0301 	orr.w	r3, r3, #1
 800535a:	81a3      	strh	r3, [r4, #12]
 800535c:	89a0      	ldrh	r0, [r4, #12]
 800535e:	4305      	orrs	r5, r0
 8005360:	81a5      	strh	r5, [r4, #12]
 8005362:	e7cd      	b.n	8005300 <__smakebuf_r+0x18>
 8005364:	08004951 	.word	0x08004951

08005368 <__malloc_lock>:
 8005368:	4801      	ldr	r0, [pc, #4]	; (8005370 <__malloc_lock+0x8>)
 800536a:	f7ff bbe8 	b.w	8004b3e <__retarget_lock_acquire_recursive>
 800536e:	bf00      	nop
 8005370:	2000411c 	.word	0x2000411c

08005374 <__malloc_unlock>:
 8005374:	4801      	ldr	r0, [pc, #4]	; (800537c <__malloc_unlock+0x8>)
 8005376:	f7ff bbe3 	b.w	8004b40 <__retarget_lock_release_recursive>
 800537a:	bf00      	nop
 800537c:	2000411c 	.word	0x2000411c

08005380 <_free_r>:
 8005380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005382:	2900      	cmp	r1, #0
 8005384:	d044      	beq.n	8005410 <_free_r+0x90>
 8005386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800538a:	9001      	str	r0, [sp, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	f1a1 0404 	sub.w	r4, r1, #4
 8005392:	bfb8      	it	lt
 8005394:	18e4      	addlt	r4, r4, r3
 8005396:	f7ff ffe7 	bl	8005368 <__malloc_lock>
 800539a:	4a1e      	ldr	r2, [pc, #120]	; (8005414 <_free_r+0x94>)
 800539c:	9801      	ldr	r0, [sp, #4]
 800539e:	6813      	ldr	r3, [r2, #0]
 80053a0:	b933      	cbnz	r3, 80053b0 <_free_r+0x30>
 80053a2:	6063      	str	r3, [r4, #4]
 80053a4:	6014      	str	r4, [r2, #0]
 80053a6:	b003      	add	sp, #12
 80053a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053ac:	f7ff bfe2 	b.w	8005374 <__malloc_unlock>
 80053b0:	42a3      	cmp	r3, r4
 80053b2:	d908      	bls.n	80053c6 <_free_r+0x46>
 80053b4:	6825      	ldr	r5, [r4, #0]
 80053b6:	1961      	adds	r1, r4, r5
 80053b8:	428b      	cmp	r3, r1
 80053ba:	bf01      	itttt	eq
 80053bc:	6819      	ldreq	r1, [r3, #0]
 80053be:	685b      	ldreq	r3, [r3, #4]
 80053c0:	1949      	addeq	r1, r1, r5
 80053c2:	6021      	streq	r1, [r4, #0]
 80053c4:	e7ed      	b.n	80053a2 <_free_r+0x22>
 80053c6:	461a      	mov	r2, r3
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	b10b      	cbz	r3, 80053d0 <_free_r+0x50>
 80053cc:	42a3      	cmp	r3, r4
 80053ce:	d9fa      	bls.n	80053c6 <_free_r+0x46>
 80053d0:	6811      	ldr	r1, [r2, #0]
 80053d2:	1855      	adds	r5, r2, r1
 80053d4:	42a5      	cmp	r5, r4
 80053d6:	d10b      	bne.n	80053f0 <_free_r+0x70>
 80053d8:	6824      	ldr	r4, [r4, #0]
 80053da:	4421      	add	r1, r4
 80053dc:	1854      	adds	r4, r2, r1
 80053de:	42a3      	cmp	r3, r4
 80053e0:	6011      	str	r1, [r2, #0]
 80053e2:	d1e0      	bne.n	80053a6 <_free_r+0x26>
 80053e4:	681c      	ldr	r4, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	6053      	str	r3, [r2, #4]
 80053ea:	4421      	add	r1, r4
 80053ec:	6011      	str	r1, [r2, #0]
 80053ee:	e7da      	b.n	80053a6 <_free_r+0x26>
 80053f0:	d902      	bls.n	80053f8 <_free_r+0x78>
 80053f2:	230c      	movs	r3, #12
 80053f4:	6003      	str	r3, [r0, #0]
 80053f6:	e7d6      	b.n	80053a6 <_free_r+0x26>
 80053f8:	6825      	ldr	r5, [r4, #0]
 80053fa:	1961      	adds	r1, r4, r5
 80053fc:	428b      	cmp	r3, r1
 80053fe:	bf04      	itt	eq
 8005400:	6819      	ldreq	r1, [r3, #0]
 8005402:	685b      	ldreq	r3, [r3, #4]
 8005404:	6063      	str	r3, [r4, #4]
 8005406:	bf04      	itt	eq
 8005408:	1949      	addeq	r1, r1, r5
 800540a:	6021      	streq	r1, [r4, #0]
 800540c:	6054      	str	r4, [r2, #4]
 800540e:	e7ca      	b.n	80053a6 <_free_r+0x26>
 8005410:	b003      	add	sp, #12
 8005412:	bd30      	pop	{r4, r5, pc}
 8005414:	20004120 	.word	0x20004120

08005418 <__sfputc_r>:
 8005418:	6893      	ldr	r3, [r2, #8]
 800541a:	3b01      	subs	r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	b410      	push	{r4}
 8005420:	6093      	str	r3, [r2, #8]
 8005422:	da08      	bge.n	8005436 <__sfputc_r+0x1e>
 8005424:	6994      	ldr	r4, [r2, #24]
 8005426:	42a3      	cmp	r3, r4
 8005428:	db01      	blt.n	800542e <__sfputc_r+0x16>
 800542a:	290a      	cmp	r1, #10
 800542c:	d103      	bne.n	8005436 <__sfputc_r+0x1e>
 800542e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005432:	f7ff bd7d 	b.w	8004f30 <__swbuf_r>
 8005436:	6813      	ldr	r3, [r2, #0]
 8005438:	1c58      	adds	r0, r3, #1
 800543a:	6010      	str	r0, [r2, #0]
 800543c:	7019      	strb	r1, [r3, #0]
 800543e:	4608      	mov	r0, r1
 8005440:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005444:	4770      	bx	lr

08005446 <__sfputs_r>:
 8005446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005448:	4606      	mov	r6, r0
 800544a:	460f      	mov	r7, r1
 800544c:	4614      	mov	r4, r2
 800544e:	18d5      	adds	r5, r2, r3
 8005450:	42ac      	cmp	r4, r5
 8005452:	d101      	bne.n	8005458 <__sfputs_r+0x12>
 8005454:	2000      	movs	r0, #0
 8005456:	e007      	b.n	8005468 <__sfputs_r+0x22>
 8005458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800545c:	463a      	mov	r2, r7
 800545e:	4630      	mov	r0, r6
 8005460:	f7ff ffda 	bl	8005418 <__sfputc_r>
 8005464:	1c43      	adds	r3, r0, #1
 8005466:	d1f3      	bne.n	8005450 <__sfputs_r+0xa>
 8005468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800546c <_vfiprintf_r>:
 800546c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005470:	460d      	mov	r5, r1
 8005472:	b09d      	sub	sp, #116	; 0x74
 8005474:	4614      	mov	r4, r2
 8005476:	4698      	mov	r8, r3
 8005478:	4606      	mov	r6, r0
 800547a:	b118      	cbz	r0, 8005484 <_vfiprintf_r+0x18>
 800547c:	6983      	ldr	r3, [r0, #24]
 800547e:	b90b      	cbnz	r3, 8005484 <_vfiprintf_r+0x18>
 8005480:	f7ff fa9a 	bl	80049b8 <__sinit>
 8005484:	4b89      	ldr	r3, [pc, #548]	; (80056ac <_vfiprintf_r+0x240>)
 8005486:	429d      	cmp	r5, r3
 8005488:	d11b      	bne.n	80054c2 <_vfiprintf_r+0x56>
 800548a:	6875      	ldr	r5, [r6, #4]
 800548c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800548e:	07d9      	lsls	r1, r3, #31
 8005490:	d405      	bmi.n	800549e <_vfiprintf_r+0x32>
 8005492:	89ab      	ldrh	r3, [r5, #12]
 8005494:	059a      	lsls	r2, r3, #22
 8005496:	d402      	bmi.n	800549e <_vfiprintf_r+0x32>
 8005498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800549a:	f7ff fb50 	bl	8004b3e <__retarget_lock_acquire_recursive>
 800549e:	89ab      	ldrh	r3, [r5, #12]
 80054a0:	071b      	lsls	r3, r3, #28
 80054a2:	d501      	bpl.n	80054a8 <_vfiprintf_r+0x3c>
 80054a4:	692b      	ldr	r3, [r5, #16]
 80054a6:	b9eb      	cbnz	r3, 80054e4 <_vfiprintf_r+0x78>
 80054a8:	4629      	mov	r1, r5
 80054aa:	4630      	mov	r0, r6
 80054ac:	f7ff fda4 	bl	8004ff8 <__swsetup_r>
 80054b0:	b1c0      	cbz	r0, 80054e4 <_vfiprintf_r+0x78>
 80054b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054b4:	07dc      	lsls	r4, r3, #31
 80054b6:	d50e      	bpl.n	80054d6 <_vfiprintf_r+0x6a>
 80054b8:	f04f 30ff 	mov.w	r0, #4294967295
 80054bc:	b01d      	add	sp, #116	; 0x74
 80054be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054c2:	4b7b      	ldr	r3, [pc, #492]	; (80056b0 <_vfiprintf_r+0x244>)
 80054c4:	429d      	cmp	r5, r3
 80054c6:	d101      	bne.n	80054cc <_vfiprintf_r+0x60>
 80054c8:	68b5      	ldr	r5, [r6, #8]
 80054ca:	e7df      	b.n	800548c <_vfiprintf_r+0x20>
 80054cc:	4b79      	ldr	r3, [pc, #484]	; (80056b4 <_vfiprintf_r+0x248>)
 80054ce:	429d      	cmp	r5, r3
 80054d0:	bf08      	it	eq
 80054d2:	68f5      	ldreq	r5, [r6, #12]
 80054d4:	e7da      	b.n	800548c <_vfiprintf_r+0x20>
 80054d6:	89ab      	ldrh	r3, [r5, #12]
 80054d8:	0598      	lsls	r0, r3, #22
 80054da:	d4ed      	bmi.n	80054b8 <_vfiprintf_r+0x4c>
 80054dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054de:	f7ff fb2f 	bl	8004b40 <__retarget_lock_release_recursive>
 80054e2:	e7e9      	b.n	80054b8 <_vfiprintf_r+0x4c>
 80054e4:	2300      	movs	r3, #0
 80054e6:	9309      	str	r3, [sp, #36]	; 0x24
 80054e8:	2320      	movs	r3, #32
 80054ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80054f2:	2330      	movs	r3, #48	; 0x30
 80054f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80056b8 <_vfiprintf_r+0x24c>
 80054f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054fc:	f04f 0901 	mov.w	r9, #1
 8005500:	4623      	mov	r3, r4
 8005502:	469a      	mov	sl, r3
 8005504:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005508:	b10a      	cbz	r2, 800550e <_vfiprintf_r+0xa2>
 800550a:	2a25      	cmp	r2, #37	; 0x25
 800550c:	d1f9      	bne.n	8005502 <_vfiprintf_r+0x96>
 800550e:	ebba 0b04 	subs.w	fp, sl, r4
 8005512:	d00b      	beq.n	800552c <_vfiprintf_r+0xc0>
 8005514:	465b      	mov	r3, fp
 8005516:	4622      	mov	r2, r4
 8005518:	4629      	mov	r1, r5
 800551a:	4630      	mov	r0, r6
 800551c:	f7ff ff93 	bl	8005446 <__sfputs_r>
 8005520:	3001      	adds	r0, #1
 8005522:	f000 80aa 	beq.w	800567a <_vfiprintf_r+0x20e>
 8005526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005528:	445a      	add	r2, fp
 800552a:	9209      	str	r2, [sp, #36]	; 0x24
 800552c:	f89a 3000 	ldrb.w	r3, [sl]
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 80a2 	beq.w	800567a <_vfiprintf_r+0x20e>
 8005536:	2300      	movs	r3, #0
 8005538:	f04f 32ff 	mov.w	r2, #4294967295
 800553c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005540:	f10a 0a01 	add.w	sl, sl, #1
 8005544:	9304      	str	r3, [sp, #16]
 8005546:	9307      	str	r3, [sp, #28]
 8005548:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800554c:	931a      	str	r3, [sp, #104]	; 0x68
 800554e:	4654      	mov	r4, sl
 8005550:	2205      	movs	r2, #5
 8005552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005556:	4858      	ldr	r0, [pc, #352]	; (80056b8 <_vfiprintf_r+0x24c>)
 8005558:	f7fa fe3a 	bl	80001d0 <memchr>
 800555c:	9a04      	ldr	r2, [sp, #16]
 800555e:	b9d8      	cbnz	r0, 8005598 <_vfiprintf_r+0x12c>
 8005560:	06d1      	lsls	r1, r2, #27
 8005562:	bf44      	itt	mi
 8005564:	2320      	movmi	r3, #32
 8005566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800556a:	0713      	lsls	r3, r2, #28
 800556c:	bf44      	itt	mi
 800556e:	232b      	movmi	r3, #43	; 0x2b
 8005570:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005574:	f89a 3000 	ldrb.w	r3, [sl]
 8005578:	2b2a      	cmp	r3, #42	; 0x2a
 800557a:	d015      	beq.n	80055a8 <_vfiprintf_r+0x13c>
 800557c:	9a07      	ldr	r2, [sp, #28]
 800557e:	4654      	mov	r4, sl
 8005580:	2000      	movs	r0, #0
 8005582:	f04f 0c0a 	mov.w	ip, #10
 8005586:	4621      	mov	r1, r4
 8005588:	f811 3b01 	ldrb.w	r3, [r1], #1
 800558c:	3b30      	subs	r3, #48	; 0x30
 800558e:	2b09      	cmp	r3, #9
 8005590:	d94e      	bls.n	8005630 <_vfiprintf_r+0x1c4>
 8005592:	b1b0      	cbz	r0, 80055c2 <_vfiprintf_r+0x156>
 8005594:	9207      	str	r2, [sp, #28]
 8005596:	e014      	b.n	80055c2 <_vfiprintf_r+0x156>
 8005598:	eba0 0308 	sub.w	r3, r0, r8
 800559c:	fa09 f303 	lsl.w	r3, r9, r3
 80055a0:	4313      	orrs	r3, r2
 80055a2:	9304      	str	r3, [sp, #16]
 80055a4:	46a2      	mov	sl, r4
 80055a6:	e7d2      	b.n	800554e <_vfiprintf_r+0xe2>
 80055a8:	9b03      	ldr	r3, [sp, #12]
 80055aa:	1d19      	adds	r1, r3, #4
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	9103      	str	r1, [sp, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	bfbb      	ittet	lt
 80055b4:	425b      	neglt	r3, r3
 80055b6:	f042 0202 	orrlt.w	r2, r2, #2
 80055ba:	9307      	strge	r3, [sp, #28]
 80055bc:	9307      	strlt	r3, [sp, #28]
 80055be:	bfb8      	it	lt
 80055c0:	9204      	strlt	r2, [sp, #16]
 80055c2:	7823      	ldrb	r3, [r4, #0]
 80055c4:	2b2e      	cmp	r3, #46	; 0x2e
 80055c6:	d10c      	bne.n	80055e2 <_vfiprintf_r+0x176>
 80055c8:	7863      	ldrb	r3, [r4, #1]
 80055ca:	2b2a      	cmp	r3, #42	; 0x2a
 80055cc:	d135      	bne.n	800563a <_vfiprintf_r+0x1ce>
 80055ce:	9b03      	ldr	r3, [sp, #12]
 80055d0:	1d1a      	adds	r2, r3, #4
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	9203      	str	r2, [sp, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	bfb8      	it	lt
 80055da:	f04f 33ff 	movlt.w	r3, #4294967295
 80055de:	3402      	adds	r4, #2
 80055e0:	9305      	str	r3, [sp, #20]
 80055e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80056c8 <_vfiprintf_r+0x25c>
 80055e6:	7821      	ldrb	r1, [r4, #0]
 80055e8:	2203      	movs	r2, #3
 80055ea:	4650      	mov	r0, sl
 80055ec:	f7fa fdf0 	bl	80001d0 <memchr>
 80055f0:	b140      	cbz	r0, 8005604 <_vfiprintf_r+0x198>
 80055f2:	2340      	movs	r3, #64	; 0x40
 80055f4:	eba0 000a 	sub.w	r0, r0, sl
 80055f8:	fa03 f000 	lsl.w	r0, r3, r0
 80055fc:	9b04      	ldr	r3, [sp, #16]
 80055fe:	4303      	orrs	r3, r0
 8005600:	3401      	adds	r4, #1
 8005602:	9304      	str	r3, [sp, #16]
 8005604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005608:	482c      	ldr	r0, [pc, #176]	; (80056bc <_vfiprintf_r+0x250>)
 800560a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800560e:	2206      	movs	r2, #6
 8005610:	f7fa fdde 	bl	80001d0 <memchr>
 8005614:	2800      	cmp	r0, #0
 8005616:	d03f      	beq.n	8005698 <_vfiprintf_r+0x22c>
 8005618:	4b29      	ldr	r3, [pc, #164]	; (80056c0 <_vfiprintf_r+0x254>)
 800561a:	bb1b      	cbnz	r3, 8005664 <_vfiprintf_r+0x1f8>
 800561c:	9b03      	ldr	r3, [sp, #12]
 800561e:	3307      	adds	r3, #7
 8005620:	f023 0307 	bic.w	r3, r3, #7
 8005624:	3308      	adds	r3, #8
 8005626:	9303      	str	r3, [sp, #12]
 8005628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800562a:	443b      	add	r3, r7
 800562c:	9309      	str	r3, [sp, #36]	; 0x24
 800562e:	e767      	b.n	8005500 <_vfiprintf_r+0x94>
 8005630:	fb0c 3202 	mla	r2, ip, r2, r3
 8005634:	460c      	mov	r4, r1
 8005636:	2001      	movs	r0, #1
 8005638:	e7a5      	b.n	8005586 <_vfiprintf_r+0x11a>
 800563a:	2300      	movs	r3, #0
 800563c:	3401      	adds	r4, #1
 800563e:	9305      	str	r3, [sp, #20]
 8005640:	4619      	mov	r1, r3
 8005642:	f04f 0c0a 	mov.w	ip, #10
 8005646:	4620      	mov	r0, r4
 8005648:	f810 2b01 	ldrb.w	r2, [r0], #1
 800564c:	3a30      	subs	r2, #48	; 0x30
 800564e:	2a09      	cmp	r2, #9
 8005650:	d903      	bls.n	800565a <_vfiprintf_r+0x1ee>
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0c5      	beq.n	80055e2 <_vfiprintf_r+0x176>
 8005656:	9105      	str	r1, [sp, #20]
 8005658:	e7c3      	b.n	80055e2 <_vfiprintf_r+0x176>
 800565a:	fb0c 2101 	mla	r1, ip, r1, r2
 800565e:	4604      	mov	r4, r0
 8005660:	2301      	movs	r3, #1
 8005662:	e7f0      	b.n	8005646 <_vfiprintf_r+0x1da>
 8005664:	ab03      	add	r3, sp, #12
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	462a      	mov	r2, r5
 800566a:	4b16      	ldr	r3, [pc, #88]	; (80056c4 <_vfiprintf_r+0x258>)
 800566c:	a904      	add	r1, sp, #16
 800566e:	4630      	mov	r0, r6
 8005670:	f3af 8000 	nop.w
 8005674:	4607      	mov	r7, r0
 8005676:	1c78      	adds	r0, r7, #1
 8005678:	d1d6      	bne.n	8005628 <_vfiprintf_r+0x1bc>
 800567a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800567c:	07d9      	lsls	r1, r3, #31
 800567e:	d405      	bmi.n	800568c <_vfiprintf_r+0x220>
 8005680:	89ab      	ldrh	r3, [r5, #12]
 8005682:	059a      	lsls	r2, r3, #22
 8005684:	d402      	bmi.n	800568c <_vfiprintf_r+0x220>
 8005686:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005688:	f7ff fa5a 	bl	8004b40 <__retarget_lock_release_recursive>
 800568c:	89ab      	ldrh	r3, [r5, #12]
 800568e:	065b      	lsls	r3, r3, #25
 8005690:	f53f af12 	bmi.w	80054b8 <_vfiprintf_r+0x4c>
 8005694:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005696:	e711      	b.n	80054bc <_vfiprintf_r+0x50>
 8005698:	ab03      	add	r3, sp, #12
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	462a      	mov	r2, r5
 800569e:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <_vfiprintf_r+0x258>)
 80056a0:	a904      	add	r1, sp, #16
 80056a2:	4630      	mov	r0, r6
 80056a4:	f000 f880 	bl	80057a8 <_printf_i>
 80056a8:	e7e4      	b.n	8005674 <_vfiprintf_r+0x208>
 80056aa:	bf00      	nop
 80056ac:	08005b9c 	.word	0x08005b9c
 80056b0:	08005bbc 	.word	0x08005bbc
 80056b4:	08005b7c 	.word	0x08005b7c
 80056b8:	08005be0 	.word	0x08005be0
 80056bc:	08005bea 	.word	0x08005bea
 80056c0:	00000000 	.word	0x00000000
 80056c4:	08005447 	.word	0x08005447
 80056c8:	08005be6 	.word	0x08005be6

080056cc <_printf_common>:
 80056cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d0:	4616      	mov	r6, r2
 80056d2:	4699      	mov	r9, r3
 80056d4:	688a      	ldr	r2, [r1, #8]
 80056d6:	690b      	ldr	r3, [r1, #16]
 80056d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056dc:	4293      	cmp	r3, r2
 80056de:	bfb8      	it	lt
 80056e0:	4613      	movlt	r3, r2
 80056e2:	6033      	str	r3, [r6, #0]
 80056e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056e8:	4607      	mov	r7, r0
 80056ea:	460c      	mov	r4, r1
 80056ec:	b10a      	cbz	r2, 80056f2 <_printf_common+0x26>
 80056ee:	3301      	adds	r3, #1
 80056f0:	6033      	str	r3, [r6, #0]
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	0699      	lsls	r1, r3, #26
 80056f6:	bf42      	ittt	mi
 80056f8:	6833      	ldrmi	r3, [r6, #0]
 80056fa:	3302      	addmi	r3, #2
 80056fc:	6033      	strmi	r3, [r6, #0]
 80056fe:	6825      	ldr	r5, [r4, #0]
 8005700:	f015 0506 	ands.w	r5, r5, #6
 8005704:	d106      	bne.n	8005714 <_printf_common+0x48>
 8005706:	f104 0a19 	add.w	sl, r4, #25
 800570a:	68e3      	ldr	r3, [r4, #12]
 800570c:	6832      	ldr	r2, [r6, #0]
 800570e:	1a9b      	subs	r3, r3, r2
 8005710:	42ab      	cmp	r3, r5
 8005712:	dc26      	bgt.n	8005762 <_printf_common+0x96>
 8005714:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005718:	1e13      	subs	r3, r2, #0
 800571a:	6822      	ldr	r2, [r4, #0]
 800571c:	bf18      	it	ne
 800571e:	2301      	movne	r3, #1
 8005720:	0692      	lsls	r2, r2, #26
 8005722:	d42b      	bmi.n	800577c <_printf_common+0xb0>
 8005724:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005728:	4649      	mov	r1, r9
 800572a:	4638      	mov	r0, r7
 800572c:	47c0      	blx	r8
 800572e:	3001      	adds	r0, #1
 8005730:	d01e      	beq.n	8005770 <_printf_common+0xa4>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	68e5      	ldr	r5, [r4, #12]
 8005736:	6832      	ldr	r2, [r6, #0]
 8005738:	f003 0306 	and.w	r3, r3, #6
 800573c:	2b04      	cmp	r3, #4
 800573e:	bf08      	it	eq
 8005740:	1aad      	subeq	r5, r5, r2
 8005742:	68a3      	ldr	r3, [r4, #8]
 8005744:	6922      	ldr	r2, [r4, #16]
 8005746:	bf0c      	ite	eq
 8005748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800574c:	2500      	movne	r5, #0
 800574e:	4293      	cmp	r3, r2
 8005750:	bfc4      	itt	gt
 8005752:	1a9b      	subgt	r3, r3, r2
 8005754:	18ed      	addgt	r5, r5, r3
 8005756:	2600      	movs	r6, #0
 8005758:	341a      	adds	r4, #26
 800575a:	42b5      	cmp	r5, r6
 800575c:	d11a      	bne.n	8005794 <_printf_common+0xc8>
 800575e:	2000      	movs	r0, #0
 8005760:	e008      	b.n	8005774 <_printf_common+0xa8>
 8005762:	2301      	movs	r3, #1
 8005764:	4652      	mov	r2, sl
 8005766:	4649      	mov	r1, r9
 8005768:	4638      	mov	r0, r7
 800576a:	47c0      	blx	r8
 800576c:	3001      	adds	r0, #1
 800576e:	d103      	bne.n	8005778 <_printf_common+0xac>
 8005770:	f04f 30ff 	mov.w	r0, #4294967295
 8005774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005778:	3501      	adds	r5, #1
 800577a:	e7c6      	b.n	800570a <_printf_common+0x3e>
 800577c:	18e1      	adds	r1, r4, r3
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	2030      	movs	r0, #48	; 0x30
 8005782:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005786:	4422      	add	r2, r4
 8005788:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800578c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005790:	3302      	adds	r3, #2
 8005792:	e7c7      	b.n	8005724 <_printf_common+0x58>
 8005794:	2301      	movs	r3, #1
 8005796:	4622      	mov	r2, r4
 8005798:	4649      	mov	r1, r9
 800579a:	4638      	mov	r0, r7
 800579c:	47c0      	blx	r8
 800579e:	3001      	adds	r0, #1
 80057a0:	d0e6      	beq.n	8005770 <_printf_common+0xa4>
 80057a2:	3601      	adds	r6, #1
 80057a4:	e7d9      	b.n	800575a <_printf_common+0x8e>
	...

080057a8 <_printf_i>:
 80057a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057ac:	7e0f      	ldrb	r7, [r1, #24]
 80057ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057b0:	2f78      	cmp	r7, #120	; 0x78
 80057b2:	4691      	mov	r9, r2
 80057b4:	4680      	mov	r8, r0
 80057b6:	460c      	mov	r4, r1
 80057b8:	469a      	mov	sl, r3
 80057ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057be:	d807      	bhi.n	80057d0 <_printf_i+0x28>
 80057c0:	2f62      	cmp	r7, #98	; 0x62
 80057c2:	d80a      	bhi.n	80057da <_printf_i+0x32>
 80057c4:	2f00      	cmp	r7, #0
 80057c6:	f000 80d8 	beq.w	800597a <_printf_i+0x1d2>
 80057ca:	2f58      	cmp	r7, #88	; 0x58
 80057cc:	f000 80a3 	beq.w	8005916 <_printf_i+0x16e>
 80057d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057d8:	e03a      	b.n	8005850 <_printf_i+0xa8>
 80057da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057de:	2b15      	cmp	r3, #21
 80057e0:	d8f6      	bhi.n	80057d0 <_printf_i+0x28>
 80057e2:	a101      	add	r1, pc, #4	; (adr r1, 80057e8 <_printf_i+0x40>)
 80057e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057e8:	08005841 	.word	0x08005841
 80057ec:	08005855 	.word	0x08005855
 80057f0:	080057d1 	.word	0x080057d1
 80057f4:	080057d1 	.word	0x080057d1
 80057f8:	080057d1 	.word	0x080057d1
 80057fc:	080057d1 	.word	0x080057d1
 8005800:	08005855 	.word	0x08005855
 8005804:	080057d1 	.word	0x080057d1
 8005808:	080057d1 	.word	0x080057d1
 800580c:	080057d1 	.word	0x080057d1
 8005810:	080057d1 	.word	0x080057d1
 8005814:	08005961 	.word	0x08005961
 8005818:	08005885 	.word	0x08005885
 800581c:	08005943 	.word	0x08005943
 8005820:	080057d1 	.word	0x080057d1
 8005824:	080057d1 	.word	0x080057d1
 8005828:	08005983 	.word	0x08005983
 800582c:	080057d1 	.word	0x080057d1
 8005830:	08005885 	.word	0x08005885
 8005834:	080057d1 	.word	0x080057d1
 8005838:	080057d1 	.word	0x080057d1
 800583c:	0800594b 	.word	0x0800594b
 8005840:	682b      	ldr	r3, [r5, #0]
 8005842:	1d1a      	adds	r2, r3, #4
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	602a      	str	r2, [r5, #0]
 8005848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800584c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005850:	2301      	movs	r3, #1
 8005852:	e0a3      	b.n	800599c <_printf_i+0x1f4>
 8005854:	6820      	ldr	r0, [r4, #0]
 8005856:	6829      	ldr	r1, [r5, #0]
 8005858:	0606      	lsls	r6, r0, #24
 800585a:	f101 0304 	add.w	r3, r1, #4
 800585e:	d50a      	bpl.n	8005876 <_printf_i+0xce>
 8005860:	680e      	ldr	r6, [r1, #0]
 8005862:	602b      	str	r3, [r5, #0]
 8005864:	2e00      	cmp	r6, #0
 8005866:	da03      	bge.n	8005870 <_printf_i+0xc8>
 8005868:	232d      	movs	r3, #45	; 0x2d
 800586a:	4276      	negs	r6, r6
 800586c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005870:	485e      	ldr	r0, [pc, #376]	; (80059ec <_printf_i+0x244>)
 8005872:	230a      	movs	r3, #10
 8005874:	e019      	b.n	80058aa <_printf_i+0x102>
 8005876:	680e      	ldr	r6, [r1, #0]
 8005878:	602b      	str	r3, [r5, #0]
 800587a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800587e:	bf18      	it	ne
 8005880:	b236      	sxthne	r6, r6
 8005882:	e7ef      	b.n	8005864 <_printf_i+0xbc>
 8005884:	682b      	ldr	r3, [r5, #0]
 8005886:	6820      	ldr	r0, [r4, #0]
 8005888:	1d19      	adds	r1, r3, #4
 800588a:	6029      	str	r1, [r5, #0]
 800588c:	0601      	lsls	r1, r0, #24
 800588e:	d501      	bpl.n	8005894 <_printf_i+0xec>
 8005890:	681e      	ldr	r6, [r3, #0]
 8005892:	e002      	b.n	800589a <_printf_i+0xf2>
 8005894:	0646      	lsls	r6, r0, #25
 8005896:	d5fb      	bpl.n	8005890 <_printf_i+0xe8>
 8005898:	881e      	ldrh	r6, [r3, #0]
 800589a:	4854      	ldr	r0, [pc, #336]	; (80059ec <_printf_i+0x244>)
 800589c:	2f6f      	cmp	r7, #111	; 0x6f
 800589e:	bf0c      	ite	eq
 80058a0:	2308      	moveq	r3, #8
 80058a2:	230a      	movne	r3, #10
 80058a4:	2100      	movs	r1, #0
 80058a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058aa:	6865      	ldr	r5, [r4, #4]
 80058ac:	60a5      	str	r5, [r4, #8]
 80058ae:	2d00      	cmp	r5, #0
 80058b0:	bfa2      	ittt	ge
 80058b2:	6821      	ldrge	r1, [r4, #0]
 80058b4:	f021 0104 	bicge.w	r1, r1, #4
 80058b8:	6021      	strge	r1, [r4, #0]
 80058ba:	b90e      	cbnz	r6, 80058c0 <_printf_i+0x118>
 80058bc:	2d00      	cmp	r5, #0
 80058be:	d04d      	beq.n	800595c <_printf_i+0x1b4>
 80058c0:	4615      	mov	r5, r2
 80058c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80058c6:	fb03 6711 	mls	r7, r3, r1, r6
 80058ca:	5dc7      	ldrb	r7, [r0, r7]
 80058cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058d0:	4637      	mov	r7, r6
 80058d2:	42bb      	cmp	r3, r7
 80058d4:	460e      	mov	r6, r1
 80058d6:	d9f4      	bls.n	80058c2 <_printf_i+0x11a>
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d10b      	bne.n	80058f4 <_printf_i+0x14c>
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	07de      	lsls	r6, r3, #31
 80058e0:	d508      	bpl.n	80058f4 <_printf_i+0x14c>
 80058e2:	6923      	ldr	r3, [r4, #16]
 80058e4:	6861      	ldr	r1, [r4, #4]
 80058e6:	4299      	cmp	r1, r3
 80058e8:	bfde      	ittt	le
 80058ea:	2330      	movle	r3, #48	; 0x30
 80058ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058f4:	1b52      	subs	r2, r2, r5
 80058f6:	6122      	str	r2, [r4, #16]
 80058f8:	f8cd a000 	str.w	sl, [sp]
 80058fc:	464b      	mov	r3, r9
 80058fe:	aa03      	add	r2, sp, #12
 8005900:	4621      	mov	r1, r4
 8005902:	4640      	mov	r0, r8
 8005904:	f7ff fee2 	bl	80056cc <_printf_common>
 8005908:	3001      	adds	r0, #1
 800590a:	d14c      	bne.n	80059a6 <_printf_i+0x1fe>
 800590c:	f04f 30ff 	mov.w	r0, #4294967295
 8005910:	b004      	add	sp, #16
 8005912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005916:	4835      	ldr	r0, [pc, #212]	; (80059ec <_printf_i+0x244>)
 8005918:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800591c:	6829      	ldr	r1, [r5, #0]
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	f851 6b04 	ldr.w	r6, [r1], #4
 8005924:	6029      	str	r1, [r5, #0]
 8005926:	061d      	lsls	r5, r3, #24
 8005928:	d514      	bpl.n	8005954 <_printf_i+0x1ac>
 800592a:	07df      	lsls	r7, r3, #31
 800592c:	bf44      	itt	mi
 800592e:	f043 0320 	orrmi.w	r3, r3, #32
 8005932:	6023      	strmi	r3, [r4, #0]
 8005934:	b91e      	cbnz	r6, 800593e <_printf_i+0x196>
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	f023 0320 	bic.w	r3, r3, #32
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	2310      	movs	r3, #16
 8005940:	e7b0      	b.n	80058a4 <_printf_i+0xfc>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	f043 0320 	orr.w	r3, r3, #32
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	2378      	movs	r3, #120	; 0x78
 800594c:	4828      	ldr	r0, [pc, #160]	; (80059f0 <_printf_i+0x248>)
 800594e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005952:	e7e3      	b.n	800591c <_printf_i+0x174>
 8005954:	0659      	lsls	r1, r3, #25
 8005956:	bf48      	it	mi
 8005958:	b2b6      	uxthmi	r6, r6
 800595a:	e7e6      	b.n	800592a <_printf_i+0x182>
 800595c:	4615      	mov	r5, r2
 800595e:	e7bb      	b.n	80058d8 <_printf_i+0x130>
 8005960:	682b      	ldr	r3, [r5, #0]
 8005962:	6826      	ldr	r6, [r4, #0]
 8005964:	6961      	ldr	r1, [r4, #20]
 8005966:	1d18      	adds	r0, r3, #4
 8005968:	6028      	str	r0, [r5, #0]
 800596a:	0635      	lsls	r5, r6, #24
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	d501      	bpl.n	8005974 <_printf_i+0x1cc>
 8005970:	6019      	str	r1, [r3, #0]
 8005972:	e002      	b.n	800597a <_printf_i+0x1d2>
 8005974:	0670      	lsls	r0, r6, #25
 8005976:	d5fb      	bpl.n	8005970 <_printf_i+0x1c8>
 8005978:	8019      	strh	r1, [r3, #0]
 800597a:	2300      	movs	r3, #0
 800597c:	6123      	str	r3, [r4, #16]
 800597e:	4615      	mov	r5, r2
 8005980:	e7ba      	b.n	80058f8 <_printf_i+0x150>
 8005982:	682b      	ldr	r3, [r5, #0]
 8005984:	1d1a      	adds	r2, r3, #4
 8005986:	602a      	str	r2, [r5, #0]
 8005988:	681d      	ldr	r5, [r3, #0]
 800598a:	6862      	ldr	r2, [r4, #4]
 800598c:	2100      	movs	r1, #0
 800598e:	4628      	mov	r0, r5
 8005990:	f7fa fc1e 	bl	80001d0 <memchr>
 8005994:	b108      	cbz	r0, 800599a <_printf_i+0x1f2>
 8005996:	1b40      	subs	r0, r0, r5
 8005998:	6060      	str	r0, [r4, #4]
 800599a:	6863      	ldr	r3, [r4, #4]
 800599c:	6123      	str	r3, [r4, #16]
 800599e:	2300      	movs	r3, #0
 80059a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059a4:	e7a8      	b.n	80058f8 <_printf_i+0x150>
 80059a6:	6923      	ldr	r3, [r4, #16]
 80059a8:	462a      	mov	r2, r5
 80059aa:	4649      	mov	r1, r9
 80059ac:	4640      	mov	r0, r8
 80059ae:	47d0      	blx	sl
 80059b0:	3001      	adds	r0, #1
 80059b2:	d0ab      	beq.n	800590c <_printf_i+0x164>
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	079b      	lsls	r3, r3, #30
 80059b8:	d413      	bmi.n	80059e2 <_printf_i+0x23a>
 80059ba:	68e0      	ldr	r0, [r4, #12]
 80059bc:	9b03      	ldr	r3, [sp, #12]
 80059be:	4298      	cmp	r0, r3
 80059c0:	bfb8      	it	lt
 80059c2:	4618      	movlt	r0, r3
 80059c4:	e7a4      	b.n	8005910 <_printf_i+0x168>
 80059c6:	2301      	movs	r3, #1
 80059c8:	4632      	mov	r2, r6
 80059ca:	4649      	mov	r1, r9
 80059cc:	4640      	mov	r0, r8
 80059ce:	47d0      	blx	sl
 80059d0:	3001      	adds	r0, #1
 80059d2:	d09b      	beq.n	800590c <_printf_i+0x164>
 80059d4:	3501      	adds	r5, #1
 80059d6:	68e3      	ldr	r3, [r4, #12]
 80059d8:	9903      	ldr	r1, [sp, #12]
 80059da:	1a5b      	subs	r3, r3, r1
 80059dc:	42ab      	cmp	r3, r5
 80059de:	dcf2      	bgt.n	80059c6 <_printf_i+0x21e>
 80059e0:	e7eb      	b.n	80059ba <_printf_i+0x212>
 80059e2:	2500      	movs	r5, #0
 80059e4:	f104 0619 	add.w	r6, r4, #25
 80059e8:	e7f5      	b.n	80059d6 <_printf_i+0x22e>
 80059ea:	bf00      	nop
 80059ec:	08005bf1 	.word	0x08005bf1
 80059f0:	08005c02 	.word	0x08005c02

080059f4 <_read_r>:
 80059f4:	b538      	push	{r3, r4, r5, lr}
 80059f6:	4d07      	ldr	r5, [pc, #28]	; (8005a14 <_read_r+0x20>)
 80059f8:	4604      	mov	r4, r0
 80059fa:	4608      	mov	r0, r1
 80059fc:	4611      	mov	r1, r2
 80059fe:	2200      	movs	r2, #0
 8005a00:	602a      	str	r2, [r5, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	f7fb f896 	bl	8000b34 <_read>
 8005a08:	1c43      	adds	r3, r0, #1
 8005a0a:	d102      	bne.n	8005a12 <_read_r+0x1e>
 8005a0c:	682b      	ldr	r3, [r5, #0]
 8005a0e:	b103      	cbz	r3, 8005a12 <_read_r+0x1e>
 8005a10:	6023      	str	r3, [r4, #0]
 8005a12:	bd38      	pop	{r3, r4, r5, pc}
 8005a14:	20004128 	.word	0x20004128

08005a18 <_fstat_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	4d07      	ldr	r5, [pc, #28]	; (8005a38 <_fstat_r+0x20>)
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	4604      	mov	r4, r0
 8005a20:	4608      	mov	r0, r1
 8005a22:	4611      	mov	r1, r2
 8005a24:	602b      	str	r3, [r5, #0]
 8005a26:	f7fb f8ae 	bl	8000b86 <_fstat>
 8005a2a:	1c43      	adds	r3, r0, #1
 8005a2c:	d102      	bne.n	8005a34 <_fstat_r+0x1c>
 8005a2e:	682b      	ldr	r3, [r5, #0]
 8005a30:	b103      	cbz	r3, 8005a34 <_fstat_r+0x1c>
 8005a32:	6023      	str	r3, [r4, #0]
 8005a34:	bd38      	pop	{r3, r4, r5, pc}
 8005a36:	bf00      	nop
 8005a38:	20004128 	.word	0x20004128

08005a3c <_isatty_r>:
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	4d06      	ldr	r5, [pc, #24]	; (8005a58 <_isatty_r+0x1c>)
 8005a40:	2300      	movs	r3, #0
 8005a42:	4604      	mov	r4, r0
 8005a44:	4608      	mov	r0, r1
 8005a46:	602b      	str	r3, [r5, #0]
 8005a48:	f7fb f8ad 	bl	8000ba6 <_isatty>
 8005a4c:	1c43      	adds	r3, r0, #1
 8005a4e:	d102      	bne.n	8005a56 <_isatty_r+0x1a>
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	b103      	cbz	r3, 8005a56 <_isatty_r+0x1a>
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	bd38      	pop	{r3, r4, r5, pc}
 8005a58:	20004128 	.word	0x20004128

08005a5c <_init>:
 8005a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5e:	bf00      	nop
 8005a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a62:	bc08      	pop	{r3}
 8005a64:	469e      	mov	lr, r3
 8005a66:	4770      	bx	lr

08005a68 <_fini>:
 8005a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6a:	bf00      	nop
 8005a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a6e:	bc08      	pop	{r3}
 8005a70:	469e      	mov	lr, r3
 8005a72:	4770      	bx	lr
