
FREERTOS_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000373c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080038cc  080038cc  000138cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a18  08003a18  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003a18  08003a18  00013a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a20  08003a20  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a20  08003a20  00013a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a24  08003a24  00013a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004044  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200040b8  200040b8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b06e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000209f  00000000  00000000  0002b112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000990  00000000  00000000  0002d1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000888  00000000  00000000  0002db48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022422  00000000  00000000  0002e3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ad35  00000000  00000000  000507f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca01e  00000000  00000000  0005b527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00125545  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b4c  00000000  00000000  00125598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080038b4 	.word	0x080038b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080038b4 	.word	0x080038b4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000090 	.word	0x20000090
 8000504:	20000144 	.word	0x20000144

08000508 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000510:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000514:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000518:	f003 0301 	and.w	r3, r3, #1
 800051c:	2b00      	cmp	r3, #0
 800051e:	d013      	beq.n	8000548 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000520:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000524:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000528:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800052c:	2b00      	cmp	r3, #0
 800052e:	d00b      	beq.n	8000548 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000530:	e000      	b.n	8000534 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000532:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000534:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f9      	beq.n	8000532 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800053e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000548:	687b      	ldr	r3, [r7, #4]
}
 800054a:	4618      	mov	r0, r3
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	b086      	sub	sp, #24
 800055a:	af00      	add	r7, sp, #0
 800055c:	60f8      	str	r0, [r7, #12]
 800055e:	60b9      	str	r1, [r7, #8]
 8000560:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	e009      	b.n	800057c <_write+0x26>
	  ITM_SendChar(*ptr++);
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	60ba      	str	r2, [r7, #8]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff ffc9 	bl	8000508 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	3301      	adds	r3, #1
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	697a      	ldr	r2, [r7, #20]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	429a      	cmp	r2, r3
 8000582:	dbf1      	blt.n	8000568 <_write+0x12>

  return len;
 8000584:	687b      	ldr	r3, [r7, #4]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b5b0      	push	{r4, r5, r7, lr}
 8000592:	b08e      	sub	sp, #56	; 0x38
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fa45 	bl	8000a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f831 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f88d 	bl	80006bc <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of blink_led1 */
  osThreadDef(blink_led1, blink_led1_entry, osPriorityNormal, 0, 128);
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <main+0x60>)
 80005a4:	f107 041c 	add.w	r4, r7, #28
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blink_led1Handle = osThreadCreate(osThread(blink_led1), NULL);
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 f9a6 	bl	800190e <osThreadCreate>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <main+0x64>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of blink_led2 */
  osThreadDef(blink_led2, blink_led2_entry, osPriorityNormal, 0, 128);
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <main+0x68>)
 80005ca:	463c      	mov	r4, r7
 80005cc:	461d      	mov	r5, r3
 80005ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blink_led2Handle = osThreadCreate(osThread(blink_led2), NULL);
 80005da:	463b      	mov	r3, r7
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 f995 	bl	800190e <osThreadCreate>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a05      	ldr	r2, [pc, #20]	; (80005fc <main+0x6c>)
 80005e8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ea:	f001 f989 	bl	8001900 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <main+0x5e>
 80005f0:	080038e4 	.word	0x080038e4
 80005f4:	20000344 	.word	0x20000344
 80005f8:	08003900 	.word	0x08003900
 80005fc:	20000348 	.word	0x20000348

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f002 fcd7 	bl	8002fc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <SystemClock_Config+0xb4>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <SystemClock_Config+0xb4>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SystemClock_Config+0xb4>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <SystemClock_Config+0xb8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a1b      	ldr	r2, [pc, #108]	; (80006b8 <SystemClock_Config+0xb8>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <SystemClock_Config+0xb8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2310      	movs	r3, #16
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000668:	2300      	movs	r3, #0
 800066a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fd09 	bl	8001088 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800067c:	f000 f8ba 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f000 ff6c 	bl	8001578 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006a6:	f000 f8a5 	bl	80007f4 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_GPIO_Init+0x60>)
 80006d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d8:	4a10      	ldr	r2, [pc, #64]	; (800071c <MX_GPIO_Init+0x60>)
 80006da:	f043 0308 	orr.w	r3, r3, #8
 80006de:	6313      	str	r3, [r2, #48]	; 0x30
 80006e0:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_GPIO_Init+0x60>)
 80006e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e4:	f003 0308 	and.w	r3, r3, #8
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led1_Pin|led2_Pin, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80006f2:	480b      	ldr	r0, [pc, #44]	; (8000720 <MX_GPIO_Init+0x64>)
 80006f4:	f000 fcae 	bl	8001054 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led1_Pin led2_Pin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin;
 80006f8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80006fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	4619      	mov	r1, r3
 800070e:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_GPIO_Init+0x64>)
 8000710:	f000 fb04 	bl	8000d1c <HAL_GPIO_Init>

}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40020c00 	.word	0x40020c00

08000724 <blink_led1_entry>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_blink_led1_entry */
void blink_led1_entry(void const * argument)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	printf("Blink led 1 starts\n");
 800072c:	4812      	ldr	r0, [pc, #72]	; (8000778 <blink_led1_entry+0x54>)
 800072e:	f002 fd53 	bl	80031d8 <puts>
	printf("Led 1 on\n");
 8000732:	4812      	ldr	r0, [pc, #72]	; (800077c <blink_led1_entry+0x58>)
 8000734:	f002 fd50 	bl	80031d8 <puts>
	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, 1);
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073e:	4810      	ldr	r0, [pc, #64]	; (8000780 <blink_led1_entry+0x5c>)
 8000740:	f000 fc88 	bl	8001054 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000744:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000748:	f000 f9de 	bl	8000b08 <HAL_Delay>
	printf("Led 1 off\n");
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <blink_led1_entry+0x60>)
 800074e:	f002 fd43 	bl	80031d8 <puts>
	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000758:	4809      	ldr	r0, [pc, #36]	; (8000780 <blink_led1_entry+0x5c>)
 800075a:	f000 fc7b 	bl	8001054 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800075e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000762:	f000 f9d1 	bl	8000b08 <HAL_Delay>
	printf("Blink led 1 ends\n");
 8000766:	4808      	ldr	r0, [pc, #32]	; (8000788 <blink_led1_entry+0x64>)
 8000768:	f002 fd36 	bl	80031d8 <puts>
	osDelay(1000);
 800076c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000770:	f001 f919 	bl	80019a6 <osDelay>
	printf("Blink led 1 starts\n");
 8000774:	e7da      	b.n	800072c <blink_led1_entry+0x8>
 8000776:	bf00      	nop
 8000778:	0800391c 	.word	0x0800391c
 800077c:	08003930 	.word	0x08003930
 8000780:	40020c00 	.word	0x40020c00
 8000784:	0800393c 	.word	0x0800393c
 8000788:	08003948 	.word	0x08003948

0800078c <blink_led2_entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blink_led2_entry */
void blink_led2_entry(void const * argument)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blink_led2_entry */
  /* Infinite loop */
  for(;;)
  {
	printf("Blink led 2 starts\n");
 8000794:	4812      	ldr	r0, [pc, #72]	; (80007e0 <blink_led2_entry+0x54>)
 8000796:	f002 fd1f 	bl	80031d8 <puts>
	printf("Led 2 on\n");
 800079a:	4812      	ldr	r0, [pc, #72]	; (80007e4 <blink_led2_entry+0x58>)
 800079c:	f002 fd1c 	bl	80031d8 <puts>
	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, 1);
 80007a0:	2201      	movs	r2, #1
 80007a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a6:	4810      	ldr	r0, [pc, #64]	; (80007e8 <blink_led2_entry+0x5c>)
 80007a8:	f000 fc54 	bl	8001054 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80007ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007b0:	f000 f9aa 	bl	8000b08 <HAL_Delay>
	printf("Led 2 off\n");
 80007b4:	480d      	ldr	r0, [pc, #52]	; (80007ec <blink_led2_entry+0x60>)
 80007b6:	f002 fd0f 	bl	80031d8 <puts>
	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c0:	4809      	ldr	r0, [pc, #36]	; (80007e8 <blink_led2_entry+0x5c>)
 80007c2:	f000 fc47 	bl	8001054 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80007c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ca:	f000 f99d 	bl	8000b08 <HAL_Delay>
	printf("Blink led 2 ends\n");
 80007ce:	4808      	ldr	r0, [pc, #32]	; (80007f0 <blink_led2_entry+0x64>)
 80007d0:	f002 fd02 	bl	80031d8 <puts>
	osDelay(1000);
 80007d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d8:	f001 f8e5 	bl	80019a6 <osDelay>
	printf("Blink led 2 starts\n");
 80007dc:	e7da      	b.n	8000794 <blink_led2_entry+0x8>
 80007de:	bf00      	nop
 80007e0:	0800395c 	.word	0x0800395c
 80007e4:	08003970 	.word	0x08003970
 80007e8:	40020c00 	.word	0x40020c00
 80007ec:	0800397c 	.word	0x0800397c
 80007f0:	08003988 	.word	0x08003988

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_MspInit+0x54>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	4a11      	ldr	r2, [pc, #68]	; (8000854 <HAL_MspInit+0x54>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000814:	6453      	str	r3, [r2, #68]	; 0x44
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_MspInit+0x54>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <HAL_MspInit+0x54>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <HAL_MspInit+0x54>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <HAL_MspInit+0x54>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	210f      	movs	r1, #15
 8000842:	f06f 0001 	mvn.w	r0, #1
 8000846:	f000 fa40 	bl	8000cca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800085c:	e7fe      	b.n	800085c <NMI_Handler+0x4>

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <MemManage_Handler+0x4>

0800086a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <UsageFault_Handler+0x4>

08000876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000888:	f000 f91e 	bl	8000ac8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800088c:	f001 fdf6 	bl	800247c <xTaskGetSchedulerState>
 8000890:	4603      	mov	r3, r0
 8000892:	2b01      	cmp	r3, #1
 8000894:	d001      	beq.n	800089a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000896:	f002 f837 	bl	8002908 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}

0800089e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b086      	sub	sp, #24
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	60f8      	str	r0, [r7, #12]
 80008a6:	60b9      	str	r1, [r7, #8]
 80008a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	e00a      	b.n	80008c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008b0:	f3af 8000 	nop.w
 80008b4:	4601      	mov	r1, r0
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	1c5a      	adds	r2, r3, #1
 80008ba:	60ba      	str	r2, [r7, #8]
 80008bc:	b2ca      	uxtb	r2, r1
 80008be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	3301      	adds	r3, #1
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	dbf0      	blt.n	80008b0 <_read+0x12>
  }

  return len;
 80008ce:	687b      	ldr	r3, [r7, #4]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000900:	605a      	str	r2, [r3, #4]
  return 0;
 8000902:	2300      	movs	r3, #0
}
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <_isatty>:

int _isatty(int file)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000918:	2301      	movs	r3, #1
}
 800091a:	4618      	mov	r0, r3
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000926:	b480      	push	{r7}
 8000928:	b085      	sub	sp, #20
 800092a:	af00      	add	r7, sp, #0
 800092c:	60f8      	str	r0, [r7, #12]
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000932:	2300      	movs	r3, #0
}
 8000934:	4618      	mov	r0, r3
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000948:	4a14      	ldr	r2, [pc, #80]	; (800099c <_sbrk+0x5c>)
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <_sbrk+0x60>)
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <_sbrk+0x64>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <_sbrk+0x68>)
 8000960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	429a      	cmp	r2, r3
 800096e:	d207      	bcs.n	8000980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000970:	f002 fa04 	bl	8002d7c <__errno>
 8000974:	4603      	mov	r3, r0
 8000976:	220c      	movs	r2, #12
 8000978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800097a:	f04f 33ff 	mov.w	r3, #4294967295
 800097e:	e009      	b.n	8000994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <_sbrk+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <_sbrk+0x64>)
 8000990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20020000 	.word	0x20020000
 80009a0:	00000400 	.word	0x00000400
 80009a4:	2000034c 	.word	0x2000034c
 80009a8:	200040b8 	.word	0x200040b8

080009ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <SystemInit+0x20>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b6:	4a05      	ldr	r2, [pc, #20]	; (80009cc <SystemInit+0x20>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009d6:	490e      	ldr	r1, [pc, #56]	; (8000a10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009d8:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009ec:	4c0b      	ldr	r4, [pc, #44]	; (8000a1c <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009fa:	f7ff ffd7 	bl	80009ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009fe:	f002 fab9 	bl	8002f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a02:	f7ff fdc5 	bl	8000590 <main>
  bx  lr    
 8000a06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a10:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a14:	08003a28 	.word	0x08003a28
  ldr r2, =_sbss
 8000a18:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a1c:	200040b8 	.word	0x200040b8

08000a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC_IRQHandler>
	...

08000a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <HAL_Init+0x40>)
 8000a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <HAL_Init+0x40>)
 8000a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <HAL_Init+0x40>)
 8000a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 f931 	bl	8000cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a52:	200f      	movs	r0, #15
 8000a54:	f000 f808 	bl	8000a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a58:	f7ff fed2 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023c00 	.word	0x40023c00

08000a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x54>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_InitTick+0x58>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f93b 	bl	8000d02 <HAL_SYSTICK_Config>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00e      	b.n	8000ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b0f      	cmp	r3, #15
 8000a9a:	d80a      	bhi.n	8000ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f000 f911 	bl	8000cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa8:	4a06      	ldr	r2, [pc, #24]	; (8000ac4 <HAL_InitTick+0x5c>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e000      	b.n	8000ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x20>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_IncTick+0x24>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_IncTick+0x24>)
 8000ada:	6013      	str	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000350 	.word	0x20000350

08000af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <HAL_GetTick+0x14>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000350 	.word	0x20000350

08000b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b10:	f7ff ffee 	bl	8000af0 <HAL_GetTick>
 8000b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b20:	d005      	beq.n	8000b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <HAL_Delay+0x44>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b2e:	bf00      	nop
 8000b30:	f7ff ffde 	bl	8000af0 <HAL_GetTick>
 8000b34:	4602      	mov	r2, r0
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d8f7      	bhi.n	8000b30 <HAL_Delay+0x28>
  {
  }
}
 8000b40:	bf00      	nop
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008

08000b50 <__NVIC_SetPriorityGrouping>:
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b82:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	60d3      	str	r3, [r2, #12]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_GetPriorityGrouping>:
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	f003 0307 	and.w	r3, r3, #7
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_SetPriority>:
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	db0a      	blt.n	8000bde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	490c      	ldr	r1, [pc, #48]	; (8000c00 <__NVIC_SetPriority+0x4c>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000bdc:	e00a      	b.n	8000bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4908      	ldr	r1, [pc, #32]	; (8000c04 <__NVIC_SetPriority+0x50>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	3b04      	subs	r3, #4
 8000bec:	0112      	lsls	r2, r2, #4
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	761a      	strb	r2, [r3, #24]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <NVIC_EncodePriority>:
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	f1c3 0307 	rsb	r3, r3, #7
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	bf28      	it	cs
 8000c26:	2304      	movcs	r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	2b06      	cmp	r3, #6
 8000c30:	d902      	bls.n	8000c38 <NVIC_EncodePriority+0x30>
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3b03      	subs	r3, #3
 8000c36:	e000      	b.n	8000c3a <NVIC_EncodePriority+0x32>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43da      	mvns	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c50:	f04f 31ff 	mov.w	r1, #4294967295
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43d9      	mvns	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	4313      	orrs	r3, r2
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <SysTick_Config>:
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c80:	d301      	bcc.n	8000c86 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000c82:	2301      	movs	r3, #1
 8000c84:	e00f      	b.n	8000ca6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <SysTick_Config+0x40>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8e:	210f      	movs	r1, #15
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	f7ff ff8e 	bl	8000bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <SysTick_Config+0x40>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9e:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <SysTick_Config+0x40>)
 8000ca0:	2207      	movs	r2, #7
 8000ca2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	e000e010 	.word	0xe000e010

08000cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ff47 	bl	8000b50 <__NVIC_SetPriorityGrouping>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cdc:	f7ff ff5c 	bl	8000b98 <__NVIC_GetPriorityGrouping>
 8000ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	6978      	ldr	r0, [r7, #20]
 8000ce8:	f7ff ff8e 	bl	8000c08 <NVIC_EncodePriority>
 8000cec:	4602      	mov	r2, r0
 8000cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff5d 	bl	8000bb4 <__NVIC_SetPriority>
}
 8000cfa:	bf00      	nop
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ffb0 	bl	8000c70 <SysTick_Config>
 8000d10:	4603      	mov	r3, r0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
 8000d36:	e16b      	b.n	8001010 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d38:	2201      	movs	r2, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f040 815a 	bne.w	800100a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d005      	beq.n	8000d6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d130      	bne.n	8000dd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	2203      	movs	r2, #3
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	68da      	ldr	r2, [r3, #12]
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da4:	2201      	movs	r2, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	091b      	lsrs	r3, r3, #4
 8000dba:	f003 0201 	and.w	r2, r3, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d017      	beq.n	8000e0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d123      	bne.n	8000e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	08da      	lsrs	r2, r3, #3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3208      	adds	r2, #8
 8000e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	220f      	movs	r2, #15
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	691a      	ldr	r2, [r3, #16]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	08da      	lsrs	r2, r3, #3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3208      	adds	r2, #8
 8000e5a:	69b9      	ldr	r1, [r7, #24]
 8000e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0203 	and.w	r2, r3, #3
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f000 80b4 	beq.w	800100a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b60      	ldr	r3, [pc, #384]	; (8001028 <HAL_GPIO_Init+0x30c>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	4a5f      	ldr	r2, [pc, #380]	; (8001028 <HAL_GPIO_Init+0x30c>)
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b5d      	ldr	r3, [pc, #372]	; (8001028 <HAL_GPIO_Init+0x30c>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ebe:	4a5b      	ldr	r2, [pc, #364]	; (800102c <HAL_GPIO_Init+0x310>)
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a52      	ldr	r2, [pc, #328]	; (8001030 <HAL_GPIO_Init+0x314>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d02b      	beq.n	8000f42 <HAL_GPIO_Init+0x226>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a51      	ldr	r2, [pc, #324]	; (8001034 <HAL_GPIO_Init+0x318>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d025      	beq.n	8000f3e <HAL_GPIO_Init+0x222>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a50      	ldr	r2, [pc, #320]	; (8001038 <HAL_GPIO_Init+0x31c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d01f      	beq.n	8000f3a <HAL_GPIO_Init+0x21e>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4f      	ldr	r2, [pc, #316]	; (800103c <HAL_GPIO_Init+0x320>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d019      	beq.n	8000f36 <HAL_GPIO_Init+0x21a>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4e      	ldr	r2, [pc, #312]	; (8001040 <HAL_GPIO_Init+0x324>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d013      	beq.n	8000f32 <HAL_GPIO_Init+0x216>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4d      	ldr	r2, [pc, #308]	; (8001044 <HAL_GPIO_Init+0x328>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d00d      	beq.n	8000f2e <HAL_GPIO_Init+0x212>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4c      	ldr	r2, [pc, #304]	; (8001048 <HAL_GPIO_Init+0x32c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d007      	beq.n	8000f2a <HAL_GPIO_Init+0x20e>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4b      	ldr	r2, [pc, #300]	; (800104c <HAL_GPIO_Init+0x330>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d101      	bne.n	8000f26 <HAL_GPIO_Init+0x20a>
 8000f22:	2307      	movs	r3, #7
 8000f24:	e00e      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f26:	2308      	movs	r3, #8
 8000f28:	e00c      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f2a:	2306      	movs	r3, #6
 8000f2c:	e00a      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f2e:	2305      	movs	r3, #5
 8000f30:	e008      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f32:	2304      	movs	r3, #4
 8000f34:	e006      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f36:	2303      	movs	r3, #3
 8000f38:	e004      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	e002      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e000      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f42:	2300      	movs	r3, #0
 8000f44:	69fa      	ldr	r2, [r7, #28]
 8000f46:	f002 0203 	and.w	r2, r2, #3
 8000f4a:	0092      	lsls	r2, r2, #2
 8000f4c:	4093      	lsls	r3, r2
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f54:	4935      	ldr	r1, [pc, #212]	; (800102c <HAL_GPIO_Init+0x310>)
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	089b      	lsrs	r3, r3, #2
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f62:	4b3b      	ldr	r3, [pc, #236]	; (8001050 <HAL_GPIO_Init+0x334>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f86:	4a32      	ldr	r2, [pc, #200]	; (8001050 <HAL_GPIO_Init+0x334>)
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f8c:	4b30      	ldr	r3, [pc, #192]	; (8001050 <HAL_GPIO_Init+0x334>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb0:	4a27      	ldr	r2, [pc, #156]	; (8001050 <HAL_GPIO_Init+0x334>)
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fb6:	4b26      	ldr	r3, [pc, #152]	; (8001050 <HAL_GPIO_Init+0x334>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fda:	4a1d      	ldr	r2, [pc, #116]	; (8001050 <HAL_GPIO_Init+0x334>)
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <HAL_GPIO_Init+0x334>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001004:	4a12      	ldr	r2, [pc, #72]	; (8001050 <HAL_GPIO_Init+0x334>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3301      	adds	r3, #1
 800100e:	61fb      	str	r3, [r7, #28]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	2b0f      	cmp	r3, #15
 8001014:	f67f ae90 	bls.w	8000d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3724      	adds	r7, #36	; 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	40013800 	.word	0x40013800
 8001030:	40020000 	.word	0x40020000
 8001034:	40020400 	.word	0x40020400
 8001038:	40020800 	.word	0x40020800
 800103c:	40020c00 	.word	0x40020c00
 8001040:	40021000 	.word	0x40021000
 8001044:	40021400 	.word	0x40021400
 8001048:	40021800 	.word	0x40021800
 800104c:	40021c00 	.word	0x40021c00
 8001050:	40013c00 	.word	0x40013c00

08001054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	807b      	strh	r3, [r7, #2]
 8001060:	4613      	mov	r3, r2
 8001062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001064:	787b      	ldrb	r3, [r7, #1]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800106a:	887a      	ldrh	r2, [r7, #2]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001070:	e003      	b.n	800107a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001072:	887b      	ldrh	r3, [r7, #2]
 8001074:	041a      	lsls	r2, r3, #16
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	619a      	str	r2, [r3, #24]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e267      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d075      	beq.n	8001192 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010a6:	4b88      	ldr	r3, [pc, #544]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 030c 	and.w	r3, r3, #12
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	d00c      	beq.n	80010cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010b2:	4b85      	ldr	r3, [pc, #532]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ba:	2b08      	cmp	r3, #8
 80010bc:	d112      	bne.n	80010e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010be:	4b82      	ldr	r3, [pc, #520]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010ca:	d10b      	bne.n	80010e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010cc:	4b7e      	ldr	r3, [pc, #504]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d05b      	beq.n	8001190 <HAL_RCC_OscConfig+0x108>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d157      	bne.n	8001190 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e242      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ec:	d106      	bne.n	80010fc <HAL_RCC_OscConfig+0x74>
 80010ee:	4b76      	ldr	r3, [pc, #472]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a75      	ldr	r2, [pc, #468]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 80010f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	e01d      	b.n	8001138 <HAL_RCC_OscConfig+0xb0>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001104:	d10c      	bne.n	8001120 <HAL_RCC_OscConfig+0x98>
 8001106:	4b70      	ldr	r3, [pc, #448]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a6f      	ldr	r2, [pc, #444]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 800110c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4b6d      	ldr	r3, [pc, #436]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a6c      	ldr	r2, [pc, #432]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 8001118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e00b      	b.n	8001138 <HAL_RCC_OscConfig+0xb0>
 8001120:	4b69      	ldr	r3, [pc, #420]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a68      	ldr	r2, [pc, #416]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 8001126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b66      	ldr	r3, [pc, #408]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a65      	ldr	r2, [pc, #404]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 8001132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d013      	beq.n	8001168 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff fcd6 	bl	8000af0 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001148:	f7ff fcd2 	bl	8000af0 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b64      	cmp	r3, #100	; 0x64
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e207      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115a:	4b5b      	ldr	r3, [pc, #364]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0f0      	beq.n	8001148 <HAL_RCC_OscConfig+0xc0>
 8001166:	e014      	b.n	8001192 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fcc2 	bl	8000af0 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff fcbe 	bl	8000af0 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b64      	cmp	r3, #100	; 0x64
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e1f3      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001182:	4b51      	ldr	r3, [pc, #324]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f0      	bne.n	8001170 <HAL_RCC_OscConfig+0xe8>
 800118e:	e000      	b.n	8001192 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d063      	beq.n	8001266 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800119e:	4b4a      	ldr	r3, [pc, #296]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00b      	beq.n	80011c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011aa:	4b47      	ldr	r3, [pc, #284]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011b2:	2b08      	cmp	r3, #8
 80011b4:	d11c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011b6:	4b44      	ldr	r3, [pc, #272]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d116      	bne.n	80011f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c2:	4b41      	ldr	r3, [pc, #260]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d005      	beq.n	80011da <HAL_RCC_OscConfig+0x152>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d001      	beq.n	80011da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e1c7      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011da:	4b3b      	ldr	r3, [pc, #236]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	4937      	ldr	r1, [pc, #220]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ee:	e03a      	b.n	8001266 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d020      	beq.n	800123a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f8:	4b34      	ldr	r3, [pc, #208]	; (80012cc <HAL_RCC_OscConfig+0x244>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fe:	f7ff fc77 	bl	8000af0 <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001206:	f7ff fc73 	bl	8000af0 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e1a8      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001218:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f0      	beq.n	8001206 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001224:	4b28      	ldr	r3, [pc, #160]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	4925      	ldr	r1, [pc, #148]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 8001234:	4313      	orrs	r3, r2
 8001236:	600b      	str	r3, [r1, #0]
 8001238:	e015      	b.n	8001266 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800123a:	4b24      	ldr	r3, [pc, #144]	; (80012cc <HAL_RCC_OscConfig+0x244>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001240:	f7ff fc56 	bl	8000af0 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001248:	f7ff fc52 	bl	8000af0 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e187      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f0      	bne.n	8001248 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	2b00      	cmp	r3, #0
 8001270:	d036      	beq.n	80012e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d016      	beq.n	80012a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_RCC_OscConfig+0x248>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001280:	f7ff fc36 	bl	8000af0 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001288:	f7ff fc32 	bl	8000af0 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e167      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_RCC_OscConfig+0x240>)
 800129c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0x200>
 80012a6:	e01b      	b.n	80012e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_RCC_OscConfig+0x248>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ae:	f7ff fc1f 	bl	8000af0 <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b4:	e00e      	b.n	80012d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b6:	f7ff fc1b 	bl	8000af0 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d907      	bls.n	80012d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e150      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
 80012c8:	40023800 	.word	0x40023800
 80012cc:	42470000 	.word	0x42470000
 80012d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d4:	4b88      	ldr	r3, [pc, #544]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 80012d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1ea      	bne.n	80012b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 8097 	beq.w	800141c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f2:	4b81      	ldr	r3, [pc, #516]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10f      	bne.n	800131e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	4b7d      	ldr	r3, [pc, #500]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	4a7c      	ldr	r2, [pc, #496]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 8001308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130c:	6413      	str	r3, [r2, #64]	; 0x40
 800130e:	4b7a      	ldr	r3, [pc, #488]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800131a:	2301      	movs	r3, #1
 800131c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131e:	4b77      	ldr	r3, [pc, #476]	; (80014fc <HAL_RCC_OscConfig+0x474>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001326:	2b00      	cmp	r3, #0
 8001328:	d118      	bne.n	800135c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800132a:	4b74      	ldr	r3, [pc, #464]	; (80014fc <HAL_RCC_OscConfig+0x474>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a73      	ldr	r2, [pc, #460]	; (80014fc <HAL_RCC_OscConfig+0x474>)
 8001330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001336:	f7ff fbdb 	bl	8000af0 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800133e:	f7ff fbd7 	bl	8000af0 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e10c      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001350:	4b6a      	ldr	r3, [pc, #424]	; (80014fc <HAL_RCC_OscConfig+0x474>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d106      	bne.n	8001372 <HAL_RCC_OscConfig+0x2ea>
 8001364:	4b64      	ldr	r3, [pc, #400]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 8001366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001368:	4a63      	ldr	r2, [pc, #396]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6713      	str	r3, [r2, #112]	; 0x70
 8001370:	e01c      	b.n	80013ac <HAL_RCC_OscConfig+0x324>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b05      	cmp	r3, #5
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0x30c>
 800137a:	4b5f      	ldr	r3, [pc, #380]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 800137c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137e:	4a5e      	ldr	r2, [pc, #376]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 8001380:	f043 0304 	orr.w	r3, r3, #4
 8001384:	6713      	str	r3, [r2, #112]	; 0x70
 8001386:	4b5c      	ldr	r3, [pc, #368]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 8001388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138a:	4a5b      	ldr	r2, [pc, #364]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6713      	str	r3, [r2, #112]	; 0x70
 8001392:	e00b      	b.n	80013ac <HAL_RCC_OscConfig+0x324>
 8001394:	4b58      	ldr	r3, [pc, #352]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 8001396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001398:	4a57      	ldr	r2, [pc, #348]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 800139a:	f023 0301 	bic.w	r3, r3, #1
 800139e:	6713      	str	r3, [r2, #112]	; 0x70
 80013a0:	4b55      	ldr	r3, [pc, #340]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 80013a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a4:	4a54      	ldr	r2, [pc, #336]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 80013a6:	f023 0304 	bic.w	r3, r3, #4
 80013aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d015      	beq.n	80013e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b4:	f7ff fb9c 	bl	8000af0 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ba:	e00a      	b.n	80013d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013bc:	f7ff fb98 	bl	8000af0 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e0cb      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d2:	4b49      	ldr	r3, [pc, #292]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 80013d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0ee      	beq.n	80013bc <HAL_RCC_OscConfig+0x334>
 80013de:	e014      	b.n	800140a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e0:	f7ff fb86 	bl	8000af0 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e6:	e00a      	b.n	80013fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e8:	f7ff fb82 	bl	8000af0 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e0b5      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fe:	4b3e      	ldr	r3, [pc, #248]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 8001400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1ee      	bne.n	80013e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800140a:	7dfb      	ldrb	r3, [r7, #23]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d105      	bne.n	800141c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001410:	4b39      	ldr	r3, [pc, #228]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	4a38      	ldr	r2, [pc, #224]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 8001416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800141a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80a1 	beq.w	8001568 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001426:	4b34      	ldr	r3, [pc, #208]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b08      	cmp	r3, #8
 8001430:	d05c      	beq.n	80014ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d141      	bne.n	80014be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800143a:	4b31      	ldr	r3, [pc, #196]	; (8001500 <HAL_RCC_OscConfig+0x478>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fb56 	bl	8000af0 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001448:	f7ff fb52 	bl	8000af0 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e087      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145a:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69da      	ldr	r2, [r3, #28]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	019b      	lsls	r3, r3, #6
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	085b      	lsrs	r3, r3, #1
 800147e:	3b01      	subs	r3, #1
 8001480:	041b      	lsls	r3, r3, #16
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001488:	061b      	lsls	r3, r3, #24
 800148a:	491b      	ldr	r1, [pc, #108]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 800148c:	4313      	orrs	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <HAL_RCC_OscConfig+0x478>)
 8001492:	2201      	movs	r2, #1
 8001494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7ff fb2b 	bl	8000af0 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800149e:	f7ff fb27 	bl	8000af0 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e05c      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f0      	beq.n	800149e <HAL_RCC_OscConfig+0x416>
 80014bc:	e054      	b.n	8001568 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <HAL_RCC_OscConfig+0x478>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fb14 	bl	8000af0 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014cc:	f7ff fb10 	bl	8000af0 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e045      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_RCC_OscConfig+0x470>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x444>
 80014ea:	e03d      	b.n	8001568 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d107      	bne.n	8001504 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e038      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40007000 	.word	0x40007000
 8001500:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <HAL_RCC_OscConfig+0x4ec>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d028      	beq.n	8001564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800151c:	429a      	cmp	r2, r3
 800151e:	d121      	bne.n	8001564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152a:	429a      	cmp	r2, r3
 800152c:	d11a      	bne.n	8001564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001534:	4013      	ands	r3, r2
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800153a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800153c:	4293      	cmp	r3, r2
 800153e:	d111      	bne.n	8001564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154a:	085b      	lsrs	r3, r3, #1
 800154c:	3b01      	subs	r3, #1
 800154e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001550:	429a      	cmp	r2, r3
 8001552:	d107      	bne.n	8001564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001560:	429a      	cmp	r2, r3
 8001562:	d001      	beq.n	8001568 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800

08001578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0cc      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800158c:	4b68      	ldr	r3, [pc, #416]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d90c      	bls.n	80015b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159a:	4b65      	ldr	r3, [pc, #404]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	4b63      	ldr	r3, [pc, #396]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0b8      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d020      	beq.n	8001602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015cc:	4b59      	ldr	r3, [pc, #356]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4a58      	ldr	r2, [pc, #352]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e4:	4b53      	ldr	r3, [pc, #332]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	4a52      	ldr	r2, [pc, #328]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f0:	4b50      	ldr	r3, [pc, #320]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	494d      	ldr	r1, [pc, #308]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d044      	beq.n	8001698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	4b47      	ldr	r3, [pc, #284]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d119      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e07f      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d003      	beq.n	8001636 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001632:	2b03      	cmp	r3, #3
 8001634:	d107      	bne.n	8001646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001636:	4b3f      	ldr	r3, [pc, #252]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d109      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e06f      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001646:	4b3b      	ldr	r3, [pc, #236]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e067      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001656:	4b37      	ldr	r3, [pc, #220]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f023 0203 	bic.w	r2, r3, #3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4934      	ldr	r1, [pc, #208]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	4313      	orrs	r3, r2
 8001666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001668:	f7ff fa42 	bl	8000af0 <HAL_GetTick>
 800166c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166e:	e00a      	b.n	8001686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001670:	f7ff fa3e 	bl	8000af0 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f241 3288 	movw	r2, #5000	; 0x1388
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e04f      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001686:	4b2b      	ldr	r3, [pc, #172]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 020c 	and.w	r2, r3, #12
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	429a      	cmp	r2, r3
 8001696:	d1eb      	bne.n	8001670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001698:	4b25      	ldr	r3, [pc, #148]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d20c      	bcs.n	80016c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a6:	4b22      	ldr	r3, [pc, #136]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e032      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016cc:	4b19      	ldr	r3, [pc, #100]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4916      	ldr	r1, [pc, #88]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d009      	beq.n	80016fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	490e      	ldr	r1, [pc, #56]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016fe:	f000 f821 	bl	8001744 <HAL_RCC_GetSysClockFreq>
 8001702:	4602      	mov	r2, r0
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	490a      	ldr	r1, [pc, #40]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 8001710:	5ccb      	ldrb	r3, [r1, r3]
 8001712:	fa22 f303 	lsr.w	r3, r2, r3
 8001716:	4a09      	ldr	r2, [pc, #36]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_RCC_ClockConfig+0x1c8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff f9a2 	bl	8000a68 <HAL_InitTick>

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023c00 	.word	0x40023c00
 8001734:	40023800 	.word	0x40023800
 8001738:	080039a4 	.word	0x080039a4
 800173c:	20000000 	.word	0x20000000
 8001740:	20000004 	.word	0x20000004

08001744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001748:	b090      	sub	sp, #64	; 0x40
 800174a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
 8001750:	2300      	movs	r3, #0
 8001752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001754:	2300      	movs	r3, #0
 8001756:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800175c:	4b59      	ldr	r3, [pc, #356]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 030c 	and.w	r3, r3, #12
 8001764:	2b08      	cmp	r3, #8
 8001766:	d00d      	beq.n	8001784 <HAL_RCC_GetSysClockFreq+0x40>
 8001768:	2b08      	cmp	r3, #8
 800176a:	f200 80a1 	bhi.w	80018b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <HAL_RCC_GetSysClockFreq+0x34>
 8001772:	2b04      	cmp	r3, #4
 8001774:	d003      	beq.n	800177e <HAL_RCC_GetSysClockFreq+0x3a>
 8001776:	e09b      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001778:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800177a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800177c:	e09b      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800177e:	4b53      	ldr	r3, [pc, #332]	; (80018cc <HAL_RCC_GetSysClockFreq+0x188>)
 8001780:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001782:	e098      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001784:	4b4f      	ldr	r3, [pc, #316]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800178c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800178e:	4b4d      	ldr	r3, [pc, #308]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d028      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800179a:	4b4a      	ldr	r3, [pc, #296]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	099b      	lsrs	r3, r3, #6
 80017a0:	2200      	movs	r2, #0
 80017a2:	623b      	str	r3, [r7, #32]
 80017a4:	627a      	str	r2, [r7, #36]	; 0x24
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017ac:	2100      	movs	r1, #0
 80017ae:	4b47      	ldr	r3, [pc, #284]	; (80018cc <HAL_RCC_GetSysClockFreq+0x188>)
 80017b0:	fb03 f201 	mul.w	r2, r3, r1
 80017b4:	2300      	movs	r3, #0
 80017b6:	fb00 f303 	mul.w	r3, r0, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	4a43      	ldr	r2, [pc, #268]	; (80018cc <HAL_RCC_GetSysClockFreq+0x188>)
 80017be:	fba0 1202 	umull	r1, r2, r0, r2
 80017c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017c4:	460a      	mov	r2, r1
 80017c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80017c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ca:	4413      	add	r3, r2
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d0:	2200      	movs	r2, #0
 80017d2:	61bb      	str	r3, [r7, #24]
 80017d4:	61fa      	str	r2, [r7, #28]
 80017d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017de:	f7fe fcf7 	bl	80001d0 <__aeabi_uldivmod>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4613      	mov	r3, r2
 80017e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017ea:	e053      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ec:	4b35      	ldr	r3, [pc, #212]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	099b      	lsrs	r3, r3, #6
 80017f2:	2200      	movs	r2, #0
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	617a      	str	r2, [r7, #20]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017fe:	f04f 0b00 	mov.w	fp, #0
 8001802:	4652      	mov	r2, sl
 8001804:	465b      	mov	r3, fp
 8001806:	f04f 0000 	mov.w	r0, #0
 800180a:	f04f 0100 	mov.w	r1, #0
 800180e:	0159      	lsls	r1, r3, #5
 8001810:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001814:	0150      	lsls	r0, r2, #5
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	ebb2 080a 	subs.w	r8, r2, sl
 800181e:	eb63 090b 	sbc.w	r9, r3, fp
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800182e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001832:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001836:	ebb2 0408 	subs.w	r4, r2, r8
 800183a:	eb63 0509 	sbc.w	r5, r3, r9
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	00eb      	lsls	r3, r5, #3
 8001848:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800184c:	00e2      	lsls	r2, r4, #3
 800184e:	4614      	mov	r4, r2
 8001850:	461d      	mov	r5, r3
 8001852:	eb14 030a 	adds.w	r3, r4, sl
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	eb45 030b 	adc.w	r3, r5, fp
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	e9d7 4500 	ldrd	r4, r5, [r7]
 800186a:	4629      	mov	r1, r5
 800186c:	028b      	lsls	r3, r1, #10
 800186e:	4621      	mov	r1, r4
 8001870:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001874:	4621      	mov	r1, r4
 8001876:	028a      	lsls	r2, r1, #10
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800187e:	2200      	movs	r2, #0
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	60fa      	str	r2, [r7, #12]
 8001884:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001888:	f7fe fca2 	bl	80001d0 <__aeabi_uldivmod>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4613      	mov	r3, r2
 8001892:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	0c1b      	lsrs	r3, r3, #16
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	3301      	adds	r3, #1
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80018a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018ae:	e002      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80018b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3740      	adds	r7, #64	; 0x40
 80018bc:	46bd      	mov	sp, r7
 80018be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	00f42400 	.word	0x00f42400
 80018cc:	017d7840 	.word	0x017d7840

080018d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80018de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018e2:	2b84      	cmp	r3, #132	; 0x84
 80018e4:	d005      	beq.n	80018f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80018e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	4413      	add	r3, r2
 80018ee:	3303      	adds	r3, #3
 80018f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001904:	f000 fae8 	bl	8001ed8 <vTaskStartScheduler>
  
  return osOK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	bd80      	pop	{r7, pc}

0800190e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800190e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001910:	b089      	sub	sp, #36	; 0x24
 8001912:	af04      	add	r7, sp, #16
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d020      	beq.n	8001962 <osThreadCreate+0x54>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d01c      	beq.n	8001962 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685c      	ldr	r4, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681d      	ldr	r5, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691e      	ldr	r6, [r3, #16]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ffc8 	bl	80018d0 <makeFreeRtosPriority>
 8001940:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800194a:	9202      	str	r2, [sp, #8]
 800194c:	9301      	str	r3, [sp, #4]
 800194e:	9100      	str	r1, [sp, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	4632      	mov	r2, r6
 8001954:	4629      	mov	r1, r5
 8001956:	4620      	mov	r0, r4
 8001958:	f000 f8ed 	bl	8001b36 <xTaskCreateStatic>
 800195c:	4603      	mov	r3, r0
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	e01c      	b.n	800199c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685c      	ldr	r4, [r3, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800196e:	b29e      	uxth	r6, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ffaa 	bl	80018d0 <makeFreeRtosPriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	9200      	str	r2, [sp, #0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	4632      	mov	r2, r6
 800198a:	4629      	mov	r1, r5
 800198c:	4620      	mov	r0, r4
 800198e:	f000 f92f 	bl	8001bf0 <xTaskCreate>
 8001992:	4603      	mov	r3, r0
 8001994:	2b01      	cmp	r3, #1
 8001996:	d001      	beq.n	800199c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001998:	2300      	movs	r3, #0
 800199a:	e000      	b.n	800199e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800199c:	68fb      	ldr	r3, [r7, #12]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019a6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <osDelay+0x16>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	e000      	b.n	80019be <osDelay+0x18>
 80019bc:	2301      	movs	r3, #1
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fa56 	bl	8001e70 <vTaskDelay>
  
  return osOK;
 80019c4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f103 0208 	add.w	r2, r3, #8
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f04f 32ff 	mov.w	r2, #4294967295
 80019e6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f103 0208 	add.w	r2, r3, #8
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f103 0208 	add.w	r2, r3, #8
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	601a      	str	r2, [r3, #0]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a86:	d103      	bne.n	8001a90 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	e00c      	b.n	8001aaa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3308      	adds	r3, #8
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	e002      	b.n	8001a9e <vListInsert+0x2e>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d2f6      	bcs.n	8001a98 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	601a      	str	r2, [r3, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b085      	sub	sp, #20
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6892      	ldr	r2, [r2, #8]
 8001af8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6852      	ldr	r2, [r2, #4]
 8001b02:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d103      	bne.n	8001b16 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	1e5a      	subs	r2, r3, #1
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b08e      	sub	sp, #56	; 0x38
 8001b3a:	af04      	add	r7, sp, #16
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10a      	bne.n	8001b60 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b4e:	f383 8811 	msr	BASEPRI, r3
 8001b52:	f3bf 8f6f 	isb	sy
 8001b56:	f3bf 8f4f 	dsb	sy
 8001b5a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b5c:	bf00      	nop
 8001b5e:	e7fe      	b.n	8001b5e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10a      	bne.n	8001b7c <xTaskCreateStatic+0x46>
	__asm volatile
 8001b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b6a:	f383 8811 	msr	BASEPRI, r3
 8001b6e:	f3bf 8f6f 	isb	sy
 8001b72:	f3bf 8f4f 	dsb	sy
 8001b76:	61fb      	str	r3, [r7, #28]
}
 8001b78:	bf00      	nop
 8001b7a:	e7fe      	b.n	8001b7a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001b7c:	23b4      	movs	r3, #180	; 0xb4
 8001b7e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	2bb4      	cmp	r3, #180	; 0xb4
 8001b84:	d00a      	beq.n	8001b9c <xTaskCreateStatic+0x66>
	__asm volatile
 8001b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b8a:	f383 8811 	msr	BASEPRI, r3
 8001b8e:	f3bf 8f6f 	isb	sy
 8001b92:	f3bf 8f4f 	dsb	sy
 8001b96:	61bb      	str	r3, [r7, #24]
}
 8001b98:	bf00      	nop
 8001b9a:	e7fe      	b.n	8001b9a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001b9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d01e      	beq.n	8001be2 <xTaskCreateStatic+0xac>
 8001ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d01b      	beq.n	8001be2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bb2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	9303      	str	r3, [sp, #12]
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	9302      	str	r3, [sp, #8]
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	68b9      	ldr	r1, [r7, #8]
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 f851 	bl	8001c7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001bda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bdc:	f000 f8ec 	bl	8001db8 <prvAddNewTaskToReadyList>
 8001be0:	e001      	b.n	8001be6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001be6:	697b      	ldr	r3, [r7, #20]
	}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3728      	adds	r7, #40	; 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	; 0x30
 8001bf4:	af04      	add	r7, sp, #16
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 fecf 	bl	80029a8 <pvPortMalloc>
 8001c0a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00e      	beq.n	8001c30 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001c12:	20b4      	movs	r0, #180	; 0xb4
 8001c14:	f000 fec8 	bl	80029a8 <pvPortMalloc>
 8001c18:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	631a      	str	r2, [r3, #48]	; 0x30
 8001c26:	e005      	b.n	8001c34 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001c28:	6978      	ldr	r0, [r7, #20]
 8001c2a:	f000 ff89 	bl	8002b40 <vPortFree>
 8001c2e:	e001      	b.n	8001c34 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d017      	beq.n	8001c6a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001c42:	88fa      	ldrh	r2, [r7, #6]
 8001c44:	2300      	movs	r3, #0
 8001c46:	9303      	str	r3, [sp, #12]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	9302      	str	r3, [sp, #8]
 8001c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68b9      	ldr	r1, [r7, #8]
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f000 f80f 	bl	8001c7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001c5e:	69f8      	ldr	r0, [r7, #28]
 8001c60:	f000 f8aa 	bl	8001db8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001c64:	2301      	movs	r3, #1
 8001c66:	61bb      	str	r3, [r7, #24]
 8001c68:	e002      	b.n	8001c70 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001c70:	69bb      	ldr	r3, [r7, #24]
	}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3720      	adds	r7, #32
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c94:	3b01      	subs	r3, #1
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	f023 0307 	bic.w	r3, r3, #7
 8001ca2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00a      	beq.n	8001cc4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8001cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb2:	f383 8811 	msr	BASEPRI, r3
 8001cb6:	f3bf 8f6f 	isb	sy
 8001cba:	f3bf 8f4f 	dsb	sy
 8001cbe:	617b      	str	r3, [r7, #20]
}
 8001cc0:	bf00      	nop
 8001cc2:	e7fe      	b.n	8001cc2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d01f      	beq.n	8001d0a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	e012      	b.n	8001cf6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	7819      	ldrb	r1, [r3, #0]
 8001cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	4413      	add	r3, r2
 8001cde:	3334      	adds	r3, #52	; 0x34
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	4413      	add	r3, r2
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d006      	beq.n	8001cfe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	2b0f      	cmp	r3, #15
 8001cfa:	d9e9      	bls.n	8001cd0 <prvInitialiseNewTask+0x54>
 8001cfc:	e000      	b.n	8001d00 <prvInitialiseNewTask+0x84>
			{
				break;
 8001cfe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d08:	e003      	b.n	8001d12 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d14:	2b06      	cmp	r3, #6
 8001d16:	d901      	bls.n	8001d1c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001d18:	2306      	movs	r3, #6
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d26:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d30:	3304      	adds	r3, #4
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fe6b 	bl	8001a0e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3a:	3318      	adds	r3, #24
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fe66 	bl	8001a0e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4a:	f1c3 0207 	rsb	r2, r3, #7
 8001d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6a:	334c      	adds	r3, #76	; 0x4c
 8001d6c:	2260      	movs	r2, #96	; 0x60
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f001 f926 	bl	8002fc2 <memset>
 8001d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d78:	4a0c      	ldr	r2, [pc, #48]	; (8001dac <prvInitialiseNewTask+0x130>)
 8001d7a:	651a      	str	r2, [r3, #80]	; 0x50
 8001d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7e:	4a0c      	ldr	r2, [pc, #48]	; (8001db0 <prvInitialiseNewTask+0x134>)
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54
 8001d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d84:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <prvInitialiseNewTask+0x138>)
 8001d86:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	68f9      	ldr	r1, [r7, #12]
 8001d8c:	69b8      	ldr	r0, [r7, #24]
 8001d8e:	f000 fbf9 	bl	8002584 <pxPortInitialiseStack>
 8001d92:	4602      	mov	r2, r0
 8001d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d96:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001da2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001da4:	bf00      	nop
 8001da6:	3720      	adds	r7, #32
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	080039d4 	.word	0x080039d4
 8001db0:	080039f4 	.word	0x080039f4
 8001db4:	080039b4 	.word	0x080039b4

08001db8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001dc0:	f000 fd10 	bl	80027e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001dc4:	4b24      	ldr	r3, [pc, #144]	; (8001e58 <prvAddNewTaskToReadyList+0xa0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <prvAddNewTaskToReadyList+0xa0>)
 8001dcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001dce:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <prvAddNewTaskToReadyList+0xa4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d109      	bne.n	8001dea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001dd6:	4a21      	ldr	r2, [pc, #132]	; (8001e5c <prvAddNewTaskToReadyList+0xa4>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ddc:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <prvAddNewTaskToReadyList+0xa0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d110      	bne.n	8001e06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001de4:	f000 fa88 	bl	80022f8 <prvInitialiseTaskLists>
 8001de8:	e00d      	b.n	8001e06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001dea:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <prvAddNewTaskToReadyList+0xa8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001df2:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <prvAddNewTaskToReadyList+0xa4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d802      	bhi.n	8001e06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001e00:	4a16      	ldr	r2, [pc, #88]	; (8001e5c <prvAddNewTaskToReadyList+0xa4>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001e06:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <prvAddNewTaskToReadyList+0xac>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	4a15      	ldr	r2, [pc, #84]	; (8001e64 <prvAddNewTaskToReadyList+0xac>)
 8001e0e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	2201      	movs	r2, #1
 8001e16:	409a      	lsls	r2, r3
 8001e18:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <prvAddNewTaskToReadyList+0xb0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <prvAddNewTaskToReadyList+0xb0>)
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4a0f      	ldr	r2, [pc, #60]	; (8001e6c <prvAddNewTaskToReadyList+0xb4>)
 8001e30:	441a      	add	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3304      	adds	r3, #4
 8001e36:	4619      	mov	r1, r3
 8001e38:	4610      	mov	r0, r2
 8001e3a:	f7ff fdf5 	bl	8001a28 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001e3e:	f000 fd01 	bl	8002844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001e42:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <prvAddNewTaskToReadyList+0xa8>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <prvAddNewTaskToReadyList+0xa4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000454 	.word	0x20000454
 8001e5c:	20000354 	.word	0x20000354
 8001e60:	20000460 	.word	0x20000460
 8001e64:	20000470 	.word	0x20000470
 8001e68:	2000045c 	.word	0x2000045c
 8001e6c:	20000358 	.word	0x20000358

08001e70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d017      	beq.n	8001eb2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <vTaskDelay+0x60>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00a      	beq.n	8001ea0 <vTaskDelay+0x30>
	__asm volatile
 8001e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e8e:	f383 8811 	msr	BASEPRI, r3
 8001e92:	f3bf 8f6f 	isb	sy
 8001e96:	f3bf 8f4f 	dsb	sy
 8001e9a:	60bb      	str	r3, [r7, #8]
}
 8001e9c:	bf00      	nop
 8001e9e:	e7fe      	b.n	8001e9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001ea0:	f000 f884 	bl	8001fac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fb06 	bl	80024b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001eac:	f000 f88c 	bl	8001fc8 <xTaskResumeAll>
 8001eb0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d107      	bne.n	8001ec8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <vTaskDelay+0x64>)
 8001eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	f3bf 8f4f 	dsb	sy
 8001ec4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001ec8:	bf00      	nop
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	2000047c 	.word	0x2000047c
 8001ed4:	e000ed04 	.word	0xe000ed04

08001ed8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	; 0x28
 8001edc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001ee6:	463a      	mov	r2, r7
 8001ee8:	1d39      	adds	r1, r7, #4
 8001eea:	f107 0308 	add.w	r3, r7, #8
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe faf0 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001ef4:	6839      	ldr	r1, [r7, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	9202      	str	r2, [sp, #8]
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	2300      	movs	r3, #0
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2300      	movs	r3, #0
 8001f04:	460a      	mov	r2, r1
 8001f06:	4921      	ldr	r1, [pc, #132]	; (8001f8c <vTaskStartScheduler+0xb4>)
 8001f08:	4821      	ldr	r0, [pc, #132]	; (8001f90 <vTaskStartScheduler+0xb8>)
 8001f0a:	f7ff fe14 	bl	8001b36 <xTaskCreateStatic>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4a20      	ldr	r2, [pc, #128]	; (8001f94 <vTaskStartScheduler+0xbc>)
 8001f12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001f14:	4b1f      	ldr	r3, [pc, #124]	; (8001f94 <vTaskStartScheduler+0xbc>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	e001      	b.n	8001f26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d11b      	bne.n	8001f64 <vTaskStartScheduler+0x8c>
	__asm volatile
 8001f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f30:	f383 8811 	msr	BASEPRI, r3
 8001f34:	f3bf 8f6f 	isb	sy
 8001f38:	f3bf 8f4f 	dsb	sy
 8001f3c:	613b      	str	r3, [r7, #16]
}
 8001f3e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8001f40:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <vTaskStartScheduler+0xc0>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	334c      	adds	r3, #76	; 0x4c
 8001f46:	4a15      	ldr	r2, [pc, #84]	; (8001f9c <vTaskStartScheduler+0xc4>)
 8001f48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <vTaskStartScheduler+0xc8>)
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <vTaskStartScheduler+0xcc>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <vTaskStartScheduler+0xd0>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001f5e:	f000 fb9f 	bl	80026a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001f62:	e00e      	b.n	8001f82 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6a:	d10a      	bne.n	8001f82 <vTaskStartScheduler+0xaa>
	__asm volatile
 8001f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f70:	f383 8811 	msr	BASEPRI, r3
 8001f74:	f3bf 8f6f 	isb	sy
 8001f78:	f3bf 8f4f 	dsb	sy
 8001f7c:	60fb      	str	r3, [r7, #12]
}
 8001f7e:	bf00      	nop
 8001f80:	e7fe      	b.n	8001f80 <vTaskStartScheduler+0xa8>
}
 8001f82:	bf00      	nop
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	0800399c 	.word	0x0800399c
 8001f90:	080022d5 	.word	0x080022d5
 8001f94:	20000478 	.word	0x20000478
 8001f98:	20000354 	.word	0x20000354
 8001f9c:	20000010 	.word	0x20000010
 8001fa0:	20000474 	.word	0x20000474
 8001fa4:	20000460 	.word	0x20000460
 8001fa8:	20000458 	.word	0x20000458

08001fac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001fb0:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <vTaskSuspendAll+0x18>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	4a03      	ldr	r2, [pc, #12]	; (8001fc4 <vTaskSuspendAll+0x18>)
 8001fb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	2000047c 	.word	0x2000047c

08001fc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001fd6:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <xTaskResumeAll+0xfc>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10a      	bne.n	8001ff4 <xTaskResumeAll+0x2c>
	__asm volatile
 8001fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe2:	f383 8811 	msr	BASEPRI, r3
 8001fe6:	f3bf 8f6f 	isb	sy
 8001fea:	f3bf 8f4f 	dsb	sy
 8001fee:	603b      	str	r3, [r7, #0]
}
 8001ff0:	bf00      	nop
 8001ff2:	e7fe      	b.n	8001ff2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001ff4:	f000 fbf6 	bl	80027e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001ff8:	4b32      	ldr	r3, [pc, #200]	; (80020c4 <xTaskResumeAll+0xfc>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	4a31      	ldr	r2, [pc, #196]	; (80020c4 <xTaskResumeAll+0xfc>)
 8002000:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002002:	4b30      	ldr	r3, [pc, #192]	; (80020c4 <xTaskResumeAll+0xfc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d155      	bne.n	80020b6 <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800200a:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <xTaskResumeAll+0x100>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d051      	beq.n	80020b6 <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002012:	e02e      	b.n	8002072 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002014:	4b2d      	ldr	r3, [pc, #180]	; (80020cc <xTaskResumeAll+0x104>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	3318      	adds	r3, #24
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fd5e 	bl	8001ae2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	3304      	adds	r3, #4
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fd59 	bl	8001ae2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	2201      	movs	r2, #1
 8002036:	409a      	lsls	r2, r3
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <xTaskResumeAll+0x108>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4313      	orrs	r3, r2
 800203e:	4a24      	ldr	r2, [pc, #144]	; (80020d0 <xTaskResumeAll+0x108>)
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4a21      	ldr	r2, [pc, #132]	; (80020d4 <xTaskResumeAll+0x10c>)
 8002050:	441a      	add	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	3304      	adds	r3, #4
 8002056:	4619      	mov	r1, r3
 8002058:	4610      	mov	r0, r2
 800205a:	f7ff fce5 	bl	8001a28 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002062:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <xTaskResumeAll+0x110>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	429a      	cmp	r2, r3
 800206a:	d302      	bcc.n	8002072 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800206c:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <xTaskResumeAll+0x114>)
 800206e:	2201      	movs	r2, #1
 8002070:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002072:	4b16      	ldr	r3, [pc, #88]	; (80020cc <xTaskResumeAll+0x104>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1cc      	bne.n	8002014 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002080:	f000 f9dc 	bl	800243c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002084:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <xTaskResumeAll+0x118>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d010      	beq.n	80020b2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002090:	f000 f828 	bl	80020e4 <xTaskIncrementTick>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <xTaskResumeAll+0x114>)
 800209c:	2201      	movs	r2, #1
 800209e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f1      	bne.n	8002090 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80020ac:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <xTaskResumeAll+0x118>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <xTaskResumeAll+0x114>)
 80020b4:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80020b6:	f000 fbc5 	bl	8002844 <vPortExitCritical>

	return xAlreadyYielded;
 80020ba:	687b      	ldr	r3, [r7, #4]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	2000047c 	.word	0x2000047c
 80020c8:	20000454 	.word	0x20000454
 80020cc:	20000414 	.word	0x20000414
 80020d0:	2000045c 	.word	0x2000045c
 80020d4:	20000358 	.word	0x20000358
 80020d8:	20000354 	.word	0x20000354
 80020dc:	20000468 	.word	0x20000468
 80020e0:	20000464 	.word	0x20000464

080020e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020ee:	4b3f      	ldr	r3, [pc, #252]	; (80021ec <xTaskIncrementTick+0x108>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d16f      	bne.n	80021d6 <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80020f6:	4b3e      	ldr	r3, [pc, #248]	; (80021f0 <xTaskIncrementTick+0x10c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	3301      	adds	r3, #1
 80020fc:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80020fe:	4a3c      	ldr	r2, [pc, #240]	; (80021f0 <xTaskIncrementTick+0x10c>)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d120      	bne.n	800214c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800210a:	4b3a      	ldr	r3, [pc, #232]	; (80021f4 <xTaskIncrementTick+0x110>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <xTaskIncrementTick+0x46>
	__asm volatile
 8002114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002118:	f383 8811 	msr	BASEPRI, r3
 800211c:	f3bf 8f6f 	isb	sy
 8002120:	f3bf 8f4f 	dsb	sy
 8002124:	603b      	str	r3, [r7, #0]
}
 8002126:	bf00      	nop
 8002128:	e7fe      	b.n	8002128 <xTaskIncrementTick+0x44>
 800212a:	4b32      	ldr	r3, [pc, #200]	; (80021f4 <xTaskIncrementTick+0x110>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	4b31      	ldr	r3, [pc, #196]	; (80021f8 <xTaskIncrementTick+0x114>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a2f      	ldr	r2, [pc, #188]	; (80021f4 <xTaskIncrementTick+0x110>)
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	4a2f      	ldr	r2, [pc, #188]	; (80021f8 <xTaskIncrementTick+0x114>)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <xTaskIncrementTick+0x118>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	3301      	adds	r3, #1
 8002144:	4a2d      	ldr	r2, [pc, #180]	; (80021fc <xTaskIncrementTick+0x118>)
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	f000 f978 	bl	800243c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800214c:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <xTaskIncrementTick+0x11c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	429a      	cmp	r2, r3
 8002154:	d344      	bcc.n	80021e0 <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002156:	4b27      	ldr	r3, [pc, #156]	; (80021f4 <xTaskIncrementTick+0x110>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d104      	bne.n	800216a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002160:	4b27      	ldr	r3, [pc, #156]	; (8002200 <xTaskIncrementTick+0x11c>)
 8002162:	f04f 32ff 	mov.w	r2, #4294967295
 8002166:	601a      	str	r2, [r3, #0]
					break;
 8002168:	e03a      	b.n	80021e0 <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800216a:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <xTaskIncrementTick+0x110>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	429a      	cmp	r2, r3
 8002180:	d203      	bcs.n	800218a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002182:	4a1f      	ldr	r2, [pc, #124]	; (8002200 <xTaskIncrementTick+0x11c>)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002188:	e02a      	b.n	80021e0 <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	3304      	adds	r3, #4
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fca7 	bl	8001ae2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	2b00      	cmp	r3, #0
 800219a:	d004      	beq.n	80021a6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	3318      	adds	r3, #24
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fc9e 	bl	8001ae2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021aa:	2201      	movs	r2, #1
 80021ac:	409a      	lsls	r2, r3
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <xTaskIncrementTick+0x120>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	4a13      	ldr	r2, [pc, #76]	; (8002204 <xTaskIncrementTick+0x120>)
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4a10      	ldr	r2, [pc, #64]	; (8002208 <xTaskIncrementTick+0x124>)
 80021c6:	441a      	add	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	3304      	adds	r3, #4
 80021cc:	4619      	mov	r1, r3
 80021ce:	4610      	mov	r0, r2
 80021d0:	f7ff fc2a 	bl	8001a28 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021d4:	e7bf      	b.n	8002156 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80021d6:	4b0d      	ldr	r3, [pc, #52]	; (800220c <xTaskIncrementTick+0x128>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	3301      	adds	r3, #1
 80021dc:	4a0b      	ldr	r2, [pc, #44]	; (800220c <xTaskIncrementTick+0x128>)
 80021de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80021e0:	697b      	ldr	r3, [r7, #20]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	2000047c 	.word	0x2000047c
 80021f0:	20000458 	.word	0x20000458
 80021f4:	2000040c 	.word	0x2000040c
 80021f8:	20000410 	.word	0x20000410
 80021fc:	2000046c 	.word	0x2000046c
 8002200:	20000474 	.word	0x20000474
 8002204:	2000045c 	.word	0x2000045c
 8002208:	20000358 	.word	0x20000358
 800220c:	20000464 	.word	0x20000464

08002210 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002216:	4b29      	ldr	r3, [pc, #164]	; (80022bc <vTaskSwitchContext+0xac>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800221e:	4b28      	ldr	r3, [pc, #160]	; (80022c0 <vTaskSwitchContext+0xb0>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002224:	e044      	b.n	80022b0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <vTaskSwitchContext+0xb0>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800222c:	4b25      	ldr	r3, [pc, #148]	; (80022c4 <vTaskSwitchContext+0xb4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	fab3 f383 	clz	r3, r3
 8002238:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800223a:	7afb      	ldrb	r3, [r7, #11]
 800223c:	f1c3 031f 	rsb	r3, r3, #31
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	4921      	ldr	r1, [pc, #132]	; (80022c8 <vTaskSwitchContext+0xb8>)
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10a      	bne.n	800226c <vTaskSwitchContext+0x5c>
	__asm volatile
 8002256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800225a:	f383 8811 	msr	BASEPRI, r3
 800225e:	f3bf 8f6f 	isb	sy
 8002262:	f3bf 8f4f 	dsb	sy
 8002266:	607b      	str	r3, [r7, #4]
}
 8002268:	bf00      	nop
 800226a:	e7fe      	b.n	800226a <vTaskSwitchContext+0x5a>
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4a14      	ldr	r2, [pc, #80]	; (80022c8 <vTaskSwitchContext+0xb8>)
 8002278:	4413      	add	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	3308      	adds	r3, #8
 800228e:	429a      	cmp	r2, r3
 8002290:	d104      	bne.n	800229c <vTaskSwitchContext+0x8c>
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <vTaskSwitchContext+0xbc>)
 80022a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <vTaskSwitchContext+0xbc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	334c      	adds	r3, #76	; 0x4c
 80022ac:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <vTaskSwitchContext+0xc0>)
 80022ae:	6013      	str	r3, [r2, #0]
}
 80022b0:	bf00      	nop
 80022b2:	371c      	adds	r7, #28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	2000047c 	.word	0x2000047c
 80022c0:	20000468 	.word	0x20000468
 80022c4:	2000045c 	.word	0x2000045c
 80022c8:	20000358 	.word	0x20000358
 80022cc:	20000354 	.word	0x20000354
 80022d0:	20000010 	.word	0x20000010

080022d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80022dc:	f000 f84c 	bl	8002378 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <prvIdleTask+0x20>)
 80022e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	f3bf 8f4f 	dsb	sy
 80022ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80022f0:	e7f4      	b.n	80022dc <prvIdleTask+0x8>
 80022f2:	bf00      	nop
 80022f4:	e000ed04 	.word	0xe000ed04

080022f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80022fe:	2300      	movs	r3, #0
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	e00c      	b.n	800231e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4a12      	ldr	r2, [pc, #72]	; (8002358 <prvInitialiseTaskLists+0x60>)
 8002310:	4413      	add	r3, r2
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fb5b 	bl	80019ce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3301      	adds	r3, #1
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b06      	cmp	r3, #6
 8002322:	d9ef      	bls.n	8002304 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002324:	480d      	ldr	r0, [pc, #52]	; (800235c <prvInitialiseTaskLists+0x64>)
 8002326:	f7ff fb52 	bl	80019ce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800232a:	480d      	ldr	r0, [pc, #52]	; (8002360 <prvInitialiseTaskLists+0x68>)
 800232c:	f7ff fb4f 	bl	80019ce <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002330:	480c      	ldr	r0, [pc, #48]	; (8002364 <prvInitialiseTaskLists+0x6c>)
 8002332:	f7ff fb4c 	bl	80019ce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002336:	480c      	ldr	r0, [pc, #48]	; (8002368 <prvInitialiseTaskLists+0x70>)
 8002338:	f7ff fb49 	bl	80019ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800233c:	480b      	ldr	r0, [pc, #44]	; (800236c <prvInitialiseTaskLists+0x74>)
 800233e:	f7ff fb46 	bl	80019ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <prvInitialiseTaskLists+0x78>)
 8002344:	4a05      	ldr	r2, [pc, #20]	; (800235c <prvInitialiseTaskLists+0x64>)
 8002346:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002348:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <prvInitialiseTaskLists+0x7c>)
 800234a:	4a05      	ldr	r2, [pc, #20]	; (8002360 <prvInitialiseTaskLists+0x68>)
 800234c:	601a      	str	r2, [r3, #0]
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000358 	.word	0x20000358
 800235c:	200003e4 	.word	0x200003e4
 8002360:	200003f8 	.word	0x200003f8
 8002364:	20000414 	.word	0x20000414
 8002368:	20000428 	.word	0x20000428
 800236c:	20000440 	.word	0x20000440
 8002370:	2000040c 	.word	0x2000040c
 8002374:	20000410 	.word	0x20000410

08002378 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800237e:	e019      	b.n	80023b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002380:	f000 fa30 	bl	80027e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002384:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <prvCheckTasksWaitingTermination+0x50>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3304      	adds	r3, #4
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fba6 	bl	8001ae2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002396:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <prvCheckTasksWaitingTermination+0x54>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	3b01      	subs	r3, #1
 800239c:	4a0b      	ldr	r2, [pc, #44]	; (80023cc <prvCheckTasksWaitingTermination+0x54>)
 800239e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <prvCheckTasksWaitingTermination+0x58>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	3b01      	subs	r3, #1
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <prvCheckTasksWaitingTermination+0x58>)
 80023a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80023aa:	f000 fa4b 	bl	8002844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f810 	bl	80023d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <prvCheckTasksWaitingTermination+0x58>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1e1      	bne.n	8002380 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000428 	.word	0x20000428
 80023cc:	20000454 	.word	0x20000454
 80023d0:	2000043c 	.word	0x2000043c

080023d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	334c      	adds	r3, #76	; 0x4c
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 ff0f 	bl	8003204 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d108      	bne.n	8002402 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 fba3 	bl	8002b40 <vPortFree>
				vPortFree( pxTCB );
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 fba0 	bl	8002b40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002400:	e018      	b.n	8002434 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002408:	2b01      	cmp	r3, #1
 800240a:	d103      	bne.n	8002414 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 fb97 	bl	8002b40 <vPortFree>
	}
 8002412:	e00f      	b.n	8002434 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800241a:	2b02      	cmp	r3, #2
 800241c:	d00a      	beq.n	8002434 <prvDeleteTCB+0x60>
	__asm volatile
 800241e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002422:	f383 8811 	msr	BASEPRI, r3
 8002426:	f3bf 8f6f 	isb	sy
 800242a:	f3bf 8f4f 	dsb	sy
 800242e:	60fb      	str	r3, [r7, #12]
}
 8002430:	bf00      	nop
 8002432:	e7fe      	b.n	8002432 <prvDeleteTCB+0x5e>
	}
 8002434:	bf00      	nop
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <prvResetNextTaskUnblockTime+0x38>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d104      	bne.n	8002456 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800244c:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <prvResetNextTaskUnblockTime+0x3c>)
 800244e:	f04f 32ff 	mov.w	r2, #4294967295
 8002452:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002454:	e008      	b.n	8002468 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002456:	4b07      	ldr	r3, [pc, #28]	; (8002474 <prvResetNextTaskUnblockTime+0x38>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4a04      	ldr	r2, [pc, #16]	; (8002478 <prvResetNextTaskUnblockTime+0x3c>)
 8002466:	6013      	str	r3, [r2, #0]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	2000040c 	.word	0x2000040c
 8002478:	20000474 	.word	0x20000474

0800247c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002482:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <xTaskGetSchedulerState+0x34>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d102      	bne.n	8002490 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800248a:	2301      	movs	r3, #1
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	e008      	b.n	80024a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002490:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <xTaskGetSchedulerState+0x38>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002498:	2302      	movs	r3, #2
 800249a:	607b      	str	r3, [r7, #4]
 800249c:	e001      	b.n	80024a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800249e:	2300      	movs	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80024a2:	687b      	ldr	r3, [r7, #4]
	}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	20000460 	.word	0x20000460
 80024b4:	2000047c 	.word	0x2000047c

080024b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80024c2:	4b29      	ldr	r3, [pc, #164]	; (8002568 <prvAddCurrentTaskToDelayedList+0xb0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024c8:	4b28      	ldr	r3, [pc, #160]	; (800256c <prvAddCurrentTaskToDelayedList+0xb4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3304      	adds	r3, #4
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fb07 	bl	8001ae2 <uxListRemove>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10b      	bne.n	80024f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80024da:	4b24      	ldr	r3, [pc, #144]	; (800256c <prvAddCurrentTaskToDelayedList+0xb4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	2201      	movs	r2, #1
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43da      	mvns	r2, r3
 80024e8:	4b21      	ldr	r3, [pc, #132]	; (8002570 <prvAddCurrentTaskToDelayedList+0xb8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4013      	ands	r3, r2
 80024ee:	4a20      	ldr	r2, [pc, #128]	; (8002570 <prvAddCurrentTaskToDelayedList+0xb8>)
 80024f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d10a      	bne.n	8002510 <prvAddCurrentTaskToDelayedList+0x58>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3304      	adds	r3, #4
 8002506:	4619      	mov	r1, r3
 8002508:	481a      	ldr	r0, [pc, #104]	; (8002574 <prvAddCurrentTaskToDelayedList+0xbc>)
 800250a:	f7ff fa8d 	bl	8001a28 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800250e:	e026      	b.n	800255e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <prvAddCurrentTaskToDelayedList+0xb4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	429a      	cmp	r2, r3
 8002526:	d209      	bcs.n	800253c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <prvAddCurrentTaskToDelayedList+0xc0>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <prvAddCurrentTaskToDelayedList+0xb4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	3304      	adds	r3, #4
 8002532:	4619      	mov	r1, r3
 8002534:	4610      	mov	r0, r2
 8002536:	f7ff fa9b 	bl	8001a70 <vListInsert>
}
 800253a:	e010      	b.n	800255e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <prvAddCurrentTaskToDelayedList+0xc4>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	3304      	adds	r3, #4
 8002546:	4619      	mov	r1, r3
 8002548:	4610      	mov	r0, r2
 800254a:	f7ff fa91 	bl	8001a70 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800254e:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	429a      	cmp	r2, r3
 8002556:	d202      	bcs.n	800255e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002558:	4a09      	ldr	r2, [pc, #36]	; (8002580 <prvAddCurrentTaskToDelayedList+0xc8>)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	6013      	str	r3, [r2, #0]
}
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000458 	.word	0x20000458
 800256c:	20000354 	.word	0x20000354
 8002570:	2000045c 	.word	0x2000045c
 8002574:	20000440 	.word	0x20000440
 8002578:	20000410 	.word	0x20000410
 800257c:	2000040c 	.word	0x2000040c
 8002580:	20000474 	.word	0x20000474

08002584 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	3b04      	subs	r3, #4
 8002594:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800259c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3b04      	subs	r3, #4
 80025a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f023 0201 	bic.w	r2, r3, #1
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	3b04      	subs	r3, #4
 80025b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80025b4:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <pxPortInitialiseStack+0x64>)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	3b14      	subs	r3, #20
 80025be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	3b04      	subs	r3, #4
 80025ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f06f 0202 	mvn.w	r2, #2
 80025d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	3b20      	subs	r3, #32
 80025d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80025da:	68fb      	ldr	r3, [r7, #12]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	080025ed 	.word	0x080025ed

080025ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <prvTaskExitError+0x54>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fe:	d00a      	beq.n	8002616 <prvTaskExitError+0x2a>
	__asm volatile
 8002600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002604:	f383 8811 	msr	BASEPRI, r3
 8002608:	f3bf 8f6f 	isb	sy
 800260c:	f3bf 8f4f 	dsb	sy
 8002610:	60fb      	str	r3, [r7, #12]
}
 8002612:	bf00      	nop
 8002614:	e7fe      	b.n	8002614 <prvTaskExitError+0x28>
	__asm volatile
 8002616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261a:	f383 8811 	msr	BASEPRI, r3
 800261e:	f3bf 8f6f 	isb	sy
 8002622:	f3bf 8f4f 	dsb	sy
 8002626:	60bb      	str	r3, [r7, #8]
}
 8002628:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800262a:	bf00      	nop
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0fc      	beq.n	800262c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002632:	bf00      	nop
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	2000000c 	.word	0x2000000c
	...

08002650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002650:	4b07      	ldr	r3, [pc, #28]	; (8002670 <pxCurrentTCBConst2>)
 8002652:	6819      	ldr	r1, [r3, #0]
 8002654:	6808      	ldr	r0, [r1, #0]
 8002656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800265a:	f380 8809 	msr	PSP, r0
 800265e:	f3bf 8f6f 	isb	sy
 8002662:	f04f 0000 	mov.w	r0, #0
 8002666:	f380 8811 	msr	BASEPRI, r0
 800266a:	4770      	bx	lr
 800266c:	f3af 8000 	nop.w

08002670 <pxCurrentTCBConst2>:
 8002670:	20000354 	.word	0x20000354
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002674:	bf00      	nop
 8002676:	bf00      	nop

08002678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002678:	4808      	ldr	r0, [pc, #32]	; (800269c <prvPortStartFirstTask+0x24>)
 800267a:	6800      	ldr	r0, [r0, #0]
 800267c:	6800      	ldr	r0, [r0, #0]
 800267e:	f380 8808 	msr	MSP, r0
 8002682:	f04f 0000 	mov.w	r0, #0
 8002686:	f380 8814 	msr	CONTROL, r0
 800268a:	b662      	cpsie	i
 800268c:	b661      	cpsie	f
 800268e:	f3bf 8f4f 	dsb	sy
 8002692:	f3bf 8f6f 	isb	sy
 8002696:	df00      	svc	0
 8002698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800269a:	bf00      	nop
 800269c:	e000ed08 	.word	0xe000ed08

080026a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80026a6:	4b46      	ldr	r3, [pc, #280]	; (80027c0 <xPortStartScheduler+0x120>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a46      	ldr	r2, [pc, #280]	; (80027c4 <xPortStartScheduler+0x124>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d10a      	bne.n	80026c6 <xPortStartScheduler+0x26>
	__asm volatile
 80026b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b4:	f383 8811 	msr	BASEPRI, r3
 80026b8:	f3bf 8f6f 	isb	sy
 80026bc:	f3bf 8f4f 	dsb	sy
 80026c0:	613b      	str	r3, [r7, #16]
}
 80026c2:	bf00      	nop
 80026c4:	e7fe      	b.n	80026c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80026c6:	4b3e      	ldr	r3, [pc, #248]	; (80027c0 <xPortStartScheduler+0x120>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a3f      	ldr	r2, [pc, #252]	; (80027c8 <xPortStartScheduler+0x128>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d10a      	bne.n	80026e6 <xPortStartScheduler+0x46>
	__asm volatile
 80026d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d4:	f383 8811 	msr	BASEPRI, r3
 80026d8:	f3bf 8f6f 	isb	sy
 80026dc:	f3bf 8f4f 	dsb	sy
 80026e0:	60fb      	str	r3, [r7, #12]
}
 80026e2:	bf00      	nop
 80026e4:	e7fe      	b.n	80026e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80026e6:	4b39      	ldr	r3, [pc, #228]	; (80027cc <xPortStartScheduler+0x12c>)
 80026e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	22ff      	movs	r2, #255	; 0xff
 80026f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002708:	b2da      	uxtb	r2, r3
 800270a:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <xPortStartScheduler+0x130>)
 800270c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800270e:	4b31      	ldr	r3, [pc, #196]	; (80027d4 <xPortStartScheduler+0x134>)
 8002710:	2207      	movs	r2, #7
 8002712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002714:	e009      	b.n	800272a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002716:	4b2f      	ldr	r3, [pc, #188]	; (80027d4 <xPortStartScheduler+0x134>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	3b01      	subs	r3, #1
 800271c:	4a2d      	ldr	r2, [pc, #180]	; (80027d4 <xPortStartScheduler+0x134>)
 800271e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	b2db      	uxtb	r3, r3
 8002728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800272a:	78fb      	ldrb	r3, [r7, #3]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002732:	2b80      	cmp	r3, #128	; 0x80
 8002734:	d0ef      	beq.n	8002716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002736:	4b27      	ldr	r3, [pc, #156]	; (80027d4 <xPortStartScheduler+0x134>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f1c3 0307 	rsb	r3, r3, #7
 800273e:	2b04      	cmp	r3, #4
 8002740:	d00a      	beq.n	8002758 <xPortStartScheduler+0xb8>
	__asm volatile
 8002742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002746:	f383 8811 	msr	BASEPRI, r3
 800274a:	f3bf 8f6f 	isb	sy
 800274e:	f3bf 8f4f 	dsb	sy
 8002752:	60bb      	str	r3, [r7, #8]
}
 8002754:	bf00      	nop
 8002756:	e7fe      	b.n	8002756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002758:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <xPortStartScheduler+0x134>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <xPortStartScheduler+0x134>)
 8002760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002762:	4b1c      	ldr	r3, [pc, #112]	; (80027d4 <xPortStartScheduler+0x134>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800276a:	4a1a      	ldr	r2, [pc, #104]	; (80027d4 <xPortStartScheduler+0x134>)
 800276c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002776:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <xPortStartScheduler+0x138>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <xPortStartScheduler+0x138>)
 800277c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <xPortStartScheduler+0x138>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a14      	ldr	r2, [pc, #80]	; (80027d8 <xPortStartScheduler+0x138>)
 8002788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800278c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800278e:	f000 f8dd 	bl	800294c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002792:	4b12      	ldr	r3, [pc, #72]	; (80027dc <xPortStartScheduler+0x13c>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002798:	f000 f8fc 	bl	8002994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800279c:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <xPortStartScheduler+0x140>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0f      	ldr	r2, [pc, #60]	; (80027e0 <xPortStartScheduler+0x140>)
 80027a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80027a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80027a8:	f7ff ff66 	bl	8002678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80027ac:	f7ff fd30 	bl	8002210 <vTaskSwitchContext>
	prvTaskExitError();
 80027b0:	f7ff ff1c 	bl	80025ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	e000ed00 	.word	0xe000ed00
 80027c4:	410fc271 	.word	0x410fc271
 80027c8:	410fc270 	.word	0x410fc270
 80027cc:	e000e400 	.word	0xe000e400
 80027d0:	20000480 	.word	0x20000480
 80027d4:	20000484 	.word	0x20000484
 80027d8:	e000ed20 	.word	0xe000ed20
 80027dc:	2000000c 	.word	0x2000000c
 80027e0:	e000ef34 	.word	0xe000ef34

080027e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
	__asm volatile
 80027ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ee:	f383 8811 	msr	BASEPRI, r3
 80027f2:	f3bf 8f6f 	isb	sy
 80027f6:	f3bf 8f4f 	dsb	sy
 80027fa:	607b      	str	r3, [r7, #4]
}
 80027fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80027fe:	4b0f      	ldr	r3, [pc, #60]	; (800283c <vPortEnterCritical+0x58>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3301      	adds	r3, #1
 8002804:	4a0d      	ldr	r2, [pc, #52]	; (800283c <vPortEnterCritical+0x58>)
 8002806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <vPortEnterCritical+0x58>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d10f      	bne.n	8002830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <vPortEnterCritical+0x5c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00a      	beq.n	8002830 <vPortEnterCritical+0x4c>
	__asm volatile
 800281a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281e:	f383 8811 	msr	BASEPRI, r3
 8002822:	f3bf 8f6f 	isb	sy
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	603b      	str	r3, [r7, #0]
}
 800282c:	bf00      	nop
 800282e:	e7fe      	b.n	800282e <vPortEnterCritical+0x4a>
	}
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	2000000c 	.word	0x2000000c
 8002840:	e000ed04 	.word	0xe000ed04

08002844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800284a:	4b12      	ldr	r3, [pc, #72]	; (8002894 <vPortExitCritical+0x50>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10a      	bne.n	8002868 <vPortExitCritical+0x24>
	__asm volatile
 8002852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002856:	f383 8811 	msr	BASEPRI, r3
 800285a:	f3bf 8f6f 	isb	sy
 800285e:	f3bf 8f4f 	dsb	sy
 8002862:	607b      	str	r3, [r7, #4]
}
 8002864:	bf00      	nop
 8002866:	e7fe      	b.n	8002866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <vPortExitCritical+0x50>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	3b01      	subs	r3, #1
 800286e:	4a09      	ldr	r2, [pc, #36]	; (8002894 <vPortExitCritical+0x50>)
 8002870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002872:	4b08      	ldr	r3, [pc, #32]	; (8002894 <vPortExitCritical+0x50>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d105      	bne.n	8002886 <vPortExitCritical+0x42>
 800287a:	2300      	movs	r3, #0
 800287c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	2000000c 	.word	0x2000000c
	...

080028a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80028a0:	f3ef 8009 	mrs	r0, PSP
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	4b15      	ldr	r3, [pc, #84]	; (8002900 <pxCurrentTCBConst>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	f01e 0f10 	tst.w	lr, #16
 80028b0:	bf08      	it	eq
 80028b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80028b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028ba:	6010      	str	r0, [r2, #0]
 80028bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80028c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80028c4:	f380 8811 	msr	BASEPRI, r0
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	f7ff fc9e 	bl	8002210 <vTaskSwitchContext>
 80028d4:	f04f 0000 	mov.w	r0, #0
 80028d8:	f380 8811 	msr	BASEPRI, r0
 80028dc:	bc09      	pop	{r0, r3}
 80028de:	6819      	ldr	r1, [r3, #0]
 80028e0:	6808      	ldr	r0, [r1, #0]
 80028e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028e6:	f01e 0f10 	tst.w	lr, #16
 80028ea:	bf08      	it	eq
 80028ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80028f0:	f380 8809 	msr	PSP, r0
 80028f4:	f3bf 8f6f 	isb	sy
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	f3af 8000 	nop.w

08002900 <pxCurrentTCBConst>:
 8002900:	20000354 	.word	0x20000354
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop

08002908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
	__asm volatile
 800290e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002912:	f383 8811 	msr	BASEPRI, r3
 8002916:	f3bf 8f6f 	isb	sy
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	607b      	str	r3, [r7, #4]
}
 8002920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002922:	f7ff fbdf 	bl	80020e4 <xTaskIncrementTick>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <xPortSysTickHandler+0x40>)
 800292e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	2300      	movs	r3, #0
 8002936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	f383 8811 	msr	BASEPRI, r3
}
 800293e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	e000ed04 	.word	0xe000ed04

0800294c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <vPortSetupTimerInterrupt+0x34>)
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002956:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <vPortSetupTimerInterrupt+0x38>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800295c:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <vPortSetupTimerInterrupt+0x3c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0a      	ldr	r2, [pc, #40]	; (800298c <vPortSetupTimerInterrupt+0x40>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	099b      	lsrs	r3, r3, #6
 8002968:	4a09      	ldr	r2, [pc, #36]	; (8002990 <vPortSetupTimerInterrupt+0x44>)
 800296a:	3b01      	subs	r3, #1
 800296c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800296e:	4b04      	ldr	r3, [pc, #16]	; (8002980 <vPortSetupTimerInterrupt+0x34>)
 8002970:	2207      	movs	r2, #7
 8002972:	601a      	str	r2, [r3, #0]
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000e010 	.word	0xe000e010
 8002984:	e000e018 	.word	0xe000e018
 8002988:	20000000 	.word	0x20000000
 800298c:	10624dd3 	.word	0x10624dd3
 8002990:	e000e014 	.word	0xe000e014

08002994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80029a4 <vPortEnableVFP+0x10>
 8002998:	6801      	ldr	r1, [r0, #0]
 800299a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800299e:	6001      	str	r1, [r0, #0]
 80029a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80029a2:	bf00      	nop
 80029a4:	e000ed88 	.word	0xe000ed88

080029a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80029b4:	f7ff fafa 	bl	8001fac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80029b8:	4b5b      	ldr	r3, [pc, #364]	; (8002b28 <pvPortMalloc+0x180>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80029c0:	f000 f920 	bl	8002c04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80029c4:	4b59      	ldr	r3, [pc, #356]	; (8002b2c <pvPortMalloc+0x184>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f040 8093 	bne.w	8002af8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01d      	beq.n	8002a14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80029d8:	2208      	movs	r2, #8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d014      	beq.n	8002a14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f023 0307 	bic.w	r3, r3, #7
 80029f0:	3308      	adds	r3, #8
 80029f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <pvPortMalloc+0x6c>
	__asm volatile
 80029fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a02:	f383 8811 	msr	BASEPRI, r3
 8002a06:	f3bf 8f6f 	isb	sy
 8002a0a:	f3bf 8f4f 	dsb	sy
 8002a0e:	617b      	str	r3, [r7, #20]
}
 8002a10:	bf00      	nop
 8002a12:	e7fe      	b.n	8002a12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d06e      	beq.n	8002af8 <pvPortMalloc+0x150>
 8002a1a:	4b45      	ldr	r3, [pc, #276]	; (8002b30 <pvPortMalloc+0x188>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d869      	bhi.n	8002af8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002a24:	4b43      	ldr	r3, [pc, #268]	; (8002b34 <pvPortMalloc+0x18c>)
 8002a26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002a28:	4b42      	ldr	r3, [pc, #264]	; (8002b34 <pvPortMalloc+0x18c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a2e:	e004      	b.n	8002a3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d903      	bls.n	8002a4c <pvPortMalloc+0xa4>
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f1      	bne.n	8002a30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002a4c:	4b36      	ldr	r3, [pc, #216]	; (8002b28 <pvPortMalloc+0x180>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d050      	beq.n	8002af8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2208      	movs	r2, #8
 8002a5c:	4413      	add	r3, r2
 8002a5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	1ad2      	subs	r2, r2, r3
 8002a70:	2308      	movs	r3, #8
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d91f      	bls.n	8002ab8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <pvPortMalloc+0xf8>
	__asm volatile
 8002a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8e:	f383 8811 	msr	BASEPRI, r3
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	613b      	str	r3, [r7, #16]
}
 8002a9c:	bf00      	nop
 8002a9e:	e7fe      	b.n	8002a9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	1ad2      	subs	r2, r2, r3
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002ab2:	69b8      	ldr	r0, [r7, #24]
 8002ab4:	f000 f908 	bl	8002cc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <pvPortMalloc+0x188>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	4a1b      	ldr	r2, [pc, #108]	; (8002b30 <pvPortMalloc+0x188>)
 8002ac4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ac6:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <pvPortMalloc+0x188>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <pvPortMalloc+0x190>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d203      	bcs.n	8002ada <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002ad2:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <pvPortMalloc+0x188>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <pvPortMalloc+0x190>)
 8002ad8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <pvPortMalloc+0x184>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002aee:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <pvPortMalloc+0x194>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	3301      	adds	r3, #1
 8002af4:	4a11      	ldr	r2, [pc, #68]	; (8002b3c <pvPortMalloc+0x194>)
 8002af6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002af8:	f7ff fa66 	bl	8001fc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <pvPortMalloc+0x174>
	__asm volatile
 8002b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0a:	f383 8811 	msr	BASEPRI, r3
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	f3bf 8f4f 	dsb	sy
 8002b16:	60fb      	str	r3, [r7, #12]
}
 8002b18:	bf00      	nop
 8002b1a:	e7fe      	b.n	8002b1a <pvPortMalloc+0x172>
	return pvReturn;
 8002b1c:	69fb      	ldr	r3, [r7, #28]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3728      	adds	r7, #40	; 0x28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20004090 	.word	0x20004090
 8002b2c:	200040a4 	.word	0x200040a4
 8002b30:	20004094 	.word	0x20004094
 8002b34:	20004088 	.word	0x20004088
 8002b38:	20004098 	.word	0x20004098
 8002b3c:	2000409c 	.word	0x2000409c

08002b40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d04d      	beq.n	8002bee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002b52:	2308      	movs	r3, #8
 8002b54:	425b      	negs	r3, r3
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4413      	add	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	4b24      	ldr	r3, [pc, #144]	; (8002bf8 <vPortFree+0xb8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10a      	bne.n	8002b84 <vPortFree+0x44>
	__asm volatile
 8002b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	60fb      	str	r3, [r7, #12]
}
 8002b80:	bf00      	nop
 8002b82:	e7fe      	b.n	8002b82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <vPortFree+0x62>
	__asm volatile
 8002b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b90:	f383 8811 	msr	BASEPRI, r3
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	60bb      	str	r3, [r7, #8]
}
 8002b9e:	bf00      	nop
 8002ba0:	e7fe      	b.n	8002ba0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <vPortFree+0xb8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d01e      	beq.n	8002bee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d11a      	bne.n	8002bee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <vPortFree+0xb8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002bc8:	f7ff f9f0 	bl	8001fac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <vPortFree+0xbc>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	4a09      	ldr	r2, [pc, #36]	; (8002bfc <vPortFree+0xbc>)
 8002bd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002bda:	6938      	ldr	r0, [r7, #16]
 8002bdc:	f000 f874 	bl	8002cc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002be0:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <vPortFree+0xc0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3301      	adds	r3, #1
 8002be6:	4a06      	ldr	r2, [pc, #24]	; (8002c00 <vPortFree+0xc0>)
 8002be8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002bea:	f7ff f9ed 	bl	8001fc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002bee:	bf00      	nop
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200040a4 	.word	0x200040a4
 8002bfc:	20004094 	.word	0x20004094
 8002c00:	200040a0 	.word	0x200040a0

08002c04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002c0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002c0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002c10:	4b27      	ldr	r3, [pc, #156]	; (8002cb0 <prvHeapInit+0xac>)
 8002c12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00c      	beq.n	8002c38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	3307      	adds	r3, #7
 8002c22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0307 	bic.w	r3, r3, #7
 8002c2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	4a1f      	ldr	r2, [pc, #124]	; (8002cb0 <prvHeapInit+0xac>)
 8002c34:	4413      	add	r3, r2
 8002c36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002c3c:	4a1d      	ldr	r2, [pc, #116]	; (8002cb4 <prvHeapInit+0xb0>)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002c42:	4b1c      	ldr	r3, [pc, #112]	; (8002cb4 <prvHeapInit+0xb0>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002c50:	2208      	movs	r2, #8
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f023 0307 	bic.w	r3, r3, #7
 8002c5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4a15      	ldr	r2, [pc, #84]	; (8002cb8 <prvHeapInit+0xb4>)
 8002c64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002c66:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <prvHeapInit+0xb4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002c6e:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <prvHeapInit+0xb4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	1ad2      	subs	r2, r2, r3
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002c84:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <prvHeapInit+0xb4>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <prvHeapInit+0xb8>)
 8002c92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4a09      	ldr	r2, [pc, #36]	; (8002cc0 <prvHeapInit+0xbc>)
 8002c9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002c9c:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <prvHeapInit+0xc0>)
 8002c9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002ca2:	601a      	str	r2, [r3, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	20000488 	.word	0x20000488
 8002cb4:	20004088 	.word	0x20004088
 8002cb8:	20004090 	.word	0x20004090
 8002cbc:	20004098 	.word	0x20004098
 8002cc0:	20004094 	.word	0x20004094
 8002cc4:	200040a4 	.word	0x200040a4

08002cc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002cd0:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <prvInsertBlockIntoFreeList+0xac>)
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	e002      	b.n	8002cdc <prvInsertBlockIntoFreeList+0x14>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d8f7      	bhi.n	8002cd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d108      	bne.n	8002d0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	441a      	add	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	441a      	add	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d118      	bne.n	8002d50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	4b15      	ldr	r3, [pc, #84]	; (8002d78 <prvInsertBlockIntoFreeList+0xb0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d00d      	beq.n	8002d46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	441a      	add	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	e008      	b.n	8002d58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002d46:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <prvInsertBlockIntoFreeList+0xb0>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e003      	b.n	8002d58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d002      	beq.n	8002d66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d66:	bf00      	nop
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	20004088 	.word	0x20004088
 8002d78:	20004090 	.word	0x20004090

08002d7c <__errno>:
 8002d7c:	4b01      	ldr	r3, [pc, #4]	; (8002d84 <__errno+0x8>)
 8002d7e:	6818      	ldr	r0, [r3, #0]
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000010 	.word	0x20000010

08002d88 <std>:
 8002d88:	2300      	movs	r3, #0
 8002d8a:	b510      	push	{r4, lr}
 8002d8c:	4604      	mov	r4, r0
 8002d8e:	e9c0 3300 	strd	r3, r3, [r0]
 8002d92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d96:	6083      	str	r3, [r0, #8]
 8002d98:	8181      	strh	r1, [r0, #12]
 8002d9a:	6643      	str	r3, [r0, #100]	; 0x64
 8002d9c:	81c2      	strh	r2, [r0, #14]
 8002d9e:	6183      	str	r3, [r0, #24]
 8002da0:	4619      	mov	r1, r3
 8002da2:	2208      	movs	r2, #8
 8002da4:	305c      	adds	r0, #92	; 0x5c
 8002da6:	f000 f90c 	bl	8002fc2 <memset>
 8002daa:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <std+0x38>)
 8002dac:	6263      	str	r3, [r4, #36]	; 0x24
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <std+0x3c>)
 8002db0:	62a3      	str	r3, [r4, #40]	; 0x28
 8002db2:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <std+0x40>)
 8002db4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <std+0x44>)
 8002db8:	6224      	str	r4, [r4, #32]
 8002dba:	6323      	str	r3, [r4, #48]	; 0x30
 8002dbc:	bd10      	pop	{r4, pc}
 8002dbe:	bf00      	nop
 8002dc0:	080032dd 	.word	0x080032dd
 8002dc4:	080032ff 	.word	0x080032ff
 8002dc8:	08003337 	.word	0x08003337
 8002dcc:	0800335b 	.word	0x0800335b

08002dd0 <_cleanup_r>:
 8002dd0:	4901      	ldr	r1, [pc, #4]	; (8002dd8 <_cleanup_r+0x8>)
 8002dd2:	f000 b8af 	b.w	8002f34 <_fwalk_reent>
 8002dd6:	bf00      	nop
 8002dd8:	08003635 	.word	0x08003635

08002ddc <__sfmoreglue>:
 8002ddc:	b570      	push	{r4, r5, r6, lr}
 8002dde:	2268      	movs	r2, #104	; 0x68
 8002de0:	1e4d      	subs	r5, r1, #1
 8002de2:	4355      	muls	r5, r2
 8002de4:	460e      	mov	r6, r1
 8002de6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002dea:	f000 f913 	bl	8003014 <_malloc_r>
 8002dee:	4604      	mov	r4, r0
 8002df0:	b140      	cbz	r0, 8002e04 <__sfmoreglue+0x28>
 8002df2:	2100      	movs	r1, #0
 8002df4:	e9c0 1600 	strd	r1, r6, [r0]
 8002df8:	300c      	adds	r0, #12
 8002dfa:	60a0      	str	r0, [r4, #8]
 8002dfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002e00:	f000 f8df 	bl	8002fc2 <memset>
 8002e04:	4620      	mov	r0, r4
 8002e06:	bd70      	pop	{r4, r5, r6, pc}

08002e08 <__sfp_lock_acquire>:
 8002e08:	4801      	ldr	r0, [pc, #4]	; (8002e10 <__sfp_lock_acquire+0x8>)
 8002e0a:	f000 b8d8 	b.w	8002fbe <__retarget_lock_acquire_recursive>
 8002e0e:	bf00      	nop
 8002e10:	200040a9 	.word	0x200040a9

08002e14 <__sfp_lock_release>:
 8002e14:	4801      	ldr	r0, [pc, #4]	; (8002e1c <__sfp_lock_release+0x8>)
 8002e16:	f000 b8d3 	b.w	8002fc0 <__retarget_lock_release_recursive>
 8002e1a:	bf00      	nop
 8002e1c:	200040a9 	.word	0x200040a9

08002e20 <__sinit_lock_acquire>:
 8002e20:	4801      	ldr	r0, [pc, #4]	; (8002e28 <__sinit_lock_acquire+0x8>)
 8002e22:	f000 b8cc 	b.w	8002fbe <__retarget_lock_acquire_recursive>
 8002e26:	bf00      	nop
 8002e28:	200040aa 	.word	0x200040aa

08002e2c <__sinit_lock_release>:
 8002e2c:	4801      	ldr	r0, [pc, #4]	; (8002e34 <__sinit_lock_release+0x8>)
 8002e2e:	f000 b8c7 	b.w	8002fc0 <__retarget_lock_release_recursive>
 8002e32:	bf00      	nop
 8002e34:	200040aa 	.word	0x200040aa

08002e38 <__sinit>:
 8002e38:	b510      	push	{r4, lr}
 8002e3a:	4604      	mov	r4, r0
 8002e3c:	f7ff fff0 	bl	8002e20 <__sinit_lock_acquire>
 8002e40:	69a3      	ldr	r3, [r4, #24]
 8002e42:	b11b      	cbz	r3, 8002e4c <__sinit+0x14>
 8002e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e48:	f7ff bff0 	b.w	8002e2c <__sinit_lock_release>
 8002e4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002e50:	6523      	str	r3, [r4, #80]	; 0x50
 8002e52:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <__sinit+0x68>)
 8002e54:	4a13      	ldr	r2, [pc, #76]	; (8002ea4 <__sinit+0x6c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	62a2      	str	r2, [r4, #40]	; 0x28
 8002e5a:	42a3      	cmp	r3, r4
 8002e5c:	bf04      	itt	eq
 8002e5e:	2301      	moveq	r3, #1
 8002e60:	61a3      	streq	r3, [r4, #24]
 8002e62:	4620      	mov	r0, r4
 8002e64:	f000 f820 	bl	8002ea8 <__sfp>
 8002e68:	6060      	str	r0, [r4, #4]
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	f000 f81c 	bl	8002ea8 <__sfp>
 8002e70:	60a0      	str	r0, [r4, #8]
 8002e72:	4620      	mov	r0, r4
 8002e74:	f000 f818 	bl	8002ea8 <__sfp>
 8002e78:	2200      	movs	r2, #0
 8002e7a:	60e0      	str	r0, [r4, #12]
 8002e7c:	2104      	movs	r1, #4
 8002e7e:	6860      	ldr	r0, [r4, #4]
 8002e80:	f7ff ff82 	bl	8002d88 <std>
 8002e84:	68a0      	ldr	r0, [r4, #8]
 8002e86:	2201      	movs	r2, #1
 8002e88:	2109      	movs	r1, #9
 8002e8a:	f7ff ff7d 	bl	8002d88 <std>
 8002e8e:	68e0      	ldr	r0, [r4, #12]
 8002e90:	2202      	movs	r2, #2
 8002e92:	2112      	movs	r1, #18
 8002e94:	f7ff ff78 	bl	8002d88 <std>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	61a3      	str	r3, [r4, #24]
 8002e9c:	e7d2      	b.n	8002e44 <__sinit+0xc>
 8002e9e:	bf00      	nop
 8002ea0:	08003a14 	.word	0x08003a14
 8002ea4:	08002dd1 	.word	0x08002dd1

08002ea8 <__sfp>:
 8002ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eaa:	4607      	mov	r7, r0
 8002eac:	f7ff ffac 	bl	8002e08 <__sfp_lock_acquire>
 8002eb0:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <__sfp+0x84>)
 8002eb2:	681e      	ldr	r6, [r3, #0]
 8002eb4:	69b3      	ldr	r3, [r6, #24]
 8002eb6:	b913      	cbnz	r3, 8002ebe <__sfp+0x16>
 8002eb8:	4630      	mov	r0, r6
 8002eba:	f7ff ffbd 	bl	8002e38 <__sinit>
 8002ebe:	3648      	adds	r6, #72	; 0x48
 8002ec0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	d503      	bpl.n	8002ed0 <__sfp+0x28>
 8002ec8:	6833      	ldr	r3, [r6, #0]
 8002eca:	b30b      	cbz	r3, 8002f10 <__sfp+0x68>
 8002ecc:	6836      	ldr	r6, [r6, #0]
 8002ece:	e7f7      	b.n	8002ec0 <__sfp+0x18>
 8002ed0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002ed4:	b9d5      	cbnz	r5, 8002f0c <__sfp+0x64>
 8002ed6:	4b16      	ldr	r3, [pc, #88]	; (8002f30 <__sfp+0x88>)
 8002ed8:	60e3      	str	r3, [r4, #12]
 8002eda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ede:	6665      	str	r5, [r4, #100]	; 0x64
 8002ee0:	f000 f86c 	bl	8002fbc <__retarget_lock_init_recursive>
 8002ee4:	f7ff ff96 	bl	8002e14 <__sfp_lock_release>
 8002ee8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002eec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002ef0:	6025      	str	r5, [r4, #0]
 8002ef2:	61a5      	str	r5, [r4, #24]
 8002ef4:	2208      	movs	r2, #8
 8002ef6:	4629      	mov	r1, r5
 8002ef8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002efc:	f000 f861 	bl	8002fc2 <memset>
 8002f00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002f04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002f08:	4620      	mov	r0, r4
 8002f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f0c:	3468      	adds	r4, #104	; 0x68
 8002f0e:	e7d9      	b.n	8002ec4 <__sfp+0x1c>
 8002f10:	2104      	movs	r1, #4
 8002f12:	4638      	mov	r0, r7
 8002f14:	f7ff ff62 	bl	8002ddc <__sfmoreglue>
 8002f18:	4604      	mov	r4, r0
 8002f1a:	6030      	str	r0, [r6, #0]
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	d1d5      	bne.n	8002ecc <__sfp+0x24>
 8002f20:	f7ff ff78 	bl	8002e14 <__sfp_lock_release>
 8002f24:	230c      	movs	r3, #12
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	e7ee      	b.n	8002f08 <__sfp+0x60>
 8002f2a:	bf00      	nop
 8002f2c:	08003a14 	.word	0x08003a14
 8002f30:	ffff0001 	.word	0xffff0001

08002f34 <_fwalk_reent>:
 8002f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f38:	4606      	mov	r6, r0
 8002f3a:	4688      	mov	r8, r1
 8002f3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002f40:	2700      	movs	r7, #0
 8002f42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f46:	f1b9 0901 	subs.w	r9, r9, #1
 8002f4a:	d505      	bpl.n	8002f58 <_fwalk_reent+0x24>
 8002f4c:	6824      	ldr	r4, [r4, #0]
 8002f4e:	2c00      	cmp	r4, #0
 8002f50:	d1f7      	bne.n	8002f42 <_fwalk_reent+0xe>
 8002f52:	4638      	mov	r0, r7
 8002f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f58:	89ab      	ldrh	r3, [r5, #12]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d907      	bls.n	8002f6e <_fwalk_reent+0x3a>
 8002f5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f62:	3301      	adds	r3, #1
 8002f64:	d003      	beq.n	8002f6e <_fwalk_reent+0x3a>
 8002f66:	4629      	mov	r1, r5
 8002f68:	4630      	mov	r0, r6
 8002f6a:	47c0      	blx	r8
 8002f6c:	4307      	orrs	r7, r0
 8002f6e:	3568      	adds	r5, #104	; 0x68
 8002f70:	e7e9      	b.n	8002f46 <_fwalk_reent+0x12>
	...

08002f74 <__libc_init_array>:
 8002f74:	b570      	push	{r4, r5, r6, lr}
 8002f76:	4d0d      	ldr	r5, [pc, #52]	; (8002fac <__libc_init_array+0x38>)
 8002f78:	4c0d      	ldr	r4, [pc, #52]	; (8002fb0 <__libc_init_array+0x3c>)
 8002f7a:	1b64      	subs	r4, r4, r5
 8002f7c:	10a4      	asrs	r4, r4, #2
 8002f7e:	2600      	movs	r6, #0
 8002f80:	42a6      	cmp	r6, r4
 8002f82:	d109      	bne.n	8002f98 <__libc_init_array+0x24>
 8002f84:	4d0b      	ldr	r5, [pc, #44]	; (8002fb4 <__libc_init_array+0x40>)
 8002f86:	4c0c      	ldr	r4, [pc, #48]	; (8002fb8 <__libc_init_array+0x44>)
 8002f88:	f000 fc94 	bl	80038b4 <_init>
 8002f8c:	1b64      	subs	r4, r4, r5
 8002f8e:	10a4      	asrs	r4, r4, #2
 8002f90:	2600      	movs	r6, #0
 8002f92:	42a6      	cmp	r6, r4
 8002f94:	d105      	bne.n	8002fa2 <__libc_init_array+0x2e>
 8002f96:	bd70      	pop	{r4, r5, r6, pc}
 8002f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f9c:	4798      	blx	r3
 8002f9e:	3601      	adds	r6, #1
 8002fa0:	e7ee      	b.n	8002f80 <__libc_init_array+0xc>
 8002fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa6:	4798      	blx	r3
 8002fa8:	3601      	adds	r6, #1
 8002faa:	e7f2      	b.n	8002f92 <__libc_init_array+0x1e>
 8002fac:	08003a20 	.word	0x08003a20
 8002fb0:	08003a20 	.word	0x08003a20
 8002fb4:	08003a20 	.word	0x08003a20
 8002fb8:	08003a24 	.word	0x08003a24

08002fbc <__retarget_lock_init_recursive>:
 8002fbc:	4770      	bx	lr

08002fbe <__retarget_lock_acquire_recursive>:
 8002fbe:	4770      	bx	lr

08002fc0 <__retarget_lock_release_recursive>:
 8002fc0:	4770      	bx	lr

08002fc2 <memset>:
 8002fc2:	4402      	add	r2, r0
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d100      	bne.n	8002fcc <memset+0xa>
 8002fca:	4770      	bx	lr
 8002fcc:	f803 1b01 	strb.w	r1, [r3], #1
 8002fd0:	e7f9      	b.n	8002fc6 <memset+0x4>
	...

08002fd4 <sbrk_aligned>:
 8002fd4:	b570      	push	{r4, r5, r6, lr}
 8002fd6:	4e0e      	ldr	r6, [pc, #56]	; (8003010 <sbrk_aligned+0x3c>)
 8002fd8:	460c      	mov	r4, r1
 8002fda:	6831      	ldr	r1, [r6, #0]
 8002fdc:	4605      	mov	r5, r0
 8002fde:	b911      	cbnz	r1, 8002fe6 <sbrk_aligned+0x12>
 8002fe0:	f000 f96c 	bl	80032bc <_sbrk_r>
 8002fe4:	6030      	str	r0, [r6, #0]
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	4628      	mov	r0, r5
 8002fea:	f000 f967 	bl	80032bc <_sbrk_r>
 8002fee:	1c43      	adds	r3, r0, #1
 8002ff0:	d00a      	beq.n	8003008 <sbrk_aligned+0x34>
 8002ff2:	1cc4      	adds	r4, r0, #3
 8002ff4:	f024 0403 	bic.w	r4, r4, #3
 8002ff8:	42a0      	cmp	r0, r4
 8002ffa:	d007      	beq.n	800300c <sbrk_aligned+0x38>
 8002ffc:	1a21      	subs	r1, r4, r0
 8002ffe:	4628      	mov	r0, r5
 8003000:	f000 f95c 	bl	80032bc <_sbrk_r>
 8003004:	3001      	adds	r0, #1
 8003006:	d101      	bne.n	800300c <sbrk_aligned+0x38>
 8003008:	f04f 34ff 	mov.w	r4, #4294967295
 800300c:	4620      	mov	r0, r4
 800300e:	bd70      	pop	{r4, r5, r6, pc}
 8003010:	200040b0 	.word	0x200040b0

08003014 <_malloc_r>:
 8003014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003018:	1ccd      	adds	r5, r1, #3
 800301a:	f025 0503 	bic.w	r5, r5, #3
 800301e:	3508      	adds	r5, #8
 8003020:	2d0c      	cmp	r5, #12
 8003022:	bf38      	it	cc
 8003024:	250c      	movcc	r5, #12
 8003026:	2d00      	cmp	r5, #0
 8003028:	4607      	mov	r7, r0
 800302a:	db01      	blt.n	8003030 <_malloc_r+0x1c>
 800302c:	42a9      	cmp	r1, r5
 800302e:	d905      	bls.n	800303c <_malloc_r+0x28>
 8003030:	230c      	movs	r3, #12
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	2600      	movs	r6, #0
 8003036:	4630      	mov	r0, r6
 8003038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800303c:	4e2e      	ldr	r6, [pc, #184]	; (80030f8 <_malloc_r+0xe4>)
 800303e:	f000 fbad 	bl	800379c <__malloc_lock>
 8003042:	6833      	ldr	r3, [r6, #0]
 8003044:	461c      	mov	r4, r3
 8003046:	bb34      	cbnz	r4, 8003096 <_malloc_r+0x82>
 8003048:	4629      	mov	r1, r5
 800304a:	4638      	mov	r0, r7
 800304c:	f7ff ffc2 	bl	8002fd4 <sbrk_aligned>
 8003050:	1c43      	adds	r3, r0, #1
 8003052:	4604      	mov	r4, r0
 8003054:	d14d      	bne.n	80030f2 <_malloc_r+0xde>
 8003056:	6834      	ldr	r4, [r6, #0]
 8003058:	4626      	mov	r6, r4
 800305a:	2e00      	cmp	r6, #0
 800305c:	d140      	bne.n	80030e0 <_malloc_r+0xcc>
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	4631      	mov	r1, r6
 8003062:	4638      	mov	r0, r7
 8003064:	eb04 0803 	add.w	r8, r4, r3
 8003068:	f000 f928 	bl	80032bc <_sbrk_r>
 800306c:	4580      	cmp	r8, r0
 800306e:	d13a      	bne.n	80030e6 <_malloc_r+0xd2>
 8003070:	6821      	ldr	r1, [r4, #0]
 8003072:	3503      	adds	r5, #3
 8003074:	1a6d      	subs	r5, r5, r1
 8003076:	f025 0503 	bic.w	r5, r5, #3
 800307a:	3508      	adds	r5, #8
 800307c:	2d0c      	cmp	r5, #12
 800307e:	bf38      	it	cc
 8003080:	250c      	movcc	r5, #12
 8003082:	4629      	mov	r1, r5
 8003084:	4638      	mov	r0, r7
 8003086:	f7ff ffa5 	bl	8002fd4 <sbrk_aligned>
 800308a:	3001      	adds	r0, #1
 800308c:	d02b      	beq.n	80030e6 <_malloc_r+0xd2>
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	442b      	add	r3, r5
 8003092:	6023      	str	r3, [r4, #0]
 8003094:	e00e      	b.n	80030b4 <_malloc_r+0xa0>
 8003096:	6822      	ldr	r2, [r4, #0]
 8003098:	1b52      	subs	r2, r2, r5
 800309a:	d41e      	bmi.n	80030da <_malloc_r+0xc6>
 800309c:	2a0b      	cmp	r2, #11
 800309e:	d916      	bls.n	80030ce <_malloc_r+0xba>
 80030a0:	1961      	adds	r1, r4, r5
 80030a2:	42a3      	cmp	r3, r4
 80030a4:	6025      	str	r5, [r4, #0]
 80030a6:	bf18      	it	ne
 80030a8:	6059      	strne	r1, [r3, #4]
 80030aa:	6863      	ldr	r3, [r4, #4]
 80030ac:	bf08      	it	eq
 80030ae:	6031      	streq	r1, [r6, #0]
 80030b0:	5162      	str	r2, [r4, r5]
 80030b2:	604b      	str	r3, [r1, #4]
 80030b4:	4638      	mov	r0, r7
 80030b6:	f104 060b 	add.w	r6, r4, #11
 80030ba:	f000 fb75 	bl	80037a8 <__malloc_unlock>
 80030be:	f026 0607 	bic.w	r6, r6, #7
 80030c2:	1d23      	adds	r3, r4, #4
 80030c4:	1af2      	subs	r2, r6, r3
 80030c6:	d0b6      	beq.n	8003036 <_malloc_r+0x22>
 80030c8:	1b9b      	subs	r3, r3, r6
 80030ca:	50a3      	str	r3, [r4, r2]
 80030cc:	e7b3      	b.n	8003036 <_malloc_r+0x22>
 80030ce:	6862      	ldr	r2, [r4, #4]
 80030d0:	42a3      	cmp	r3, r4
 80030d2:	bf0c      	ite	eq
 80030d4:	6032      	streq	r2, [r6, #0]
 80030d6:	605a      	strne	r2, [r3, #4]
 80030d8:	e7ec      	b.n	80030b4 <_malloc_r+0xa0>
 80030da:	4623      	mov	r3, r4
 80030dc:	6864      	ldr	r4, [r4, #4]
 80030de:	e7b2      	b.n	8003046 <_malloc_r+0x32>
 80030e0:	4634      	mov	r4, r6
 80030e2:	6876      	ldr	r6, [r6, #4]
 80030e4:	e7b9      	b.n	800305a <_malloc_r+0x46>
 80030e6:	230c      	movs	r3, #12
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	4638      	mov	r0, r7
 80030ec:	f000 fb5c 	bl	80037a8 <__malloc_unlock>
 80030f0:	e7a1      	b.n	8003036 <_malloc_r+0x22>
 80030f2:	6025      	str	r5, [r4, #0]
 80030f4:	e7de      	b.n	80030b4 <_malloc_r+0xa0>
 80030f6:	bf00      	nop
 80030f8:	200040ac 	.word	0x200040ac

080030fc <_puts_r>:
 80030fc:	b570      	push	{r4, r5, r6, lr}
 80030fe:	460e      	mov	r6, r1
 8003100:	4605      	mov	r5, r0
 8003102:	b118      	cbz	r0, 800310c <_puts_r+0x10>
 8003104:	6983      	ldr	r3, [r0, #24]
 8003106:	b90b      	cbnz	r3, 800310c <_puts_r+0x10>
 8003108:	f7ff fe96 	bl	8002e38 <__sinit>
 800310c:	69ab      	ldr	r3, [r5, #24]
 800310e:	68ac      	ldr	r4, [r5, #8]
 8003110:	b913      	cbnz	r3, 8003118 <_puts_r+0x1c>
 8003112:	4628      	mov	r0, r5
 8003114:	f7ff fe90 	bl	8002e38 <__sinit>
 8003118:	4b2c      	ldr	r3, [pc, #176]	; (80031cc <_puts_r+0xd0>)
 800311a:	429c      	cmp	r4, r3
 800311c:	d120      	bne.n	8003160 <_puts_r+0x64>
 800311e:	686c      	ldr	r4, [r5, #4]
 8003120:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003122:	07db      	lsls	r3, r3, #31
 8003124:	d405      	bmi.n	8003132 <_puts_r+0x36>
 8003126:	89a3      	ldrh	r3, [r4, #12]
 8003128:	0598      	lsls	r0, r3, #22
 800312a:	d402      	bmi.n	8003132 <_puts_r+0x36>
 800312c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800312e:	f7ff ff46 	bl	8002fbe <__retarget_lock_acquire_recursive>
 8003132:	89a3      	ldrh	r3, [r4, #12]
 8003134:	0719      	lsls	r1, r3, #28
 8003136:	d51d      	bpl.n	8003174 <_puts_r+0x78>
 8003138:	6923      	ldr	r3, [r4, #16]
 800313a:	b1db      	cbz	r3, 8003174 <_puts_r+0x78>
 800313c:	3e01      	subs	r6, #1
 800313e:	68a3      	ldr	r3, [r4, #8]
 8003140:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003144:	3b01      	subs	r3, #1
 8003146:	60a3      	str	r3, [r4, #8]
 8003148:	bb39      	cbnz	r1, 800319a <_puts_r+0x9e>
 800314a:	2b00      	cmp	r3, #0
 800314c:	da38      	bge.n	80031c0 <_puts_r+0xc4>
 800314e:	4622      	mov	r2, r4
 8003150:	210a      	movs	r1, #10
 8003152:	4628      	mov	r0, r5
 8003154:	f000 f906 	bl	8003364 <__swbuf_r>
 8003158:	3001      	adds	r0, #1
 800315a:	d011      	beq.n	8003180 <_puts_r+0x84>
 800315c:	250a      	movs	r5, #10
 800315e:	e011      	b.n	8003184 <_puts_r+0x88>
 8003160:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <_puts_r+0xd4>)
 8003162:	429c      	cmp	r4, r3
 8003164:	d101      	bne.n	800316a <_puts_r+0x6e>
 8003166:	68ac      	ldr	r4, [r5, #8]
 8003168:	e7da      	b.n	8003120 <_puts_r+0x24>
 800316a:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <_puts_r+0xd8>)
 800316c:	429c      	cmp	r4, r3
 800316e:	bf08      	it	eq
 8003170:	68ec      	ldreq	r4, [r5, #12]
 8003172:	e7d5      	b.n	8003120 <_puts_r+0x24>
 8003174:	4621      	mov	r1, r4
 8003176:	4628      	mov	r0, r5
 8003178:	f000 f958 	bl	800342c <__swsetup_r>
 800317c:	2800      	cmp	r0, #0
 800317e:	d0dd      	beq.n	800313c <_puts_r+0x40>
 8003180:	f04f 35ff 	mov.w	r5, #4294967295
 8003184:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003186:	07da      	lsls	r2, r3, #31
 8003188:	d405      	bmi.n	8003196 <_puts_r+0x9a>
 800318a:	89a3      	ldrh	r3, [r4, #12]
 800318c:	059b      	lsls	r3, r3, #22
 800318e:	d402      	bmi.n	8003196 <_puts_r+0x9a>
 8003190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003192:	f7ff ff15 	bl	8002fc0 <__retarget_lock_release_recursive>
 8003196:	4628      	mov	r0, r5
 8003198:	bd70      	pop	{r4, r5, r6, pc}
 800319a:	2b00      	cmp	r3, #0
 800319c:	da04      	bge.n	80031a8 <_puts_r+0xac>
 800319e:	69a2      	ldr	r2, [r4, #24]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	dc06      	bgt.n	80031b2 <_puts_r+0xb6>
 80031a4:	290a      	cmp	r1, #10
 80031a6:	d004      	beq.n	80031b2 <_puts_r+0xb6>
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	6022      	str	r2, [r4, #0]
 80031ae:	7019      	strb	r1, [r3, #0]
 80031b0:	e7c5      	b.n	800313e <_puts_r+0x42>
 80031b2:	4622      	mov	r2, r4
 80031b4:	4628      	mov	r0, r5
 80031b6:	f000 f8d5 	bl	8003364 <__swbuf_r>
 80031ba:	3001      	adds	r0, #1
 80031bc:	d1bf      	bne.n	800313e <_puts_r+0x42>
 80031be:	e7df      	b.n	8003180 <_puts_r+0x84>
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	250a      	movs	r5, #10
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	6022      	str	r2, [r4, #0]
 80031c8:	701d      	strb	r5, [r3, #0]
 80031ca:	e7db      	b.n	8003184 <_puts_r+0x88>
 80031cc:	080039d4 	.word	0x080039d4
 80031d0:	080039f4 	.word	0x080039f4
 80031d4:	080039b4 	.word	0x080039b4

080031d8 <puts>:
 80031d8:	4b02      	ldr	r3, [pc, #8]	; (80031e4 <puts+0xc>)
 80031da:	4601      	mov	r1, r0
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	f7ff bf8d 	b.w	80030fc <_puts_r>
 80031e2:	bf00      	nop
 80031e4:	20000010 	.word	0x20000010

080031e8 <cleanup_glue>:
 80031e8:	b538      	push	{r3, r4, r5, lr}
 80031ea:	460c      	mov	r4, r1
 80031ec:	6809      	ldr	r1, [r1, #0]
 80031ee:	4605      	mov	r5, r0
 80031f0:	b109      	cbz	r1, 80031f6 <cleanup_glue+0xe>
 80031f2:	f7ff fff9 	bl	80031e8 <cleanup_glue>
 80031f6:	4621      	mov	r1, r4
 80031f8:	4628      	mov	r0, r5
 80031fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031fe:	f000 bad9 	b.w	80037b4 <_free_r>
	...

08003204 <_reclaim_reent>:
 8003204:	4b2c      	ldr	r3, [pc, #176]	; (80032b8 <_reclaim_reent+0xb4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4283      	cmp	r3, r0
 800320a:	b570      	push	{r4, r5, r6, lr}
 800320c:	4604      	mov	r4, r0
 800320e:	d051      	beq.n	80032b4 <_reclaim_reent+0xb0>
 8003210:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003212:	b143      	cbz	r3, 8003226 <_reclaim_reent+0x22>
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d14a      	bne.n	80032b0 <_reclaim_reent+0xac>
 800321a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800321c:	6819      	ldr	r1, [r3, #0]
 800321e:	b111      	cbz	r1, 8003226 <_reclaim_reent+0x22>
 8003220:	4620      	mov	r0, r4
 8003222:	f000 fac7 	bl	80037b4 <_free_r>
 8003226:	6961      	ldr	r1, [r4, #20]
 8003228:	b111      	cbz	r1, 8003230 <_reclaim_reent+0x2c>
 800322a:	4620      	mov	r0, r4
 800322c:	f000 fac2 	bl	80037b4 <_free_r>
 8003230:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003232:	b111      	cbz	r1, 800323a <_reclaim_reent+0x36>
 8003234:	4620      	mov	r0, r4
 8003236:	f000 fabd 	bl	80037b4 <_free_r>
 800323a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800323c:	b111      	cbz	r1, 8003244 <_reclaim_reent+0x40>
 800323e:	4620      	mov	r0, r4
 8003240:	f000 fab8 	bl	80037b4 <_free_r>
 8003244:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003246:	b111      	cbz	r1, 800324e <_reclaim_reent+0x4a>
 8003248:	4620      	mov	r0, r4
 800324a:	f000 fab3 	bl	80037b4 <_free_r>
 800324e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003250:	b111      	cbz	r1, 8003258 <_reclaim_reent+0x54>
 8003252:	4620      	mov	r0, r4
 8003254:	f000 faae 	bl	80037b4 <_free_r>
 8003258:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800325a:	b111      	cbz	r1, 8003262 <_reclaim_reent+0x5e>
 800325c:	4620      	mov	r0, r4
 800325e:	f000 faa9 	bl	80037b4 <_free_r>
 8003262:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003264:	b111      	cbz	r1, 800326c <_reclaim_reent+0x68>
 8003266:	4620      	mov	r0, r4
 8003268:	f000 faa4 	bl	80037b4 <_free_r>
 800326c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800326e:	b111      	cbz	r1, 8003276 <_reclaim_reent+0x72>
 8003270:	4620      	mov	r0, r4
 8003272:	f000 fa9f 	bl	80037b4 <_free_r>
 8003276:	69a3      	ldr	r3, [r4, #24]
 8003278:	b1e3      	cbz	r3, 80032b4 <_reclaim_reent+0xb0>
 800327a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800327c:	4620      	mov	r0, r4
 800327e:	4798      	blx	r3
 8003280:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003282:	b1b9      	cbz	r1, 80032b4 <_reclaim_reent+0xb0>
 8003284:	4620      	mov	r0, r4
 8003286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800328a:	f7ff bfad 	b.w	80031e8 <cleanup_glue>
 800328e:	5949      	ldr	r1, [r1, r5]
 8003290:	b941      	cbnz	r1, 80032a4 <_reclaim_reent+0xa0>
 8003292:	3504      	adds	r5, #4
 8003294:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003296:	2d80      	cmp	r5, #128	; 0x80
 8003298:	68d9      	ldr	r1, [r3, #12]
 800329a:	d1f8      	bne.n	800328e <_reclaim_reent+0x8a>
 800329c:	4620      	mov	r0, r4
 800329e:	f000 fa89 	bl	80037b4 <_free_r>
 80032a2:	e7ba      	b.n	800321a <_reclaim_reent+0x16>
 80032a4:	680e      	ldr	r6, [r1, #0]
 80032a6:	4620      	mov	r0, r4
 80032a8:	f000 fa84 	bl	80037b4 <_free_r>
 80032ac:	4631      	mov	r1, r6
 80032ae:	e7ef      	b.n	8003290 <_reclaim_reent+0x8c>
 80032b0:	2500      	movs	r5, #0
 80032b2:	e7ef      	b.n	8003294 <_reclaim_reent+0x90>
 80032b4:	bd70      	pop	{r4, r5, r6, pc}
 80032b6:	bf00      	nop
 80032b8:	20000010 	.word	0x20000010

080032bc <_sbrk_r>:
 80032bc:	b538      	push	{r3, r4, r5, lr}
 80032be:	4d06      	ldr	r5, [pc, #24]	; (80032d8 <_sbrk_r+0x1c>)
 80032c0:	2300      	movs	r3, #0
 80032c2:	4604      	mov	r4, r0
 80032c4:	4608      	mov	r0, r1
 80032c6:	602b      	str	r3, [r5, #0]
 80032c8:	f7fd fb3a 	bl	8000940 <_sbrk>
 80032cc:	1c43      	adds	r3, r0, #1
 80032ce:	d102      	bne.n	80032d6 <_sbrk_r+0x1a>
 80032d0:	682b      	ldr	r3, [r5, #0]
 80032d2:	b103      	cbz	r3, 80032d6 <_sbrk_r+0x1a>
 80032d4:	6023      	str	r3, [r4, #0]
 80032d6:	bd38      	pop	{r3, r4, r5, pc}
 80032d8:	200040b4 	.word	0x200040b4

080032dc <__sread>:
 80032dc:	b510      	push	{r4, lr}
 80032de:	460c      	mov	r4, r1
 80032e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032e4:	f000 fab2 	bl	800384c <_read_r>
 80032e8:	2800      	cmp	r0, #0
 80032ea:	bfab      	itete	ge
 80032ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80032ee:	89a3      	ldrhlt	r3, [r4, #12]
 80032f0:	181b      	addge	r3, r3, r0
 80032f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80032f6:	bfac      	ite	ge
 80032f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80032fa:	81a3      	strhlt	r3, [r4, #12]
 80032fc:	bd10      	pop	{r4, pc}

080032fe <__swrite>:
 80032fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003302:	461f      	mov	r7, r3
 8003304:	898b      	ldrh	r3, [r1, #12]
 8003306:	05db      	lsls	r3, r3, #23
 8003308:	4605      	mov	r5, r0
 800330a:	460c      	mov	r4, r1
 800330c:	4616      	mov	r6, r2
 800330e:	d505      	bpl.n	800331c <__swrite+0x1e>
 8003310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003314:	2302      	movs	r3, #2
 8003316:	2200      	movs	r2, #0
 8003318:	f000 f9c8 	bl	80036ac <_lseek_r>
 800331c:	89a3      	ldrh	r3, [r4, #12]
 800331e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003322:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003326:	81a3      	strh	r3, [r4, #12]
 8003328:	4632      	mov	r2, r6
 800332a:	463b      	mov	r3, r7
 800332c:	4628      	mov	r0, r5
 800332e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003332:	f000 b869 	b.w	8003408 <_write_r>

08003336 <__sseek>:
 8003336:	b510      	push	{r4, lr}
 8003338:	460c      	mov	r4, r1
 800333a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800333e:	f000 f9b5 	bl	80036ac <_lseek_r>
 8003342:	1c43      	adds	r3, r0, #1
 8003344:	89a3      	ldrh	r3, [r4, #12]
 8003346:	bf15      	itete	ne
 8003348:	6560      	strne	r0, [r4, #84]	; 0x54
 800334a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800334e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003352:	81a3      	strheq	r3, [r4, #12]
 8003354:	bf18      	it	ne
 8003356:	81a3      	strhne	r3, [r4, #12]
 8003358:	bd10      	pop	{r4, pc}

0800335a <__sclose>:
 800335a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800335e:	f000 b8d3 	b.w	8003508 <_close_r>
	...

08003364 <__swbuf_r>:
 8003364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003366:	460e      	mov	r6, r1
 8003368:	4614      	mov	r4, r2
 800336a:	4605      	mov	r5, r0
 800336c:	b118      	cbz	r0, 8003376 <__swbuf_r+0x12>
 800336e:	6983      	ldr	r3, [r0, #24]
 8003370:	b90b      	cbnz	r3, 8003376 <__swbuf_r+0x12>
 8003372:	f7ff fd61 	bl	8002e38 <__sinit>
 8003376:	4b21      	ldr	r3, [pc, #132]	; (80033fc <__swbuf_r+0x98>)
 8003378:	429c      	cmp	r4, r3
 800337a:	d12b      	bne.n	80033d4 <__swbuf_r+0x70>
 800337c:	686c      	ldr	r4, [r5, #4]
 800337e:	69a3      	ldr	r3, [r4, #24]
 8003380:	60a3      	str	r3, [r4, #8]
 8003382:	89a3      	ldrh	r3, [r4, #12]
 8003384:	071a      	lsls	r2, r3, #28
 8003386:	d52f      	bpl.n	80033e8 <__swbuf_r+0x84>
 8003388:	6923      	ldr	r3, [r4, #16]
 800338a:	b36b      	cbz	r3, 80033e8 <__swbuf_r+0x84>
 800338c:	6923      	ldr	r3, [r4, #16]
 800338e:	6820      	ldr	r0, [r4, #0]
 8003390:	1ac0      	subs	r0, r0, r3
 8003392:	6963      	ldr	r3, [r4, #20]
 8003394:	b2f6      	uxtb	r6, r6
 8003396:	4283      	cmp	r3, r0
 8003398:	4637      	mov	r7, r6
 800339a:	dc04      	bgt.n	80033a6 <__swbuf_r+0x42>
 800339c:	4621      	mov	r1, r4
 800339e:	4628      	mov	r0, r5
 80033a0:	f000 f948 	bl	8003634 <_fflush_r>
 80033a4:	bb30      	cbnz	r0, 80033f4 <__swbuf_r+0x90>
 80033a6:	68a3      	ldr	r3, [r4, #8]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	60a3      	str	r3, [r4, #8]
 80033ac:	6823      	ldr	r3, [r4, #0]
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	6022      	str	r2, [r4, #0]
 80033b2:	701e      	strb	r6, [r3, #0]
 80033b4:	6963      	ldr	r3, [r4, #20]
 80033b6:	3001      	adds	r0, #1
 80033b8:	4283      	cmp	r3, r0
 80033ba:	d004      	beq.n	80033c6 <__swbuf_r+0x62>
 80033bc:	89a3      	ldrh	r3, [r4, #12]
 80033be:	07db      	lsls	r3, r3, #31
 80033c0:	d506      	bpl.n	80033d0 <__swbuf_r+0x6c>
 80033c2:	2e0a      	cmp	r6, #10
 80033c4:	d104      	bne.n	80033d0 <__swbuf_r+0x6c>
 80033c6:	4621      	mov	r1, r4
 80033c8:	4628      	mov	r0, r5
 80033ca:	f000 f933 	bl	8003634 <_fflush_r>
 80033ce:	b988      	cbnz	r0, 80033f4 <__swbuf_r+0x90>
 80033d0:	4638      	mov	r0, r7
 80033d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033d4:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <__swbuf_r+0x9c>)
 80033d6:	429c      	cmp	r4, r3
 80033d8:	d101      	bne.n	80033de <__swbuf_r+0x7a>
 80033da:	68ac      	ldr	r4, [r5, #8]
 80033dc:	e7cf      	b.n	800337e <__swbuf_r+0x1a>
 80033de:	4b09      	ldr	r3, [pc, #36]	; (8003404 <__swbuf_r+0xa0>)
 80033e0:	429c      	cmp	r4, r3
 80033e2:	bf08      	it	eq
 80033e4:	68ec      	ldreq	r4, [r5, #12]
 80033e6:	e7ca      	b.n	800337e <__swbuf_r+0x1a>
 80033e8:	4621      	mov	r1, r4
 80033ea:	4628      	mov	r0, r5
 80033ec:	f000 f81e 	bl	800342c <__swsetup_r>
 80033f0:	2800      	cmp	r0, #0
 80033f2:	d0cb      	beq.n	800338c <__swbuf_r+0x28>
 80033f4:	f04f 37ff 	mov.w	r7, #4294967295
 80033f8:	e7ea      	b.n	80033d0 <__swbuf_r+0x6c>
 80033fa:	bf00      	nop
 80033fc:	080039d4 	.word	0x080039d4
 8003400:	080039f4 	.word	0x080039f4
 8003404:	080039b4 	.word	0x080039b4

08003408 <_write_r>:
 8003408:	b538      	push	{r3, r4, r5, lr}
 800340a:	4d07      	ldr	r5, [pc, #28]	; (8003428 <_write_r+0x20>)
 800340c:	4604      	mov	r4, r0
 800340e:	4608      	mov	r0, r1
 8003410:	4611      	mov	r1, r2
 8003412:	2200      	movs	r2, #0
 8003414:	602a      	str	r2, [r5, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	f7fd f89d 	bl	8000556 <_write>
 800341c:	1c43      	adds	r3, r0, #1
 800341e:	d102      	bne.n	8003426 <_write_r+0x1e>
 8003420:	682b      	ldr	r3, [r5, #0]
 8003422:	b103      	cbz	r3, 8003426 <_write_r+0x1e>
 8003424:	6023      	str	r3, [r4, #0]
 8003426:	bd38      	pop	{r3, r4, r5, pc}
 8003428:	200040b4 	.word	0x200040b4

0800342c <__swsetup_r>:
 800342c:	4b32      	ldr	r3, [pc, #200]	; (80034f8 <__swsetup_r+0xcc>)
 800342e:	b570      	push	{r4, r5, r6, lr}
 8003430:	681d      	ldr	r5, [r3, #0]
 8003432:	4606      	mov	r6, r0
 8003434:	460c      	mov	r4, r1
 8003436:	b125      	cbz	r5, 8003442 <__swsetup_r+0x16>
 8003438:	69ab      	ldr	r3, [r5, #24]
 800343a:	b913      	cbnz	r3, 8003442 <__swsetup_r+0x16>
 800343c:	4628      	mov	r0, r5
 800343e:	f7ff fcfb 	bl	8002e38 <__sinit>
 8003442:	4b2e      	ldr	r3, [pc, #184]	; (80034fc <__swsetup_r+0xd0>)
 8003444:	429c      	cmp	r4, r3
 8003446:	d10f      	bne.n	8003468 <__swsetup_r+0x3c>
 8003448:	686c      	ldr	r4, [r5, #4]
 800344a:	89a3      	ldrh	r3, [r4, #12]
 800344c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003450:	0719      	lsls	r1, r3, #28
 8003452:	d42c      	bmi.n	80034ae <__swsetup_r+0x82>
 8003454:	06dd      	lsls	r5, r3, #27
 8003456:	d411      	bmi.n	800347c <__swsetup_r+0x50>
 8003458:	2309      	movs	r3, #9
 800345a:	6033      	str	r3, [r6, #0]
 800345c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003460:	81a3      	strh	r3, [r4, #12]
 8003462:	f04f 30ff 	mov.w	r0, #4294967295
 8003466:	e03e      	b.n	80034e6 <__swsetup_r+0xba>
 8003468:	4b25      	ldr	r3, [pc, #148]	; (8003500 <__swsetup_r+0xd4>)
 800346a:	429c      	cmp	r4, r3
 800346c:	d101      	bne.n	8003472 <__swsetup_r+0x46>
 800346e:	68ac      	ldr	r4, [r5, #8]
 8003470:	e7eb      	b.n	800344a <__swsetup_r+0x1e>
 8003472:	4b24      	ldr	r3, [pc, #144]	; (8003504 <__swsetup_r+0xd8>)
 8003474:	429c      	cmp	r4, r3
 8003476:	bf08      	it	eq
 8003478:	68ec      	ldreq	r4, [r5, #12]
 800347a:	e7e6      	b.n	800344a <__swsetup_r+0x1e>
 800347c:	0758      	lsls	r0, r3, #29
 800347e:	d512      	bpl.n	80034a6 <__swsetup_r+0x7a>
 8003480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003482:	b141      	cbz	r1, 8003496 <__swsetup_r+0x6a>
 8003484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003488:	4299      	cmp	r1, r3
 800348a:	d002      	beq.n	8003492 <__swsetup_r+0x66>
 800348c:	4630      	mov	r0, r6
 800348e:	f000 f991 	bl	80037b4 <_free_r>
 8003492:	2300      	movs	r3, #0
 8003494:	6363      	str	r3, [r4, #52]	; 0x34
 8003496:	89a3      	ldrh	r3, [r4, #12]
 8003498:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800349c:	81a3      	strh	r3, [r4, #12]
 800349e:	2300      	movs	r3, #0
 80034a0:	6063      	str	r3, [r4, #4]
 80034a2:	6923      	ldr	r3, [r4, #16]
 80034a4:	6023      	str	r3, [r4, #0]
 80034a6:	89a3      	ldrh	r3, [r4, #12]
 80034a8:	f043 0308 	orr.w	r3, r3, #8
 80034ac:	81a3      	strh	r3, [r4, #12]
 80034ae:	6923      	ldr	r3, [r4, #16]
 80034b0:	b94b      	cbnz	r3, 80034c6 <__swsetup_r+0x9a>
 80034b2:	89a3      	ldrh	r3, [r4, #12]
 80034b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80034b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034bc:	d003      	beq.n	80034c6 <__swsetup_r+0x9a>
 80034be:	4621      	mov	r1, r4
 80034c0:	4630      	mov	r0, r6
 80034c2:	f000 f92b 	bl	800371c <__smakebuf_r>
 80034c6:	89a0      	ldrh	r0, [r4, #12]
 80034c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034cc:	f010 0301 	ands.w	r3, r0, #1
 80034d0:	d00a      	beq.n	80034e8 <__swsetup_r+0xbc>
 80034d2:	2300      	movs	r3, #0
 80034d4:	60a3      	str	r3, [r4, #8]
 80034d6:	6963      	ldr	r3, [r4, #20]
 80034d8:	425b      	negs	r3, r3
 80034da:	61a3      	str	r3, [r4, #24]
 80034dc:	6923      	ldr	r3, [r4, #16]
 80034de:	b943      	cbnz	r3, 80034f2 <__swsetup_r+0xc6>
 80034e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80034e4:	d1ba      	bne.n	800345c <__swsetup_r+0x30>
 80034e6:	bd70      	pop	{r4, r5, r6, pc}
 80034e8:	0781      	lsls	r1, r0, #30
 80034ea:	bf58      	it	pl
 80034ec:	6963      	ldrpl	r3, [r4, #20]
 80034ee:	60a3      	str	r3, [r4, #8]
 80034f0:	e7f4      	b.n	80034dc <__swsetup_r+0xb0>
 80034f2:	2000      	movs	r0, #0
 80034f4:	e7f7      	b.n	80034e6 <__swsetup_r+0xba>
 80034f6:	bf00      	nop
 80034f8:	20000010 	.word	0x20000010
 80034fc:	080039d4 	.word	0x080039d4
 8003500:	080039f4 	.word	0x080039f4
 8003504:	080039b4 	.word	0x080039b4

08003508 <_close_r>:
 8003508:	b538      	push	{r3, r4, r5, lr}
 800350a:	4d06      	ldr	r5, [pc, #24]	; (8003524 <_close_r+0x1c>)
 800350c:	2300      	movs	r3, #0
 800350e:	4604      	mov	r4, r0
 8003510:	4608      	mov	r0, r1
 8003512:	602b      	str	r3, [r5, #0]
 8003514:	f7fd f9e0 	bl	80008d8 <_close>
 8003518:	1c43      	adds	r3, r0, #1
 800351a:	d102      	bne.n	8003522 <_close_r+0x1a>
 800351c:	682b      	ldr	r3, [r5, #0]
 800351e:	b103      	cbz	r3, 8003522 <_close_r+0x1a>
 8003520:	6023      	str	r3, [r4, #0]
 8003522:	bd38      	pop	{r3, r4, r5, pc}
 8003524:	200040b4 	.word	0x200040b4

08003528 <__sflush_r>:
 8003528:	898a      	ldrh	r2, [r1, #12]
 800352a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800352e:	4605      	mov	r5, r0
 8003530:	0710      	lsls	r0, r2, #28
 8003532:	460c      	mov	r4, r1
 8003534:	d458      	bmi.n	80035e8 <__sflush_r+0xc0>
 8003536:	684b      	ldr	r3, [r1, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	dc05      	bgt.n	8003548 <__sflush_r+0x20>
 800353c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800353e:	2b00      	cmp	r3, #0
 8003540:	dc02      	bgt.n	8003548 <__sflush_r+0x20>
 8003542:	2000      	movs	r0, #0
 8003544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003548:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800354a:	2e00      	cmp	r6, #0
 800354c:	d0f9      	beq.n	8003542 <__sflush_r+0x1a>
 800354e:	2300      	movs	r3, #0
 8003550:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003554:	682f      	ldr	r7, [r5, #0]
 8003556:	602b      	str	r3, [r5, #0]
 8003558:	d032      	beq.n	80035c0 <__sflush_r+0x98>
 800355a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800355c:	89a3      	ldrh	r3, [r4, #12]
 800355e:	075a      	lsls	r2, r3, #29
 8003560:	d505      	bpl.n	800356e <__sflush_r+0x46>
 8003562:	6863      	ldr	r3, [r4, #4]
 8003564:	1ac0      	subs	r0, r0, r3
 8003566:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003568:	b10b      	cbz	r3, 800356e <__sflush_r+0x46>
 800356a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800356c:	1ac0      	subs	r0, r0, r3
 800356e:	2300      	movs	r3, #0
 8003570:	4602      	mov	r2, r0
 8003572:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003574:	6a21      	ldr	r1, [r4, #32]
 8003576:	4628      	mov	r0, r5
 8003578:	47b0      	blx	r6
 800357a:	1c43      	adds	r3, r0, #1
 800357c:	89a3      	ldrh	r3, [r4, #12]
 800357e:	d106      	bne.n	800358e <__sflush_r+0x66>
 8003580:	6829      	ldr	r1, [r5, #0]
 8003582:	291d      	cmp	r1, #29
 8003584:	d82c      	bhi.n	80035e0 <__sflush_r+0xb8>
 8003586:	4a2a      	ldr	r2, [pc, #168]	; (8003630 <__sflush_r+0x108>)
 8003588:	40ca      	lsrs	r2, r1
 800358a:	07d6      	lsls	r6, r2, #31
 800358c:	d528      	bpl.n	80035e0 <__sflush_r+0xb8>
 800358e:	2200      	movs	r2, #0
 8003590:	6062      	str	r2, [r4, #4]
 8003592:	04d9      	lsls	r1, r3, #19
 8003594:	6922      	ldr	r2, [r4, #16]
 8003596:	6022      	str	r2, [r4, #0]
 8003598:	d504      	bpl.n	80035a4 <__sflush_r+0x7c>
 800359a:	1c42      	adds	r2, r0, #1
 800359c:	d101      	bne.n	80035a2 <__sflush_r+0x7a>
 800359e:	682b      	ldr	r3, [r5, #0]
 80035a0:	b903      	cbnz	r3, 80035a4 <__sflush_r+0x7c>
 80035a2:	6560      	str	r0, [r4, #84]	; 0x54
 80035a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035a6:	602f      	str	r7, [r5, #0]
 80035a8:	2900      	cmp	r1, #0
 80035aa:	d0ca      	beq.n	8003542 <__sflush_r+0x1a>
 80035ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035b0:	4299      	cmp	r1, r3
 80035b2:	d002      	beq.n	80035ba <__sflush_r+0x92>
 80035b4:	4628      	mov	r0, r5
 80035b6:	f000 f8fd 	bl	80037b4 <_free_r>
 80035ba:	2000      	movs	r0, #0
 80035bc:	6360      	str	r0, [r4, #52]	; 0x34
 80035be:	e7c1      	b.n	8003544 <__sflush_r+0x1c>
 80035c0:	6a21      	ldr	r1, [r4, #32]
 80035c2:	2301      	movs	r3, #1
 80035c4:	4628      	mov	r0, r5
 80035c6:	47b0      	blx	r6
 80035c8:	1c41      	adds	r1, r0, #1
 80035ca:	d1c7      	bne.n	800355c <__sflush_r+0x34>
 80035cc:	682b      	ldr	r3, [r5, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0c4      	beq.n	800355c <__sflush_r+0x34>
 80035d2:	2b1d      	cmp	r3, #29
 80035d4:	d001      	beq.n	80035da <__sflush_r+0xb2>
 80035d6:	2b16      	cmp	r3, #22
 80035d8:	d101      	bne.n	80035de <__sflush_r+0xb6>
 80035da:	602f      	str	r7, [r5, #0]
 80035dc:	e7b1      	b.n	8003542 <__sflush_r+0x1a>
 80035de:	89a3      	ldrh	r3, [r4, #12]
 80035e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035e4:	81a3      	strh	r3, [r4, #12]
 80035e6:	e7ad      	b.n	8003544 <__sflush_r+0x1c>
 80035e8:	690f      	ldr	r7, [r1, #16]
 80035ea:	2f00      	cmp	r7, #0
 80035ec:	d0a9      	beq.n	8003542 <__sflush_r+0x1a>
 80035ee:	0793      	lsls	r3, r2, #30
 80035f0:	680e      	ldr	r6, [r1, #0]
 80035f2:	bf08      	it	eq
 80035f4:	694b      	ldreq	r3, [r1, #20]
 80035f6:	600f      	str	r7, [r1, #0]
 80035f8:	bf18      	it	ne
 80035fa:	2300      	movne	r3, #0
 80035fc:	eba6 0807 	sub.w	r8, r6, r7
 8003600:	608b      	str	r3, [r1, #8]
 8003602:	f1b8 0f00 	cmp.w	r8, #0
 8003606:	dd9c      	ble.n	8003542 <__sflush_r+0x1a>
 8003608:	6a21      	ldr	r1, [r4, #32]
 800360a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800360c:	4643      	mov	r3, r8
 800360e:	463a      	mov	r2, r7
 8003610:	4628      	mov	r0, r5
 8003612:	47b0      	blx	r6
 8003614:	2800      	cmp	r0, #0
 8003616:	dc06      	bgt.n	8003626 <__sflush_r+0xfe>
 8003618:	89a3      	ldrh	r3, [r4, #12]
 800361a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800361e:	81a3      	strh	r3, [r4, #12]
 8003620:	f04f 30ff 	mov.w	r0, #4294967295
 8003624:	e78e      	b.n	8003544 <__sflush_r+0x1c>
 8003626:	4407      	add	r7, r0
 8003628:	eba8 0800 	sub.w	r8, r8, r0
 800362c:	e7e9      	b.n	8003602 <__sflush_r+0xda>
 800362e:	bf00      	nop
 8003630:	20400001 	.word	0x20400001

08003634 <_fflush_r>:
 8003634:	b538      	push	{r3, r4, r5, lr}
 8003636:	690b      	ldr	r3, [r1, #16]
 8003638:	4605      	mov	r5, r0
 800363a:	460c      	mov	r4, r1
 800363c:	b913      	cbnz	r3, 8003644 <_fflush_r+0x10>
 800363e:	2500      	movs	r5, #0
 8003640:	4628      	mov	r0, r5
 8003642:	bd38      	pop	{r3, r4, r5, pc}
 8003644:	b118      	cbz	r0, 800364e <_fflush_r+0x1a>
 8003646:	6983      	ldr	r3, [r0, #24]
 8003648:	b90b      	cbnz	r3, 800364e <_fflush_r+0x1a>
 800364a:	f7ff fbf5 	bl	8002e38 <__sinit>
 800364e:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <_fflush_r+0x6c>)
 8003650:	429c      	cmp	r4, r3
 8003652:	d11b      	bne.n	800368c <_fflush_r+0x58>
 8003654:	686c      	ldr	r4, [r5, #4]
 8003656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0ef      	beq.n	800363e <_fflush_r+0xa>
 800365e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003660:	07d0      	lsls	r0, r2, #31
 8003662:	d404      	bmi.n	800366e <_fflush_r+0x3a>
 8003664:	0599      	lsls	r1, r3, #22
 8003666:	d402      	bmi.n	800366e <_fflush_r+0x3a>
 8003668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800366a:	f7ff fca8 	bl	8002fbe <__retarget_lock_acquire_recursive>
 800366e:	4628      	mov	r0, r5
 8003670:	4621      	mov	r1, r4
 8003672:	f7ff ff59 	bl	8003528 <__sflush_r>
 8003676:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003678:	07da      	lsls	r2, r3, #31
 800367a:	4605      	mov	r5, r0
 800367c:	d4e0      	bmi.n	8003640 <_fflush_r+0xc>
 800367e:	89a3      	ldrh	r3, [r4, #12]
 8003680:	059b      	lsls	r3, r3, #22
 8003682:	d4dd      	bmi.n	8003640 <_fflush_r+0xc>
 8003684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003686:	f7ff fc9b 	bl	8002fc0 <__retarget_lock_release_recursive>
 800368a:	e7d9      	b.n	8003640 <_fflush_r+0xc>
 800368c:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <_fflush_r+0x70>)
 800368e:	429c      	cmp	r4, r3
 8003690:	d101      	bne.n	8003696 <_fflush_r+0x62>
 8003692:	68ac      	ldr	r4, [r5, #8]
 8003694:	e7df      	b.n	8003656 <_fflush_r+0x22>
 8003696:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <_fflush_r+0x74>)
 8003698:	429c      	cmp	r4, r3
 800369a:	bf08      	it	eq
 800369c:	68ec      	ldreq	r4, [r5, #12]
 800369e:	e7da      	b.n	8003656 <_fflush_r+0x22>
 80036a0:	080039d4 	.word	0x080039d4
 80036a4:	080039f4 	.word	0x080039f4
 80036a8:	080039b4 	.word	0x080039b4

080036ac <_lseek_r>:
 80036ac:	b538      	push	{r3, r4, r5, lr}
 80036ae:	4d07      	ldr	r5, [pc, #28]	; (80036cc <_lseek_r+0x20>)
 80036b0:	4604      	mov	r4, r0
 80036b2:	4608      	mov	r0, r1
 80036b4:	4611      	mov	r1, r2
 80036b6:	2200      	movs	r2, #0
 80036b8:	602a      	str	r2, [r5, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	f7fd f933 	bl	8000926 <_lseek>
 80036c0:	1c43      	adds	r3, r0, #1
 80036c2:	d102      	bne.n	80036ca <_lseek_r+0x1e>
 80036c4:	682b      	ldr	r3, [r5, #0]
 80036c6:	b103      	cbz	r3, 80036ca <_lseek_r+0x1e>
 80036c8:	6023      	str	r3, [r4, #0]
 80036ca:	bd38      	pop	{r3, r4, r5, pc}
 80036cc:	200040b4 	.word	0x200040b4

080036d0 <__swhatbuf_r>:
 80036d0:	b570      	push	{r4, r5, r6, lr}
 80036d2:	460e      	mov	r6, r1
 80036d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036d8:	2900      	cmp	r1, #0
 80036da:	b096      	sub	sp, #88	; 0x58
 80036dc:	4614      	mov	r4, r2
 80036de:	461d      	mov	r5, r3
 80036e0:	da08      	bge.n	80036f4 <__swhatbuf_r+0x24>
 80036e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	602a      	str	r2, [r5, #0]
 80036ea:	061a      	lsls	r2, r3, #24
 80036ec:	d410      	bmi.n	8003710 <__swhatbuf_r+0x40>
 80036ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036f2:	e00e      	b.n	8003712 <__swhatbuf_r+0x42>
 80036f4:	466a      	mov	r2, sp
 80036f6:	f000 f8bb 	bl	8003870 <_fstat_r>
 80036fa:	2800      	cmp	r0, #0
 80036fc:	dbf1      	blt.n	80036e2 <__swhatbuf_r+0x12>
 80036fe:	9a01      	ldr	r2, [sp, #4]
 8003700:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003704:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003708:	425a      	negs	r2, r3
 800370a:	415a      	adcs	r2, r3
 800370c:	602a      	str	r2, [r5, #0]
 800370e:	e7ee      	b.n	80036ee <__swhatbuf_r+0x1e>
 8003710:	2340      	movs	r3, #64	; 0x40
 8003712:	2000      	movs	r0, #0
 8003714:	6023      	str	r3, [r4, #0]
 8003716:	b016      	add	sp, #88	; 0x58
 8003718:	bd70      	pop	{r4, r5, r6, pc}
	...

0800371c <__smakebuf_r>:
 800371c:	898b      	ldrh	r3, [r1, #12]
 800371e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003720:	079d      	lsls	r5, r3, #30
 8003722:	4606      	mov	r6, r0
 8003724:	460c      	mov	r4, r1
 8003726:	d507      	bpl.n	8003738 <__smakebuf_r+0x1c>
 8003728:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800372c:	6023      	str	r3, [r4, #0]
 800372e:	6123      	str	r3, [r4, #16]
 8003730:	2301      	movs	r3, #1
 8003732:	6163      	str	r3, [r4, #20]
 8003734:	b002      	add	sp, #8
 8003736:	bd70      	pop	{r4, r5, r6, pc}
 8003738:	ab01      	add	r3, sp, #4
 800373a:	466a      	mov	r2, sp
 800373c:	f7ff ffc8 	bl	80036d0 <__swhatbuf_r>
 8003740:	9900      	ldr	r1, [sp, #0]
 8003742:	4605      	mov	r5, r0
 8003744:	4630      	mov	r0, r6
 8003746:	f7ff fc65 	bl	8003014 <_malloc_r>
 800374a:	b948      	cbnz	r0, 8003760 <__smakebuf_r+0x44>
 800374c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003750:	059a      	lsls	r2, r3, #22
 8003752:	d4ef      	bmi.n	8003734 <__smakebuf_r+0x18>
 8003754:	f023 0303 	bic.w	r3, r3, #3
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	81a3      	strh	r3, [r4, #12]
 800375e:	e7e3      	b.n	8003728 <__smakebuf_r+0xc>
 8003760:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <__smakebuf_r+0x7c>)
 8003762:	62b3      	str	r3, [r6, #40]	; 0x28
 8003764:	89a3      	ldrh	r3, [r4, #12]
 8003766:	6020      	str	r0, [r4, #0]
 8003768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800376c:	81a3      	strh	r3, [r4, #12]
 800376e:	9b00      	ldr	r3, [sp, #0]
 8003770:	6163      	str	r3, [r4, #20]
 8003772:	9b01      	ldr	r3, [sp, #4]
 8003774:	6120      	str	r0, [r4, #16]
 8003776:	b15b      	cbz	r3, 8003790 <__smakebuf_r+0x74>
 8003778:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800377c:	4630      	mov	r0, r6
 800377e:	f000 f889 	bl	8003894 <_isatty_r>
 8003782:	b128      	cbz	r0, 8003790 <__smakebuf_r+0x74>
 8003784:	89a3      	ldrh	r3, [r4, #12]
 8003786:	f023 0303 	bic.w	r3, r3, #3
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	81a3      	strh	r3, [r4, #12]
 8003790:	89a0      	ldrh	r0, [r4, #12]
 8003792:	4305      	orrs	r5, r0
 8003794:	81a5      	strh	r5, [r4, #12]
 8003796:	e7cd      	b.n	8003734 <__smakebuf_r+0x18>
 8003798:	08002dd1 	.word	0x08002dd1

0800379c <__malloc_lock>:
 800379c:	4801      	ldr	r0, [pc, #4]	; (80037a4 <__malloc_lock+0x8>)
 800379e:	f7ff bc0e 	b.w	8002fbe <__retarget_lock_acquire_recursive>
 80037a2:	bf00      	nop
 80037a4:	200040a8 	.word	0x200040a8

080037a8 <__malloc_unlock>:
 80037a8:	4801      	ldr	r0, [pc, #4]	; (80037b0 <__malloc_unlock+0x8>)
 80037aa:	f7ff bc09 	b.w	8002fc0 <__retarget_lock_release_recursive>
 80037ae:	bf00      	nop
 80037b0:	200040a8 	.word	0x200040a8

080037b4 <_free_r>:
 80037b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037b6:	2900      	cmp	r1, #0
 80037b8:	d044      	beq.n	8003844 <_free_r+0x90>
 80037ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037be:	9001      	str	r0, [sp, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f1a1 0404 	sub.w	r4, r1, #4
 80037c6:	bfb8      	it	lt
 80037c8:	18e4      	addlt	r4, r4, r3
 80037ca:	f7ff ffe7 	bl	800379c <__malloc_lock>
 80037ce:	4a1e      	ldr	r2, [pc, #120]	; (8003848 <_free_r+0x94>)
 80037d0:	9801      	ldr	r0, [sp, #4]
 80037d2:	6813      	ldr	r3, [r2, #0]
 80037d4:	b933      	cbnz	r3, 80037e4 <_free_r+0x30>
 80037d6:	6063      	str	r3, [r4, #4]
 80037d8:	6014      	str	r4, [r2, #0]
 80037da:	b003      	add	sp, #12
 80037dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037e0:	f7ff bfe2 	b.w	80037a8 <__malloc_unlock>
 80037e4:	42a3      	cmp	r3, r4
 80037e6:	d908      	bls.n	80037fa <_free_r+0x46>
 80037e8:	6825      	ldr	r5, [r4, #0]
 80037ea:	1961      	adds	r1, r4, r5
 80037ec:	428b      	cmp	r3, r1
 80037ee:	bf01      	itttt	eq
 80037f0:	6819      	ldreq	r1, [r3, #0]
 80037f2:	685b      	ldreq	r3, [r3, #4]
 80037f4:	1949      	addeq	r1, r1, r5
 80037f6:	6021      	streq	r1, [r4, #0]
 80037f8:	e7ed      	b.n	80037d6 <_free_r+0x22>
 80037fa:	461a      	mov	r2, r3
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	b10b      	cbz	r3, 8003804 <_free_r+0x50>
 8003800:	42a3      	cmp	r3, r4
 8003802:	d9fa      	bls.n	80037fa <_free_r+0x46>
 8003804:	6811      	ldr	r1, [r2, #0]
 8003806:	1855      	adds	r5, r2, r1
 8003808:	42a5      	cmp	r5, r4
 800380a:	d10b      	bne.n	8003824 <_free_r+0x70>
 800380c:	6824      	ldr	r4, [r4, #0]
 800380e:	4421      	add	r1, r4
 8003810:	1854      	adds	r4, r2, r1
 8003812:	42a3      	cmp	r3, r4
 8003814:	6011      	str	r1, [r2, #0]
 8003816:	d1e0      	bne.n	80037da <_free_r+0x26>
 8003818:	681c      	ldr	r4, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	6053      	str	r3, [r2, #4]
 800381e:	4421      	add	r1, r4
 8003820:	6011      	str	r1, [r2, #0]
 8003822:	e7da      	b.n	80037da <_free_r+0x26>
 8003824:	d902      	bls.n	800382c <_free_r+0x78>
 8003826:	230c      	movs	r3, #12
 8003828:	6003      	str	r3, [r0, #0]
 800382a:	e7d6      	b.n	80037da <_free_r+0x26>
 800382c:	6825      	ldr	r5, [r4, #0]
 800382e:	1961      	adds	r1, r4, r5
 8003830:	428b      	cmp	r3, r1
 8003832:	bf04      	itt	eq
 8003834:	6819      	ldreq	r1, [r3, #0]
 8003836:	685b      	ldreq	r3, [r3, #4]
 8003838:	6063      	str	r3, [r4, #4]
 800383a:	bf04      	itt	eq
 800383c:	1949      	addeq	r1, r1, r5
 800383e:	6021      	streq	r1, [r4, #0]
 8003840:	6054      	str	r4, [r2, #4]
 8003842:	e7ca      	b.n	80037da <_free_r+0x26>
 8003844:	b003      	add	sp, #12
 8003846:	bd30      	pop	{r4, r5, pc}
 8003848:	200040ac 	.word	0x200040ac

0800384c <_read_r>:
 800384c:	b538      	push	{r3, r4, r5, lr}
 800384e:	4d07      	ldr	r5, [pc, #28]	; (800386c <_read_r+0x20>)
 8003850:	4604      	mov	r4, r0
 8003852:	4608      	mov	r0, r1
 8003854:	4611      	mov	r1, r2
 8003856:	2200      	movs	r2, #0
 8003858:	602a      	str	r2, [r5, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	f7fd f81f 	bl	800089e <_read>
 8003860:	1c43      	adds	r3, r0, #1
 8003862:	d102      	bne.n	800386a <_read_r+0x1e>
 8003864:	682b      	ldr	r3, [r5, #0]
 8003866:	b103      	cbz	r3, 800386a <_read_r+0x1e>
 8003868:	6023      	str	r3, [r4, #0]
 800386a:	bd38      	pop	{r3, r4, r5, pc}
 800386c:	200040b4 	.word	0x200040b4

08003870 <_fstat_r>:
 8003870:	b538      	push	{r3, r4, r5, lr}
 8003872:	4d07      	ldr	r5, [pc, #28]	; (8003890 <_fstat_r+0x20>)
 8003874:	2300      	movs	r3, #0
 8003876:	4604      	mov	r4, r0
 8003878:	4608      	mov	r0, r1
 800387a:	4611      	mov	r1, r2
 800387c:	602b      	str	r3, [r5, #0]
 800387e:	f7fd f837 	bl	80008f0 <_fstat>
 8003882:	1c43      	adds	r3, r0, #1
 8003884:	d102      	bne.n	800388c <_fstat_r+0x1c>
 8003886:	682b      	ldr	r3, [r5, #0]
 8003888:	b103      	cbz	r3, 800388c <_fstat_r+0x1c>
 800388a:	6023      	str	r3, [r4, #0]
 800388c:	bd38      	pop	{r3, r4, r5, pc}
 800388e:	bf00      	nop
 8003890:	200040b4 	.word	0x200040b4

08003894 <_isatty_r>:
 8003894:	b538      	push	{r3, r4, r5, lr}
 8003896:	4d06      	ldr	r5, [pc, #24]	; (80038b0 <_isatty_r+0x1c>)
 8003898:	2300      	movs	r3, #0
 800389a:	4604      	mov	r4, r0
 800389c:	4608      	mov	r0, r1
 800389e:	602b      	str	r3, [r5, #0]
 80038a0:	f7fd f836 	bl	8000910 <_isatty>
 80038a4:	1c43      	adds	r3, r0, #1
 80038a6:	d102      	bne.n	80038ae <_isatty_r+0x1a>
 80038a8:	682b      	ldr	r3, [r5, #0]
 80038aa:	b103      	cbz	r3, 80038ae <_isatty_r+0x1a>
 80038ac:	6023      	str	r3, [r4, #0]
 80038ae:	bd38      	pop	{r3, r4, r5, pc}
 80038b0:	200040b4 	.word	0x200040b4

080038b4 <_init>:
 80038b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b6:	bf00      	nop
 80038b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ba:	bc08      	pop	{r3}
 80038bc:	469e      	mov	lr, r3
 80038be:	4770      	bx	lr

080038c0 <_fini>:
 80038c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c2:	bf00      	nop
 80038c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c6:	bc08      	pop	{r3}
 80038c8:	469e      	mov	lr, r3
 80038ca:	4770      	bx	lr
