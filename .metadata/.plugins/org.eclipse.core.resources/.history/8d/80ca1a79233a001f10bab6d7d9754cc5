/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Danh21
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 *							REVISION HISTORY
 * Version 1.0: read ADC by polling and send to SWV ITM data console
 ******************************************************************************
 */
/* LIBRARIES */
#include <stdint.h>
#include <stm32f407xx.h>
#include "Timer.h"
#include "SystemClock.h"
#include "ADC.h"



/* VARS */
uint32_t ADC1_data;
char result[20];



/* PROTOTYPES */
void GPIO_init();



/* MACROES */
int _write(int file, char *ptr, int len)
{
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
  }

  return len;
}



/* MAIN */
int main()
{
	SystemClock_config();
	GPIO_init();
	Timer1_init();
	ADC1_Init();

	while(1)
	{
		ADC1_Start_Polling(1);
		ADC1_data = ADC1_Read();
		sprintf(result, "ADC value = %d\r\n", ADC1_data);
		Timer_delay_ms(1000);
	}
}



/* Initializing GPIO */
void GPIO_init(void)
{
	RCC->AHB1ENR |= (1<<0);				// enable GPIOA clock
	GPIOA->MODER |= (3<<2);				// analog for PA1
	GPIOA->OSPEEDR |= (2<<2);			// high speed for PA1
}
