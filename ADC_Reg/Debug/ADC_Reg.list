
ADC_Reg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e88  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001038  08001038  00011038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800107c  0800107c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800107c  0800107c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800107c  0800107c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800107c  0800107c  0001107c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001080  08001080  00011080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000048  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b8  200000b8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000afa  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002b3  00000000  00000000  00020b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  00020e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000090  00000000  00000000  00020f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018436  00000000  00000000  00020f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ccf  00000000  00000000  000393ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089c40  00000000  00000000  0003a09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000c3cdd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000620  00000000  00000000  000c3d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001020 	.word	0x08001020

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08001020 	.word	0x08001020

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <Timer_init>:

/*
 * Initialize Timer
 * */
void Timer_init(TIM_TypeDef *TIM)
{
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	uint32_t F_timer, prescaler;

	// F_timer = f_PCLK / (PSC + 1)
	F_timer = 1 / T_timer;
 8000298:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800029c:	60fb      	str	r3, [r7, #12]
	prescaler = f_PCLK / F_timer - 1;
 800029e:	4b1c      	ldr	r3, [pc, #112]	; (8000310 <Timer_init+0x80>)
 80002a0:	461a      	mov	r2, r3
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a8:	3b01      	subs	r3, #1
 80002aa:	60bb      	str	r3, [r7, #8]

	if (TIM == TIM1)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	4a19      	ldr	r2, [pc, #100]	; (8000314 <Timer_init+0x84>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d106      	bne.n	80002c2 <Timer_init+0x32>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; 	// TIM1 clock enable
 80002b4:	4b18      	ldr	r3, [pc, #96]	; (8000318 <Timer_init+0x88>)
 80002b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002b8:	4a17      	ldr	r2, [pc, #92]	; (8000318 <Timer_init+0x88>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6453      	str	r3, [r2, #68]	; 0x44
 80002c0:	e009      	b.n	80002d6 <Timer_init+0x46>
	else if (TIM == TIM2)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80002c8:	d105      	bne.n	80002d6 <Timer_init+0x46>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; 	// TIM2 clock enable
 80002ca:	4b13      	ldr	r3, [pc, #76]	; (8000318 <Timer_init+0x88>)
 80002cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ce:	4a12      	ldr	r2, [pc, #72]	; (8000318 <Timer_init+0x88>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6413      	str	r3, [r2, #64]	; 0x40

	TIM->PSC |= prescaler;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	431a      	orrs	r2, r3
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	629a      	str	r2, [r3, #40]	; 0x28

	TIM->ARR = AutoReload;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002e8:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM->CR1 |= TIM_CR1_CEN;					// Counter enable
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f043 0201 	orr.w	r2, r3, #1
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	601a      	str	r2, [r3, #0]
	TIM->CR1 &= ~(TIM_CR1_DIR);					// Counter used as up counter
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f023 0210 	bic.w	r2, r3, #16
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	601a      	str	r2, [r3, #0]
}
 8000302:	bf00      	nop
 8000304:	3714      	adds	r7, #20
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	00f42400 	.word	0x00f42400
 8000314:	40010000 	.word	0x40010000
 8000318:	40023800 	.word	0x40023800

0800031c <Timer_delay_ms>:

/*
 * delay by ms
 * */
void Timer_delay_ms(TIM_TypeDef *TIM, int ms)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	6039      	str	r1, [r7, #0]
	TIM->CNT = 0;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	2200      	movs	r2, #0
 800032a:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM->CNT < ms);
 800032c:	bf00      	nop
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	429a      	cmp	r2, r3
 8000336:	d3fa      	bcc.n	800032e <Timer_delay_ms+0x12>
}
 8000338:	bf00      	nop
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
	...

08000348 <SystemClock_config>:

/*
 * Initialize system clock
 * */
void SystemClock_config()
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSION;				// enable HSI
 800034c:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <SystemClock_config+0x5c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a14      	ldr	r2, [pc, #80]	; (80003a4 <SystemClock_config+0x5c>)
 8000352:	f043 0301 	orr.w	r3, r3, #1
 8000356:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSIRDY));		// see that HSI is ready or not
 8000358:	bf00      	nop
 800035a:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <SystemClock_config+0x5c>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f003 0302 	and.w	r3, r3, #2
 8000362:	2b00      	cmp	r3, #0
 8000364:	d0f9      	beq.n	800035a <SystemClock_config+0x12>

	// Power regulator
	PWR->CR |= PWR_CR_VOS;
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <SystemClock_config+0x60>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <SystemClock_config+0x60>)
 800036c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000370:	6013      	str	r3, [r2, #0]

	// Flash latency setup
	FLASH->ACR |= FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_5WS;
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <SystemClock_config+0x64>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4a0d      	ldr	r2, [pc, #52]	; (80003ac <SystemClock_config+0x64>)
 8000378:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800037c:	f043 0305 	orr.w	r3, r3, #5
 8000380:	6013      	str	r3, [r2, #0]

	// HSI oscillator used as system clock
	RCC->CFGR |= RCC_CFGR_SW_HSI;
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <SystemClock_config+0x5c>)
 8000384:	4a07      	ldr	r2, [pc, #28]	; (80003a4 <SystemClock_config+0x5c>)
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);
 800038a:	bf00      	nop
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <SystemClock_config+0x5c>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	f003 030c 	and.w	r3, r3, #12
 8000394:	2b00      	cmp	r3, #0
 8000396:	d1f9      	bne.n	800038c <SystemClock_config+0x44>
}
 8000398:	bf00      	nop
 800039a:	bf00      	nop
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr
 80003a4:	40023800 	.word	0x40023800
 80003a8:	40007000 	.word	0x40007000
 80003ac:	40023c00 	.word	0x40023c00

080003b0 <ADC_Init>:
#define ADC_H_



void ADC_Init(ADC_TypeDef *pADC)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	if (pADC == ADC1)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a1c      	ldr	r2, [pc, #112]	; (800042c <ADC_Init+0x7c>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d105      	bne.n	80003cc <ADC_Init+0x1c>
	{
		RCC->APB2ENR |= (1<<8);	// enable ADC1 clock
 80003c0:	4b1b      	ldr	r3, [pc, #108]	; (8000430 <ADC_Init+0x80>)
 80003c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003c4:	4a1a      	ldr	r2, [pc, #104]	; (8000430 <ADC_Init+0x80>)
 80003c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ca:	6453      	str	r3, [r2, #68]	; 0x44
	}

	RCC->AHB1ENR |= (1<<0);		// enable GPIOA clock
 80003cc:	4b18      	ldr	r3, [pc, #96]	; (8000430 <ADC_Init+0x80>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d0:	4a17      	ldr	r2, [pc, #92]	; (8000430 <ADC_Init+0x80>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6313      	str	r3, [r2, #48]	; 0x30

	ADC->CCR &= ~(3<<16);  		// PCLK2 divided by 2
 80003d8:	4b16      	ldr	r3, [pc, #88]	; (8000434 <ADC_Init+0x84>)
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	4a15      	ldr	r2, [pc, #84]	; (8000434 <ADC_Init+0x84>)
 80003de:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80003e2:	6053      	str	r3, [r2, #4]

//	pADC->CR1 |= (1<<24);		// resolution 10-bit
	//	pADC->CR1 |= (1<<5);	// Enable interrupt mode for EOC

	pADC->CR2 |= (1<<0);		// adc enable respectively
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	689b      	ldr	r3, [r3, #8]
 80003e8:	f043 0201 	orr.w	r2, r3, #1
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	609a      	str	r2, [r3, #8]
	pADC->CR2 |= (1<<1);		// continuous conversion mode
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	f043 0202 	orr.w	r2, r3, #2
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	609a      	str	r2, [r3, #8]
	pADC->CR2 |= (1<<10);		// EOC after each conversion
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	689b      	ldr	r3, [r3, #8]
 8000400:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	609a      	str	r2, [r3, #8]
	pADC->CR2 &= ~(1<<11);		// data alignment right
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	689b      	ldr	r3, [r3, #8]
 800040c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	609a      	str	r2, [r3, #8]

	pADC->SMPR2 &= ~(7<<3);		// 3 clock cycle polling
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	691b      	ldr	r3, [r3, #16]
 8000418:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	611a      	str	r2, [r3, #16]
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	40012000 	.word	0x40012000
 8000430:	40023800 	.word	0x40023800
 8000434:	40012300 	.word	0x40012300

08000438 <ADC_Start_Polling>:



void ADC_Start_Polling(ADC_TypeDef *pADC, int channel)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	6039      	str	r1, [r7, #0]
	pADC->SQR3 |= (channel<<0);			// polling for 1 channel, keep 1 channel in the sequence at a time
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	431a      	orrs	r2, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	635a      	str	r2, [r3, #52]	; 0x34
	pADC->CR2 &= ~(1<<10);				// The EOC bit is set at the end of each sequence of regular conversions. Overrun detection is enabled only if DMA=1
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	689b      	ldr	r3, [r3, #8]
 8000452:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	609a      	str	r2, [r3, #8]
	pADC->CR2 |= (1<<30);				// start regular conversion
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	609a      	str	r2, [r3, #8]
	while ((pADC->SR & (1<<4)) == 0);	// wait until conversion starts
 8000466:	bf00      	nop
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f003 0310 	and.w	r3, r3, #16
 8000470:	2b00      	cmp	r3, #0
 8000472:	d0f9      	beq.n	8000468 <ADC_Start_Polling+0x30>
}
 8000474:	bf00      	nop
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr

08000482 <ADC_Read>:



uint32_t ADC_Read(ADC_TypeDef *pADC)
{
 8000482:	b480      	push	{r7}
 8000484:	b083      	sub	sp, #12
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
	return pADC->DR;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800048e:	4618      	mov	r0, r3
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
	...

0800049c <USART_init>:



/* Initializing UART */
void USART_init(USART_TypeDef *USART)
{
 800049c:	b480      	push	{r7}
 800049e:	b087      	sub	sp, #28
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	uint32_t USART_DIV, DIV_Mantissa, DIV_Fraction;

	if (USART == USART2)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4a22      	ldr	r2, [pc, #136]	; (8000530 <USART_init+0x94>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d11d      	bne.n	80004e8 <USART_init+0x4c>
	{
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;		// IO port A clock enable
 80004ac:	4b21      	ldr	r3, [pc, #132]	; (8000534 <USART_init+0x98>)
 80004ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b0:	4a20      	ldr	r2, [pc, #128]	; (8000534 <USART_init+0x98>)
 80004b2:	f043 0301 	orr.w	r3, r3, #1
 80004b6:	6313      	str	r3, [r2, #48]	; 0x30

		GPIOA->MODER |= GPIO_MODER_MODER2_1;		// alternate function for PA2
 80004b8:	4b1f      	ldr	r3, [pc, #124]	; (8000538 <USART_init+0x9c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a1e      	ldr	r2, [pc, #120]	; (8000538 <USART_init+0x9c>)
 80004be:	f043 0320 	orr.w	r3, r3, #32
 80004c2:	6013      	str	r3, [r2, #0]
		GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED2_1;	// high speed for PA2
 80004c4:	4b1c      	ldr	r3, [pc, #112]	; (8000538 <USART_init+0x9c>)
 80004c6:	689b      	ldr	r3, [r3, #8]
 80004c8:	4a1b      	ldr	r2, [pc, #108]	; (8000538 <USART_init+0x9c>)
 80004ca:	f043 0320 	orr.w	r3, r3, #32
 80004ce:	6093      	str	r3, [r2, #8]
		GPIOA->AFR[0] |= (7<<8);					// USART2 mode for PA2
 80004d0:	4b19      	ldr	r3, [pc, #100]	; (8000538 <USART_init+0x9c>)
 80004d2:	6a1b      	ldr	r3, [r3, #32]
 80004d4:	4a18      	ldr	r2, [pc, #96]	; (8000538 <USART_init+0x9c>)
 80004d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80004da:	6213      	str	r3, [r2, #32]
		/*
		 * PA2 - TX
		 * */

		RCC->APB1ENR |= RCC_APB1ENR_USART2EN; 		// USART2 clock enable
 80004dc:	4b15      	ldr	r3, [pc, #84]	; (8000534 <USART_init+0x98>)
 80004de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004e0:	4a14      	ldr	r2, [pc, #80]	; (8000534 <USART_init+0x98>)
 80004e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e6:	6413      	str	r3, [r2, #64]	; 0x40
	}

	USART->CR1 |= USART_CR1_TE; 					// transmit enable
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	f043 0208 	orr.w	r2, r3, #8
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	60da      	str	r2, [r3, #12]
	USART->CR1 |= USART_CR1_UE;						// USART enable
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	60da      	str	r2, [r3, #12]

	USART_DIV = f_PCLK / (baudrate * 16);
 8000500:	2308      	movs	r3, #8
 8000502:	617b      	str	r3, [r7, #20]
	DIV_Mantissa = USART_DIV;
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	613b      	str	r3, [r7, #16]
	DIV_Fraction = (USART_DIV - DIV_Mantissa) * 16;
 8000508:	697a      	ldr	r2, [r7, #20]
 800050a:	693b      	ldr	r3, [r7, #16]
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	011b      	lsls	r3, r3, #4
 8000510:	60fb      	str	r3, [r7, #12]
	USART->BRR |= (DIV_Mantissa<<4) | (DIV_Fraction);	// set baudrate
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	689a      	ldr	r2, [r3, #8]
 8000516:	693b      	ldr	r3, [r7, #16]
 8000518:	0119      	lsls	r1, r3, #4
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	430b      	orrs	r3, r1
 800051e:	431a      	orrs	r2, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	609a      	str	r2, [r3, #8]
}
 8000524:	bf00      	nop
 8000526:	371c      	adds	r7, #28
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	40004400 	.word	0x40004400
 8000534:	40023800 	.word	0x40023800
 8000538:	40020000 	.word	0x40020000

0800053c <USART_transmit>:



/* transmit data */
void USART_transmit(USART_TypeDef *USART, char *p)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
	while (*p != '\0')
 8000546:	e00e      	b.n	8000566 <USART_transmit+0x2a>
	{
		USART->DR = *p;											// load data
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	461a      	mov	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	605a      	str	r2, [r3, #4]
		while ((USART->SR & USART_SR_TC_Msk) != USART_SR_TC);	// wait until Transmission is complete
 8000552:	bf00      	nop
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800055c:	2b40      	cmp	r3, #64	; 0x40
 800055e:	d1f9      	bne.n	8000554 <USART_transmit+0x18>
		p++;
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	3301      	adds	r3, #1
 8000564:	603b      	str	r3, [r7, #0]
	while (*p != '\0')
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d1ec      	bne.n	8000548 <USART_transmit+0xc>
	}
}
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <main>:



/* MAIN */
int main()
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	SystemClock_config();
 8000580:	f7ff fee2 	bl	8000348 <SystemClock_config>
	GPIO_init();
 8000584:	f000 f83e 	bl	8000604 <GPIO_init>
	Timer_init(pTIM);
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <main+0x70>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff fe7f 	bl	8000290 <Timer_init>
	ADC_Init(pADC);
 8000592:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <main+0x74>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff ff0a 	bl	80003b0 <ADC_Init>
	USART_init(pUSART);
 800059c:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <main+0x78>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff ff7b 	bl	800049c <USART_init>

	while(1)
	{
		ADC_Start_Polling(pADC, 1);
 80005a6:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <main+0x74>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2101      	movs	r1, #1
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff ff43 	bl	8000438 <ADC_Start_Polling>
		ADC_data = ADC_Read(pADC);
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <main+0x74>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff ff63 	bl	8000482 <ADC_Read>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <main+0x7c>)
 80005c0:	6013      	str	r3, [r2, #0]
		sprintf(result, "adc value = %d\n", ADC_data);
 80005c2:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <main+0x7c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	461a      	mov	r2, r3
 80005c8:	490c      	ldr	r1, [pc, #48]	; (80005fc <main+0x80>)
 80005ca:	480d      	ldr	r0, [pc, #52]	; (8000600 <main+0x84>)
 80005cc:	f000 f8ba 	bl	8000744 <siprintf>

		send_data(result);
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <main+0x78>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	490a      	ldr	r1, [pc, #40]	; (8000600 <main+0x84>)
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ffb0 	bl	800053c <USART_transmit>
		delay_ms(1000);
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <main+0x70>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fe99 	bl	800031c <Timer_delay_ms>
	{
 80005ea:	e7dc      	b.n	80005a6 <main+0x2a>
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20000004 	.word	0x20000004
 80005f4:	20000008 	.word	0x20000008
 80005f8:	2000008c 	.word	0x2000008c
 80005fc:	08001038 	.word	0x08001038
 8000600:	20000090 	.word	0x20000090

08000604 <GPIO_init>:



/* Initializing GPIO */
void GPIO_init(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
	GPIOA->MODER |= (3<<2);				// analog for PA1
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <GPIO_init+0x28>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <GPIO_init+0x28>)
 800060e:	f043 030c 	orr.w	r3, r3, #12
 8000612:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= (2<<2);			// high speed for PA1
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <GPIO_init+0x28>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <GPIO_init+0x28>)
 800061a:	f043 0308 	orr.w	r3, r3, #8
 800061e:	6093      	str	r3, [r2, #8]
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40020000 	.word	0x40020000

08000630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <_sbrk+0x5c>)
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <_sbrk+0x60>)
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000644:	4b13      	ldr	r3, [pc, #76]	; (8000694 <_sbrk+0x64>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d102      	bne.n	8000652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <_sbrk+0x64>)
 800064e:	4a12      	ldr	r2, [pc, #72]	; (8000698 <_sbrk+0x68>)
 8000650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <_sbrk+0x64>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	693a      	ldr	r2, [r7, #16]
 800065c:	429a      	cmp	r2, r3
 800065e:	d207      	bcs.n	8000670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000660:	f000 f846 	bl	80006f0 <__errno>
 8000664:	4603      	mov	r3, r0
 8000666:	220c      	movs	r2, #12
 8000668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800066a:	f04f 33ff 	mov.w	r3, #4294967295
 800066e:	e009      	b.n	8000684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <_sbrk+0x64>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000676:	4b07      	ldr	r3, [pc, #28]	; (8000694 <_sbrk+0x64>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4413      	add	r3, r2
 800067e:	4a05      	ldr	r2, [pc, #20]	; (8000694 <_sbrk+0x64>)
 8000680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000682:	68fb      	ldr	r3, [r7, #12]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20020000 	.word	0x20020000
 8000690:	00000400 	.word	0x00000400
 8000694:	200000a4 	.word	0x200000a4
 8000698:	200000b8 	.word	0x200000b8

0800069c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800069e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006a6:	490d      	ldr	r1, [pc, #52]	; (80006dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a8:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <LoopForever+0xe>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006bc:	4c0a      	ldr	r4, [pc, #40]	; (80006e8 <LoopForever+0x16>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ca:	f000 f817 	bl	80006fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ce:	f7ff ff55 	bl	800057c <main>

080006d2 <LoopForever>:

LoopForever:
  b LoopForever
 80006d2:	e7fe      	b.n	80006d2 <LoopForever>
  ldr   r0, =_estack
 80006d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006dc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006e0:	08001084 	.word	0x08001084
  ldr r2, =_sbss
 80006e4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006e8:	200000b8 	.word	0x200000b8

080006ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC_IRQHandler>
	...

080006f0 <__errno>:
 80006f0:	4b01      	ldr	r3, [pc, #4]	; (80006f8 <__errno+0x8>)
 80006f2:	6818      	ldr	r0, [r3, #0]
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	2000000c 	.word	0x2000000c

080006fc <__libc_init_array>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	4d0d      	ldr	r5, [pc, #52]	; (8000734 <__libc_init_array+0x38>)
 8000700:	4c0d      	ldr	r4, [pc, #52]	; (8000738 <__libc_init_array+0x3c>)
 8000702:	1b64      	subs	r4, r4, r5
 8000704:	10a4      	asrs	r4, r4, #2
 8000706:	2600      	movs	r6, #0
 8000708:	42a6      	cmp	r6, r4
 800070a:	d109      	bne.n	8000720 <__libc_init_array+0x24>
 800070c:	4d0b      	ldr	r5, [pc, #44]	; (800073c <__libc_init_array+0x40>)
 800070e:	4c0c      	ldr	r4, [pc, #48]	; (8000740 <__libc_init_array+0x44>)
 8000710:	f000 fc86 	bl	8001020 <_init>
 8000714:	1b64      	subs	r4, r4, r5
 8000716:	10a4      	asrs	r4, r4, #2
 8000718:	2600      	movs	r6, #0
 800071a:	42a6      	cmp	r6, r4
 800071c:	d105      	bne.n	800072a <__libc_init_array+0x2e>
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f855 3b04 	ldr.w	r3, [r5], #4
 8000724:	4798      	blx	r3
 8000726:	3601      	adds	r6, #1
 8000728:	e7ee      	b.n	8000708 <__libc_init_array+0xc>
 800072a:	f855 3b04 	ldr.w	r3, [r5], #4
 800072e:	4798      	blx	r3
 8000730:	3601      	adds	r6, #1
 8000732:	e7f2      	b.n	800071a <__libc_init_array+0x1e>
 8000734:	0800107c 	.word	0x0800107c
 8000738:	0800107c 	.word	0x0800107c
 800073c:	0800107c 	.word	0x0800107c
 8000740:	08001080 	.word	0x08001080

08000744 <siprintf>:
 8000744:	b40e      	push	{r1, r2, r3}
 8000746:	b500      	push	{lr}
 8000748:	b09c      	sub	sp, #112	; 0x70
 800074a:	ab1d      	add	r3, sp, #116	; 0x74
 800074c:	9002      	str	r0, [sp, #8]
 800074e:	9006      	str	r0, [sp, #24]
 8000750:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000754:	4809      	ldr	r0, [pc, #36]	; (800077c <siprintf+0x38>)
 8000756:	9107      	str	r1, [sp, #28]
 8000758:	9104      	str	r1, [sp, #16]
 800075a:	4909      	ldr	r1, [pc, #36]	; (8000780 <siprintf+0x3c>)
 800075c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000760:	9105      	str	r1, [sp, #20]
 8000762:	6800      	ldr	r0, [r0, #0]
 8000764:	9301      	str	r3, [sp, #4]
 8000766:	a902      	add	r1, sp, #8
 8000768:	f000 f868 	bl	800083c <_svfiprintf_r>
 800076c:	9b02      	ldr	r3, [sp, #8]
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
 8000772:	b01c      	add	sp, #112	; 0x70
 8000774:	f85d eb04 	ldr.w	lr, [sp], #4
 8000778:	b003      	add	sp, #12
 800077a:	4770      	bx	lr
 800077c:	2000000c 	.word	0x2000000c
 8000780:	ffff0208 	.word	0xffff0208

08000784 <__ssputs_r>:
 8000784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000788:	688e      	ldr	r6, [r1, #8]
 800078a:	429e      	cmp	r6, r3
 800078c:	4682      	mov	sl, r0
 800078e:	460c      	mov	r4, r1
 8000790:	4690      	mov	r8, r2
 8000792:	461f      	mov	r7, r3
 8000794:	d838      	bhi.n	8000808 <__ssputs_r+0x84>
 8000796:	898a      	ldrh	r2, [r1, #12]
 8000798:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800079c:	d032      	beq.n	8000804 <__ssputs_r+0x80>
 800079e:	6825      	ldr	r5, [r4, #0]
 80007a0:	6909      	ldr	r1, [r1, #16]
 80007a2:	eba5 0901 	sub.w	r9, r5, r1
 80007a6:	6965      	ldr	r5, [r4, #20]
 80007a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80007ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80007b0:	3301      	adds	r3, #1
 80007b2:	444b      	add	r3, r9
 80007b4:	106d      	asrs	r5, r5, #1
 80007b6:	429d      	cmp	r5, r3
 80007b8:	bf38      	it	cc
 80007ba:	461d      	movcc	r5, r3
 80007bc:	0553      	lsls	r3, r2, #21
 80007be:	d531      	bpl.n	8000824 <__ssputs_r+0xa0>
 80007c0:	4629      	mov	r1, r5
 80007c2:	f000 fb63 	bl	8000e8c <_malloc_r>
 80007c6:	4606      	mov	r6, r0
 80007c8:	b950      	cbnz	r0, 80007e0 <__ssputs_r+0x5c>
 80007ca:	230c      	movs	r3, #12
 80007cc:	f8ca 3000 	str.w	r3, [sl]
 80007d0:	89a3      	ldrh	r3, [r4, #12]
 80007d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d6:	81a3      	strh	r3, [r4, #12]
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e0:	6921      	ldr	r1, [r4, #16]
 80007e2:	464a      	mov	r2, r9
 80007e4:	f000 fabe 	bl	8000d64 <memcpy>
 80007e8:	89a3      	ldrh	r3, [r4, #12]
 80007ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80007ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f2:	81a3      	strh	r3, [r4, #12]
 80007f4:	6126      	str	r6, [r4, #16]
 80007f6:	6165      	str	r5, [r4, #20]
 80007f8:	444e      	add	r6, r9
 80007fa:	eba5 0509 	sub.w	r5, r5, r9
 80007fe:	6026      	str	r6, [r4, #0]
 8000800:	60a5      	str	r5, [r4, #8]
 8000802:	463e      	mov	r6, r7
 8000804:	42be      	cmp	r6, r7
 8000806:	d900      	bls.n	800080a <__ssputs_r+0x86>
 8000808:	463e      	mov	r6, r7
 800080a:	6820      	ldr	r0, [r4, #0]
 800080c:	4632      	mov	r2, r6
 800080e:	4641      	mov	r1, r8
 8000810:	f000 fab6 	bl	8000d80 <memmove>
 8000814:	68a3      	ldr	r3, [r4, #8]
 8000816:	1b9b      	subs	r3, r3, r6
 8000818:	60a3      	str	r3, [r4, #8]
 800081a:	6823      	ldr	r3, [r4, #0]
 800081c:	4433      	add	r3, r6
 800081e:	6023      	str	r3, [r4, #0]
 8000820:	2000      	movs	r0, #0
 8000822:	e7db      	b.n	80007dc <__ssputs_r+0x58>
 8000824:	462a      	mov	r2, r5
 8000826:	f000 fba5 	bl	8000f74 <_realloc_r>
 800082a:	4606      	mov	r6, r0
 800082c:	2800      	cmp	r0, #0
 800082e:	d1e1      	bne.n	80007f4 <__ssputs_r+0x70>
 8000830:	6921      	ldr	r1, [r4, #16]
 8000832:	4650      	mov	r0, sl
 8000834:	f000 fabe 	bl	8000db4 <_free_r>
 8000838:	e7c7      	b.n	80007ca <__ssputs_r+0x46>
	...

0800083c <_svfiprintf_r>:
 800083c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000840:	4698      	mov	r8, r3
 8000842:	898b      	ldrh	r3, [r1, #12]
 8000844:	061b      	lsls	r3, r3, #24
 8000846:	b09d      	sub	sp, #116	; 0x74
 8000848:	4607      	mov	r7, r0
 800084a:	460d      	mov	r5, r1
 800084c:	4614      	mov	r4, r2
 800084e:	d50e      	bpl.n	800086e <_svfiprintf_r+0x32>
 8000850:	690b      	ldr	r3, [r1, #16]
 8000852:	b963      	cbnz	r3, 800086e <_svfiprintf_r+0x32>
 8000854:	2140      	movs	r1, #64	; 0x40
 8000856:	f000 fb19 	bl	8000e8c <_malloc_r>
 800085a:	6028      	str	r0, [r5, #0]
 800085c:	6128      	str	r0, [r5, #16]
 800085e:	b920      	cbnz	r0, 800086a <_svfiprintf_r+0x2e>
 8000860:	230c      	movs	r3, #12
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	e0d1      	b.n	8000a0e <_svfiprintf_r+0x1d2>
 800086a:	2340      	movs	r3, #64	; 0x40
 800086c:	616b      	str	r3, [r5, #20]
 800086e:	2300      	movs	r3, #0
 8000870:	9309      	str	r3, [sp, #36]	; 0x24
 8000872:	2320      	movs	r3, #32
 8000874:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000878:	f8cd 800c 	str.w	r8, [sp, #12]
 800087c:	2330      	movs	r3, #48	; 0x30
 800087e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000a28 <_svfiprintf_r+0x1ec>
 8000882:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000886:	f04f 0901 	mov.w	r9, #1
 800088a:	4623      	mov	r3, r4
 800088c:	469a      	mov	sl, r3
 800088e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000892:	b10a      	cbz	r2, 8000898 <_svfiprintf_r+0x5c>
 8000894:	2a25      	cmp	r2, #37	; 0x25
 8000896:	d1f9      	bne.n	800088c <_svfiprintf_r+0x50>
 8000898:	ebba 0b04 	subs.w	fp, sl, r4
 800089c:	d00b      	beq.n	80008b6 <_svfiprintf_r+0x7a>
 800089e:	465b      	mov	r3, fp
 80008a0:	4622      	mov	r2, r4
 80008a2:	4629      	mov	r1, r5
 80008a4:	4638      	mov	r0, r7
 80008a6:	f7ff ff6d 	bl	8000784 <__ssputs_r>
 80008aa:	3001      	adds	r0, #1
 80008ac:	f000 80aa 	beq.w	8000a04 <_svfiprintf_r+0x1c8>
 80008b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80008b2:	445a      	add	r2, fp
 80008b4:	9209      	str	r2, [sp, #36]	; 0x24
 80008b6:	f89a 3000 	ldrb.w	r3, [sl]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	f000 80a2 	beq.w	8000a04 <_svfiprintf_r+0x1c8>
 80008c0:	2300      	movs	r3, #0
 80008c2:	f04f 32ff 	mov.w	r2, #4294967295
 80008c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80008ca:	f10a 0a01 	add.w	sl, sl, #1
 80008ce:	9304      	str	r3, [sp, #16]
 80008d0:	9307      	str	r3, [sp, #28]
 80008d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80008d6:	931a      	str	r3, [sp, #104]	; 0x68
 80008d8:	4654      	mov	r4, sl
 80008da:	2205      	movs	r2, #5
 80008dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80008e0:	4851      	ldr	r0, [pc, #324]	; (8000a28 <_svfiprintf_r+0x1ec>)
 80008e2:	f7ff fc85 	bl	80001f0 <memchr>
 80008e6:	9a04      	ldr	r2, [sp, #16]
 80008e8:	b9d8      	cbnz	r0, 8000922 <_svfiprintf_r+0xe6>
 80008ea:	06d0      	lsls	r0, r2, #27
 80008ec:	bf44      	itt	mi
 80008ee:	2320      	movmi	r3, #32
 80008f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80008f4:	0711      	lsls	r1, r2, #28
 80008f6:	bf44      	itt	mi
 80008f8:	232b      	movmi	r3, #43	; 0x2b
 80008fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80008fe:	f89a 3000 	ldrb.w	r3, [sl]
 8000902:	2b2a      	cmp	r3, #42	; 0x2a
 8000904:	d015      	beq.n	8000932 <_svfiprintf_r+0xf6>
 8000906:	9a07      	ldr	r2, [sp, #28]
 8000908:	4654      	mov	r4, sl
 800090a:	2000      	movs	r0, #0
 800090c:	f04f 0c0a 	mov.w	ip, #10
 8000910:	4621      	mov	r1, r4
 8000912:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000916:	3b30      	subs	r3, #48	; 0x30
 8000918:	2b09      	cmp	r3, #9
 800091a:	d94e      	bls.n	80009ba <_svfiprintf_r+0x17e>
 800091c:	b1b0      	cbz	r0, 800094c <_svfiprintf_r+0x110>
 800091e:	9207      	str	r2, [sp, #28]
 8000920:	e014      	b.n	800094c <_svfiprintf_r+0x110>
 8000922:	eba0 0308 	sub.w	r3, r0, r8
 8000926:	fa09 f303 	lsl.w	r3, r9, r3
 800092a:	4313      	orrs	r3, r2
 800092c:	9304      	str	r3, [sp, #16]
 800092e:	46a2      	mov	sl, r4
 8000930:	e7d2      	b.n	80008d8 <_svfiprintf_r+0x9c>
 8000932:	9b03      	ldr	r3, [sp, #12]
 8000934:	1d19      	adds	r1, r3, #4
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	9103      	str	r1, [sp, #12]
 800093a:	2b00      	cmp	r3, #0
 800093c:	bfbb      	ittet	lt
 800093e:	425b      	neglt	r3, r3
 8000940:	f042 0202 	orrlt.w	r2, r2, #2
 8000944:	9307      	strge	r3, [sp, #28]
 8000946:	9307      	strlt	r3, [sp, #28]
 8000948:	bfb8      	it	lt
 800094a:	9204      	strlt	r2, [sp, #16]
 800094c:	7823      	ldrb	r3, [r4, #0]
 800094e:	2b2e      	cmp	r3, #46	; 0x2e
 8000950:	d10c      	bne.n	800096c <_svfiprintf_r+0x130>
 8000952:	7863      	ldrb	r3, [r4, #1]
 8000954:	2b2a      	cmp	r3, #42	; 0x2a
 8000956:	d135      	bne.n	80009c4 <_svfiprintf_r+0x188>
 8000958:	9b03      	ldr	r3, [sp, #12]
 800095a:	1d1a      	adds	r2, r3, #4
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	9203      	str	r2, [sp, #12]
 8000960:	2b00      	cmp	r3, #0
 8000962:	bfb8      	it	lt
 8000964:	f04f 33ff 	movlt.w	r3, #4294967295
 8000968:	3402      	adds	r4, #2
 800096a:	9305      	str	r3, [sp, #20]
 800096c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000a38 <_svfiprintf_r+0x1fc>
 8000970:	7821      	ldrb	r1, [r4, #0]
 8000972:	2203      	movs	r2, #3
 8000974:	4650      	mov	r0, sl
 8000976:	f7ff fc3b 	bl	80001f0 <memchr>
 800097a:	b140      	cbz	r0, 800098e <_svfiprintf_r+0x152>
 800097c:	2340      	movs	r3, #64	; 0x40
 800097e:	eba0 000a 	sub.w	r0, r0, sl
 8000982:	fa03 f000 	lsl.w	r0, r3, r0
 8000986:	9b04      	ldr	r3, [sp, #16]
 8000988:	4303      	orrs	r3, r0
 800098a:	3401      	adds	r4, #1
 800098c:	9304      	str	r3, [sp, #16]
 800098e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000992:	4826      	ldr	r0, [pc, #152]	; (8000a2c <_svfiprintf_r+0x1f0>)
 8000994:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000998:	2206      	movs	r2, #6
 800099a:	f7ff fc29 	bl	80001f0 <memchr>
 800099e:	2800      	cmp	r0, #0
 80009a0:	d038      	beq.n	8000a14 <_svfiprintf_r+0x1d8>
 80009a2:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <_svfiprintf_r+0x1f4>)
 80009a4:	bb1b      	cbnz	r3, 80009ee <_svfiprintf_r+0x1b2>
 80009a6:	9b03      	ldr	r3, [sp, #12]
 80009a8:	3307      	adds	r3, #7
 80009aa:	f023 0307 	bic.w	r3, r3, #7
 80009ae:	3308      	adds	r3, #8
 80009b0:	9303      	str	r3, [sp, #12]
 80009b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80009b4:	4433      	add	r3, r6
 80009b6:	9309      	str	r3, [sp, #36]	; 0x24
 80009b8:	e767      	b.n	800088a <_svfiprintf_r+0x4e>
 80009ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80009be:	460c      	mov	r4, r1
 80009c0:	2001      	movs	r0, #1
 80009c2:	e7a5      	b.n	8000910 <_svfiprintf_r+0xd4>
 80009c4:	2300      	movs	r3, #0
 80009c6:	3401      	adds	r4, #1
 80009c8:	9305      	str	r3, [sp, #20]
 80009ca:	4619      	mov	r1, r3
 80009cc:	f04f 0c0a 	mov.w	ip, #10
 80009d0:	4620      	mov	r0, r4
 80009d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80009d6:	3a30      	subs	r2, #48	; 0x30
 80009d8:	2a09      	cmp	r2, #9
 80009da:	d903      	bls.n	80009e4 <_svfiprintf_r+0x1a8>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d0c5      	beq.n	800096c <_svfiprintf_r+0x130>
 80009e0:	9105      	str	r1, [sp, #20]
 80009e2:	e7c3      	b.n	800096c <_svfiprintf_r+0x130>
 80009e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80009e8:	4604      	mov	r4, r0
 80009ea:	2301      	movs	r3, #1
 80009ec:	e7f0      	b.n	80009d0 <_svfiprintf_r+0x194>
 80009ee:	ab03      	add	r3, sp, #12
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	462a      	mov	r2, r5
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <_svfiprintf_r+0x1f8>)
 80009f6:	a904      	add	r1, sp, #16
 80009f8:	4638      	mov	r0, r7
 80009fa:	f3af 8000 	nop.w
 80009fe:	1c42      	adds	r2, r0, #1
 8000a00:	4606      	mov	r6, r0
 8000a02:	d1d6      	bne.n	80009b2 <_svfiprintf_r+0x176>
 8000a04:	89ab      	ldrh	r3, [r5, #12]
 8000a06:	065b      	lsls	r3, r3, #25
 8000a08:	f53f af2c 	bmi.w	8000864 <_svfiprintf_r+0x28>
 8000a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000a0e:	b01d      	add	sp, #116	; 0x74
 8000a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a14:	ab03      	add	r3, sp, #12
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	462a      	mov	r2, r5
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <_svfiprintf_r+0x1f8>)
 8000a1c:	a904      	add	r1, sp, #16
 8000a1e:	4638      	mov	r0, r7
 8000a20:	f000 f87a 	bl	8000b18 <_printf_i>
 8000a24:	e7eb      	b.n	80009fe <_svfiprintf_r+0x1c2>
 8000a26:	bf00      	nop
 8000a28:	08001048 	.word	0x08001048
 8000a2c:	08001052 	.word	0x08001052
 8000a30:	00000000 	.word	0x00000000
 8000a34:	08000785 	.word	0x08000785
 8000a38:	0800104e 	.word	0x0800104e

08000a3c <_printf_common>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	4616      	mov	r6, r2
 8000a42:	4699      	mov	r9, r3
 8000a44:	688a      	ldr	r2, [r1, #8]
 8000a46:	690b      	ldr	r3, [r1, #16]
 8000a48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	bfb8      	it	lt
 8000a50:	4613      	movlt	r3, r2
 8000a52:	6033      	str	r3, [r6, #0]
 8000a54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000a58:	4607      	mov	r7, r0
 8000a5a:	460c      	mov	r4, r1
 8000a5c:	b10a      	cbz	r2, 8000a62 <_printf_common+0x26>
 8000a5e:	3301      	adds	r3, #1
 8000a60:	6033      	str	r3, [r6, #0]
 8000a62:	6823      	ldr	r3, [r4, #0]
 8000a64:	0699      	lsls	r1, r3, #26
 8000a66:	bf42      	ittt	mi
 8000a68:	6833      	ldrmi	r3, [r6, #0]
 8000a6a:	3302      	addmi	r3, #2
 8000a6c:	6033      	strmi	r3, [r6, #0]
 8000a6e:	6825      	ldr	r5, [r4, #0]
 8000a70:	f015 0506 	ands.w	r5, r5, #6
 8000a74:	d106      	bne.n	8000a84 <_printf_common+0x48>
 8000a76:	f104 0a19 	add.w	sl, r4, #25
 8000a7a:	68e3      	ldr	r3, [r4, #12]
 8000a7c:	6832      	ldr	r2, [r6, #0]
 8000a7e:	1a9b      	subs	r3, r3, r2
 8000a80:	42ab      	cmp	r3, r5
 8000a82:	dc26      	bgt.n	8000ad2 <_printf_common+0x96>
 8000a84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000a88:	1e13      	subs	r3, r2, #0
 8000a8a:	6822      	ldr	r2, [r4, #0]
 8000a8c:	bf18      	it	ne
 8000a8e:	2301      	movne	r3, #1
 8000a90:	0692      	lsls	r2, r2, #26
 8000a92:	d42b      	bmi.n	8000aec <_printf_common+0xb0>
 8000a94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000a98:	4649      	mov	r1, r9
 8000a9a:	4638      	mov	r0, r7
 8000a9c:	47c0      	blx	r8
 8000a9e:	3001      	adds	r0, #1
 8000aa0:	d01e      	beq.n	8000ae0 <_printf_common+0xa4>
 8000aa2:	6823      	ldr	r3, [r4, #0]
 8000aa4:	68e5      	ldr	r5, [r4, #12]
 8000aa6:	6832      	ldr	r2, [r6, #0]
 8000aa8:	f003 0306 	and.w	r3, r3, #6
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	bf08      	it	eq
 8000ab0:	1aad      	subeq	r5, r5, r2
 8000ab2:	68a3      	ldr	r3, [r4, #8]
 8000ab4:	6922      	ldr	r2, [r4, #16]
 8000ab6:	bf0c      	ite	eq
 8000ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000abc:	2500      	movne	r5, #0
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	bfc4      	itt	gt
 8000ac2:	1a9b      	subgt	r3, r3, r2
 8000ac4:	18ed      	addgt	r5, r5, r3
 8000ac6:	2600      	movs	r6, #0
 8000ac8:	341a      	adds	r4, #26
 8000aca:	42b5      	cmp	r5, r6
 8000acc:	d11a      	bne.n	8000b04 <_printf_common+0xc8>
 8000ace:	2000      	movs	r0, #0
 8000ad0:	e008      	b.n	8000ae4 <_printf_common+0xa8>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	4652      	mov	r2, sl
 8000ad6:	4649      	mov	r1, r9
 8000ad8:	4638      	mov	r0, r7
 8000ada:	47c0      	blx	r8
 8000adc:	3001      	adds	r0, #1
 8000ade:	d103      	bne.n	8000ae8 <_printf_common+0xac>
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae8:	3501      	adds	r5, #1
 8000aea:	e7c6      	b.n	8000a7a <_printf_common+0x3e>
 8000aec:	18e1      	adds	r1, r4, r3
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	2030      	movs	r0, #48	; 0x30
 8000af2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000af6:	4422      	add	r2, r4
 8000af8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000afc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000b00:	3302      	adds	r3, #2
 8000b02:	e7c7      	b.n	8000a94 <_printf_common+0x58>
 8000b04:	2301      	movs	r3, #1
 8000b06:	4622      	mov	r2, r4
 8000b08:	4649      	mov	r1, r9
 8000b0a:	4638      	mov	r0, r7
 8000b0c:	47c0      	blx	r8
 8000b0e:	3001      	adds	r0, #1
 8000b10:	d0e6      	beq.n	8000ae0 <_printf_common+0xa4>
 8000b12:	3601      	adds	r6, #1
 8000b14:	e7d9      	b.n	8000aca <_printf_common+0x8e>
	...

08000b18 <_printf_i>:
 8000b18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000b1c:	7e0f      	ldrb	r7, [r1, #24]
 8000b1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000b20:	2f78      	cmp	r7, #120	; 0x78
 8000b22:	4691      	mov	r9, r2
 8000b24:	4680      	mov	r8, r0
 8000b26:	460c      	mov	r4, r1
 8000b28:	469a      	mov	sl, r3
 8000b2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000b2e:	d807      	bhi.n	8000b40 <_printf_i+0x28>
 8000b30:	2f62      	cmp	r7, #98	; 0x62
 8000b32:	d80a      	bhi.n	8000b4a <_printf_i+0x32>
 8000b34:	2f00      	cmp	r7, #0
 8000b36:	f000 80d8 	beq.w	8000cea <_printf_i+0x1d2>
 8000b3a:	2f58      	cmp	r7, #88	; 0x58
 8000b3c:	f000 80a3 	beq.w	8000c86 <_printf_i+0x16e>
 8000b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000b44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000b48:	e03a      	b.n	8000bc0 <_printf_i+0xa8>
 8000b4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000b4e:	2b15      	cmp	r3, #21
 8000b50:	d8f6      	bhi.n	8000b40 <_printf_i+0x28>
 8000b52:	a101      	add	r1, pc, #4	; (adr r1, 8000b58 <_printf_i+0x40>)
 8000b54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000b58:	08000bb1 	.word	0x08000bb1
 8000b5c:	08000bc5 	.word	0x08000bc5
 8000b60:	08000b41 	.word	0x08000b41
 8000b64:	08000b41 	.word	0x08000b41
 8000b68:	08000b41 	.word	0x08000b41
 8000b6c:	08000b41 	.word	0x08000b41
 8000b70:	08000bc5 	.word	0x08000bc5
 8000b74:	08000b41 	.word	0x08000b41
 8000b78:	08000b41 	.word	0x08000b41
 8000b7c:	08000b41 	.word	0x08000b41
 8000b80:	08000b41 	.word	0x08000b41
 8000b84:	08000cd1 	.word	0x08000cd1
 8000b88:	08000bf5 	.word	0x08000bf5
 8000b8c:	08000cb3 	.word	0x08000cb3
 8000b90:	08000b41 	.word	0x08000b41
 8000b94:	08000b41 	.word	0x08000b41
 8000b98:	08000cf3 	.word	0x08000cf3
 8000b9c:	08000b41 	.word	0x08000b41
 8000ba0:	08000bf5 	.word	0x08000bf5
 8000ba4:	08000b41 	.word	0x08000b41
 8000ba8:	08000b41 	.word	0x08000b41
 8000bac:	08000cbb 	.word	0x08000cbb
 8000bb0:	682b      	ldr	r3, [r5, #0]
 8000bb2:	1d1a      	adds	r2, r3, #4
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	602a      	str	r2, [r5, #0]
 8000bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000bbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e0a3      	b.n	8000d0c <_printf_i+0x1f4>
 8000bc4:	6820      	ldr	r0, [r4, #0]
 8000bc6:	6829      	ldr	r1, [r5, #0]
 8000bc8:	0606      	lsls	r6, r0, #24
 8000bca:	f101 0304 	add.w	r3, r1, #4
 8000bce:	d50a      	bpl.n	8000be6 <_printf_i+0xce>
 8000bd0:	680e      	ldr	r6, [r1, #0]
 8000bd2:	602b      	str	r3, [r5, #0]
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	da03      	bge.n	8000be0 <_printf_i+0xc8>
 8000bd8:	232d      	movs	r3, #45	; 0x2d
 8000bda:	4276      	negs	r6, r6
 8000bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000be0:	485e      	ldr	r0, [pc, #376]	; (8000d5c <_printf_i+0x244>)
 8000be2:	230a      	movs	r3, #10
 8000be4:	e019      	b.n	8000c1a <_printf_i+0x102>
 8000be6:	680e      	ldr	r6, [r1, #0]
 8000be8:	602b      	str	r3, [r5, #0]
 8000bea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000bee:	bf18      	it	ne
 8000bf0:	b236      	sxthne	r6, r6
 8000bf2:	e7ef      	b.n	8000bd4 <_printf_i+0xbc>
 8000bf4:	682b      	ldr	r3, [r5, #0]
 8000bf6:	6820      	ldr	r0, [r4, #0]
 8000bf8:	1d19      	adds	r1, r3, #4
 8000bfa:	6029      	str	r1, [r5, #0]
 8000bfc:	0601      	lsls	r1, r0, #24
 8000bfe:	d501      	bpl.n	8000c04 <_printf_i+0xec>
 8000c00:	681e      	ldr	r6, [r3, #0]
 8000c02:	e002      	b.n	8000c0a <_printf_i+0xf2>
 8000c04:	0646      	lsls	r6, r0, #25
 8000c06:	d5fb      	bpl.n	8000c00 <_printf_i+0xe8>
 8000c08:	881e      	ldrh	r6, [r3, #0]
 8000c0a:	4854      	ldr	r0, [pc, #336]	; (8000d5c <_printf_i+0x244>)
 8000c0c:	2f6f      	cmp	r7, #111	; 0x6f
 8000c0e:	bf0c      	ite	eq
 8000c10:	2308      	moveq	r3, #8
 8000c12:	230a      	movne	r3, #10
 8000c14:	2100      	movs	r1, #0
 8000c16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000c1a:	6865      	ldr	r5, [r4, #4]
 8000c1c:	60a5      	str	r5, [r4, #8]
 8000c1e:	2d00      	cmp	r5, #0
 8000c20:	bfa2      	ittt	ge
 8000c22:	6821      	ldrge	r1, [r4, #0]
 8000c24:	f021 0104 	bicge.w	r1, r1, #4
 8000c28:	6021      	strge	r1, [r4, #0]
 8000c2a:	b90e      	cbnz	r6, 8000c30 <_printf_i+0x118>
 8000c2c:	2d00      	cmp	r5, #0
 8000c2e:	d04d      	beq.n	8000ccc <_printf_i+0x1b4>
 8000c30:	4615      	mov	r5, r2
 8000c32:	fbb6 f1f3 	udiv	r1, r6, r3
 8000c36:	fb03 6711 	mls	r7, r3, r1, r6
 8000c3a:	5dc7      	ldrb	r7, [r0, r7]
 8000c3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000c40:	4637      	mov	r7, r6
 8000c42:	42bb      	cmp	r3, r7
 8000c44:	460e      	mov	r6, r1
 8000c46:	d9f4      	bls.n	8000c32 <_printf_i+0x11a>
 8000c48:	2b08      	cmp	r3, #8
 8000c4a:	d10b      	bne.n	8000c64 <_printf_i+0x14c>
 8000c4c:	6823      	ldr	r3, [r4, #0]
 8000c4e:	07de      	lsls	r6, r3, #31
 8000c50:	d508      	bpl.n	8000c64 <_printf_i+0x14c>
 8000c52:	6923      	ldr	r3, [r4, #16]
 8000c54:	6861      	ldr	r1, [r4, #4]
 8000c56:	4299      	cmp	r1, r3
 8000c58:	bfde      	ittt	le
 8000c5a:	2330      	movle	r3, #48	; 0x30
 8000c5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000c60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000c64:	1b52      	subs	r2, r2, r5
 8000c66:	6122      	str	r2, [r4, #16]
 8000c68:	f8cd a000 	str.w	sl, [sp]
 8000c6c:	464b      	mov	r3, r9
 8000c6e:	aa03      	add	r2, sp, #12
 8000c70:	4621      	mov	r1, r4
 8000c72:	4640      	mov	r0, r8
 8000c74:	f7ff fee2 	bl	8000a3c <_printf_common>
 8000c78:	3001      	adds	r0, #1
 8000c7a:	d14c      	bne.n	8000d16 <_printf_i+0x1fe>
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	b004      	add	sp, #16
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	4835      	ldr	r0, [pc, #212]	; (8000d5c <_printf_i+0x244>)
 8000c88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000c8c:	6829      	ldr	r1, [r5, #0]
 8000c8e:	6823      	ldr	r3, [r4, #0]
 8000c90:	f851 6b04 	ldr.w	r6, [r1], #4
 8000c94:	6029      	str	r1, [r5, #0]
 8000c96:	061d      	lsls	r5, r3, #24
 8000c98:	d514      	bpl.n	8000cc4 <_printf_i+0x1ac>
 8000c9a:	07df      	lsls	r7, r3, #31
 8000c9c:	bf44      	itt	mi
 8000c9e:	f043 0320 	orrmi.w	r3, r3, #32
 8000ca2:	6023      	strmi	r3, [r4, #0]
 8000ca4:	b91e      	cbnz	r6, 8000cae <_printf_i+0x196>
 8000ca6:	6823      	ldr	r3, [r4, #0]
 8000ca8:	f023 0320 	bic.w	r3, r3, #32
 8000cac:	6023      	str	r3, [r4, #0]
 8000cae:	2310      	movs	r3, #16
 8000cb0:	e7b0      	b.n	8000c14 <_printf_i+0xfc>
 8000cb2:	6823      	ldr	r3, [r4, #0]
 8000cb4:	f043 0320 	orr.w	r3, r3, #32
 8000cb8:	6023      	str	r3, [r4, #0]
 8000cba:	2378      	movs	r3, #120	; 0x78
 8000cbc:	4828      	ldr	r0, [pc, #160]	; (8000d60 <_printf_i+0x248>)
 8000cbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000cc2:	e7e3      	b.n	8000c8c <_printf_i+0x174>
 8000cc4:	0659      	lsls	r1, r3, #25
 8000cc6:	bf48      	it	mi
 8000cc8:	b2b6      	uxthmi	r6, r6
 8000cca:	e7e6      	b.n	8000c9a <_printf_i+0x182>
 8000ccc:	4615      	mov	r5, r2
 8000cce:	e7bb      	b.n	8000c48 <_printf_i+0x130>
 8000cd0:	682b      	ldr	r3, [r5, #0]
 8000cd2:	6826      	ldr	r6, [r4, #0]
 8000cd4:	6961      	ldr	r1, [r4, #20]
 8000cd6:	1d18      	adds	r0, r3, #4
 8000cd8:	6028      	str	r0, [r5, #0]
 8000cda:	0635      	lsls	r5, r6, #24
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	d501      	bpl.n	8000ce4 <_printf_i+0x1cc>
 8000ce0:	6019      	str	r1, [r3, #0]
 8000ce2:	e002      	b.n	8000cea <_printf_i+0x1d2>
 8000ce4:	0670      	lsls	r0, r6, #25
 8000ce6:	d5fb      	bpl.n	8000ce0 <_printf_i+0x1c8>
 8000ce8:	8019      	strh	r1, [r3, #0]
 8000cea:	2300      	movs	r3, #0
 8000cec:	6123      	str	r3, [r4, #16]
 8000cee:	4615      	mov	r5, r2
 8000cf0:	e7ba      	b.n	8000c68 <_printf_i+0x150>
 8000cf2:	682b      	ldr	r3, [r5, #0]
 8000cf4:	1d1a      	adds	r2, r3, #4
 8000cf6:	602a      	str	r2, [r5, #0]
 8000cf8:	681d      	ldr	r5, [r3, #0]
 8000cfa:	6862      	ldr	r2, [r4, #4]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4628      	mov	r0, r5
 8000d00:	f7ff fa76 	bl	80001f0 <memchr>
 8000d04:	b108      	cbz	r0, 8000d0a <_printf_i+0x1f2>
 8000d06:	1b40      	subs	r0, r0, r5
 8000d08:	6060      	str	r0, [r4, #4]
 8000d0a:	6863      	ldr	r3, [r4, #4]
 8000d0c:	6123      	str	r3, [r4, #16]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000d14:	e7a8      	b.n	8000c68 <_printf_i+0x150>
 8000d16:	6923      	ldr	r3, [r4, #16]
 8000d18:	462a      	mov	r2, r5
 8000d1a:	4649      	mov	r1, r9
 8000d1c:	4640      	mov	r0, r8
 8000d1e:	47d0      	blx	sl
 8000d20:	3001      	adds	r0, #1
 8000d22:	d0ab      	beq.n	8000c7c <_printf_i+0x164>
 8000d24:	6823      	ldr	r3, [r4, #0]
 8000d26:	079b      	lsls	r3, r3, #30
 8000d28:	d413      	bmi.n	8000d52 <_printf_i+0x23a>
 8000d2a:	68e0      	ldr	r0, [r4, #12]
 8000d2c:	9b03      	ldr	r3, [sp, #12]
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	bfb8      	it	lt
 8000d32:	4618      	movlt	r0, r3
 8000d34:	e7a4      	b.n	8000c80 <_printf_i+0x168>
 8000d36:	2301      	movs	r3, #1
 8000d38:	4632      	mov	r2, r6
 8000d3a:	4649      	mov	r1, r9
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	47d0      	blx	sl
 8000d40:	3001      	adds	r0, #1
 8000d42:	d09b      	beq.n	8000c7c <_printf_i+0x164>
 8000d44:	3501      	adds	r5, #1
 8000d46:	68e3      	ldr	r3, [r4, #12]
 8000d48:	9903      	ldr	r1, [sp, #12]
 8000d4a:	1a5b      	subs	r3, r3, r1
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	dcf2      	bgt.n	8000d36 <_printf_i+0x21e>
 8000d50:	e7eb      	b.n	8000d2a <_printf_i+0x212>
 8000d52:	2500      	movs	r5, #0
 8000d54:	f104 0619 	add.w	r6, r4, #25
 8000d58:	e7f5      	b.n	8000d46 <_printf_i+0x22e>
 8000d5a:	bf00      	nop
 8000d5c:	08001059 	.word	0x08001059
 8000d60:	0800106a 	.word	0x0800106a

08000d64 <memcpy>:
 8000d64:	440a      	add	r2, r1
 8000d66:	4291      	cmp	r1, r2
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6c:	d100      	bne.n	8000d70 <memcpy+0xc>
 8000d6e:	4770      	bx	lr
 8000d70:	b510      	push	{r4, lr}
 8000d72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000d76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000d7a:	4291      	cmp	r1, r2
 8000d7c:	d1f9      	bne.n	8000d72 <memcpy+0xe>
 8000d7e:	bd10      	pop	{r4, pc}

08000d80 <memmove>:
 8000d80:	4288      	cmp	r0, r1
 8000d82:	b510      	push	{r4, lr}
 8000d84:	eb01 0402 	add.w	r4, r1, r2
 8000d88:	d902      	bls.n	8000d90 <memmove+0x10>
 8000d8a:	4284      	cmp	r4, r0
 8000d8c:	4623      	mov	r3, r4
 8000d8e:	d807      	bhi.n	8000da0 <memmove+0x20>
 8000d90:	1e43      	subs	r3, r0, #1
 8000d92:	42a1      	cmp	r1, r4
 8000d94:	d008      	beq.n	8000da8 <memmove+0x28>
 8000d96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000d9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000d9e:	e7f8      	b.n	8000d92 <memmove+0x12>
 8000da0:	4402      	add	r2, r0
 8000da2:	4601      	mov	r1, r0
 8000da4:	428a      	cmp	r2, r1
 8000da6:	d100      	bne.n	8000daa <memmove+0x2a>
 8000da8:	bd10      	pop	{r4, pc}
 8000daa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000dae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000db2:	e7f7      	b.n	8000da4 <memmove+0x24>

08000db4 <_free_r>:
 8000db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d044      	beq.n	8000e44 <_free_r+0x90>
 8000dba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000dbe:	9001      	str	r0, [sp, #4]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f1a1 0404 	sub.w	r4, r1, #4
 8000dc6:	bfb8      	it	lt
 8000dc8:	18e4      	addlt	r4, r4, r3
 8000dca:	f000 f913 	bl	8000ff4 <__malloc_lock>
 8000dce:	4a1e      	ldr	r2, [pc, #120]	; (8000e48 <_free_r+0x94>)
 8000dd0:	9801      	ldr	r0, [sp, #4]
 8000dd2:	6813      	ldr	r3, [r2, #0]
 8000dd4:	b933      	cbnz	r3, 8000de4 <_free_r+0x30>
 8000dd6:	6063      	str	r3, [r4, #4]
 8000dd8:	6014      	str	r4, [r2, #0]
 8000dda:	b003      	add	sp, #12
 8000ddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000de0:	f000 b90e 	b.w	8001000 <__malloc_unlock>
 8000de4:	42a3      	cmp	r3, r4
 8000de6:	d908      	bls.n	8000dfa <_free_r+0x46>
 8000de8:	6825      	ldr	r5, [r4, #0]
 8000dea:	1961      	adds	r1, r4, r5
 8000dec:	428b      	cmp	r3, r1
 8000dee:	bf01      	itttt	eq
 8000df0:	6819      	ldreq	r1, [r3, #0]
 8000df2:	685b      	ldreq	r3, [r3, #4]
 8000df4:	1949      	addeq	r1, r1, r5
 8000df6:	6021      	streq	r1, [r4, #0]
 8000df8:	e7ed      	b.n	8000dd6 <_free_r+0x22>
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	b10b      	cbz	r3, 8000e04 <_free_r+0x50>
 8000e00:	42a3      	cmp	r3, r4
 8000e02:	d9fa      	bls.n	8000dfa <_free_r+0x46>
 8000e04:	6811      	ldr	r1, [r2, #0]
 8000e06:	1855      	adds	r5, r2, r1
 8000e08:	42a5      	cmp	r5, r4
 8000e0a:	d10b      	bne.n	8000e24 <_free_r+0x70>
 8000e0c:	6824      	ldr	r4, [r4, #0]
 8000e0e:	4421      	add	r1, r4
 8000e10:	1854      	adds	r4, r2, r1
 8000e12:	42a3      	cmp	r3, r4
 8000e14:	6011      	str	r1, [r2, #0]
 8000e16:	d1e0      	bne.n	8000dda <_free_r+0x26>
 8000e18:	681c      	ldr	r4, [r3, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	6053      	str	r3, [r2, #4]
 8000e1e:	4421      	add	r1, r4
 8000e20:	6011      	str	r1, [r2, #0]
 8000e22:	e7da      	b.n	8000dda <_free_r+0x26>
 8000e24:	d902      	bls.n	8000e2c <_free_r+0x78>
 8000e26:	230c      	movs	r3, #12
 8000e28:	6003      	str	r3, [r0, #0]
 8000e2a:	e7d6      	b.n	8000dda <_free_r+0x26>
 8000e2c:	6825      	ldr	r5, [r4, #0]
 8000e2e:	1961      	adds	r1, r4, r5
 8000e30:	428b      	cmp	r3, r1
 8000e32:	bf04      	itt	eq
 8000e34:	6819      	ldreq	r1, [r3, #0]
 8000e36:	685b      	ldreq	r3, [r3, #4]
 8000e38:	6063      	str	r3, [r4, #4]
 8000e3a:	bf04      	itt	eq
 8000e3c:	1949      	addeq	r1, r1, r5
 8000e3e:	6021      	streq	r1, [r4, #0]
 8000e40:	6054      	str	r4, [r2, #4]
 8000e42:	e7ca      	b.n	8000dda <_free_r+0x26>
 8000e44:	b003      	add	sp, #12
 8000e46:	bd30      	pop	{r4, r5, pc}
 8000e48:	200000a8 	.word	0x200000a8

08000e4c <sbrk_aligned>:
 8000e4c:	b570      	push	{r4, r5, r6, lr}
 8000e4e:	4e0e      	ldr	r6, [pc, #56]	; (8000e88 <sbrk_aligned+0x3c>)
 8000e50:	460c      	mov	r4, r1
 8000e52:	6831      	ldr	r1, [r6, #0]
 8000e54:	4605      	mov	r5, r0
 8000e56:	b911      	cbnz	r1, 8000e5e <sbrk_aligned+0x12>
 8000e58:	f000 f8bc 	bl	8000fd4 <_sbrk_r>
 8000e5c:	6030      	str	r0, [r6, #0]
 8000e5e:	4621      	mov	r1, r4
 8000e60:	4628      	mov	r0, r5
 8000e62:	f000 f8b7 	bl	8000fd4 <_sbrk_r>
 8000e66:	1c43      	adds	r3, r0, #1
 8000e68:	d00a      	beq.n	8000e80 <sbrk_aligned+0x34>
 8000e6a:	1cc4      	adds	r4, r0, #3
 8000e6c:	f024 0403 	bic.w	r4, r4, #3
 8000e70:	42a0      	cmp	r0, r4
 8000e72:	d007      	beq.n	8000e84 <sbrk_aligned+0x38>
 8000e74:	1a21      	subs	r1, r4, r0
 8000e76:	4628      	mov	r0, r5
 8000e78:	f000 f8ac 	bl	8000fd4 <_sbrk_r>
 8000e7c:	3001      	adds	r0, #1
 8000e7e:	d101      	bne.n	8000e84 <sbrk_aligned+0x38>
 8000e80:	f04f 34ff 	mov.w	r4, #4294967295
 8000e84:	4620      	mov	r0, r4
 8000e86:	bd70      	pop	{r4, r5, r6, pc}
 8000e88:	200000ac 	.word	0x200000ac

08000e8c <_malloc_r>:
 8000e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e90:	1ccd      	adds	r5, r1, #3
 8000e92:	f025 0503 	bic.w	r5, r5, #3
 8000e96:	3508      	adds	r5, #8
 8000e98:	2d0c      	cmp	r5, #12
 8000e9a:	bf38      	it	cc
 8000e9c:	250c      	movcc	r5, #12
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	4607      	mov	r7, r0
 8000ea2:	db01      	blt.n	8000ea8 <_malloc_r+0x1c>
 8000ea4:	42a9      	cmp	r1, r5
 8000ea6:	d905      	bls.n	8000eb4 <_malloc_r+0x28>
 8000ea8:	230c      	movs	r3, #12
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	2600      	movs	r6, #0
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000eb4:	4e2e      	ldr	r6, [pc, #184]	; (8000f70 <_malloc_r+0xe4>)
 8000eb6:	f000 f89d 	bl	8000ff4 <__malloc_lock>
 8000eba:	6833      	ldr	r3, [r6, #0]
 8000ebc:	461c      	mov	r4, r3
 8000ebe:	bb34      	cbnz	r4, 8000f0e <_malloc_r+0x82>
 8000ec0:	4629      	mov	r1, r5
 8000ec2:	4638      	mov	r0, r7
 8000ec4:	f7ff ffc2 	bl	8000e4c <sbrk_aligned>
 8000ec8:	1c43      	adds	r3, r0, #1
 8000eca:	4604      	mov	r4, r0
 8000ecc:	d14d      	bne.n	8000f6a <_malloc_r+0xde>
 8000ece:	6834      	ldr	r4, [r6, #0]
 8000ed0:	4626      	mov	r6, r4
 8000ed2:	2e00      	cmp	r6, #0
 8000ed4:	d140      	bne.n	8000f58 <_malloc_r+0xcc>
 8000ed6:	6823      	ldr	r3, [r4, #0]
 8000ed8:	4631      	mov	r1, r6
 8000eda:	4638      	mov	r0, r7
 8000edc:	eb04 0803 	add.w	r8, r4, r3
 8000ee0:	f000 f878 	bl	8000fd4 <_sbrk_r>
 8000ee4:	4580      	cmp	r8, r0
 8000ee6:	d13a      	bne.n	8000f5e <_malloc_r+0xd2>
 8000ee8:	6821      	ldr	r1, [r4, #0]
 8000eea:	3503      	adds	r5, #3
 8000eec:	1a6d      	subs	r5, r5, r1
 8000eee:	f025 0503 	bic.w	r5, r5, #3
 8000ef2:	3508      	adds	r5, #8
 8000ef4:	2d0c      	cmp	r5, #12
 8000ef6:	bf38      	it	cc
 8000ef8:	250c      	movcc	r5, #12
 8000efa:	4629      	mov	r1, r5
 8000efc:	4638      	mov	r0, r7
 8000efe:	f7ff ffa5 	bl	8000e4c <sbrk_aligned>
 8000f02:	3001      	adds	r0, #1
 8000f04:	d02b      	beq.n	8000f5e <_malloc_r+0xd2>
 8000f06:	6823      	ldr	r3, [r4, #0]
 8000f08:	442b      	add	r3, r5
 8000f0a:	6023      	str	r3, [r4, #0]
 8000f0c:	e00e      	b.n	8000f2c <_malloc_r+0xa0>
 8000f0e:	6822      	ldr	r2, [r4, #0]
 8000f10:	1b52      	subs	r2, r2, r5
 8000f12:	d41e      	bmi.n	8000f52 <_malloc_r+0xc6>
 8000f14:	2a0b      	cmp	r2, #11
 8000f16:	d916      	bls.n	8000f46 <_malloc_r+0xba>
 8000f18:	1961      	adds	r1, r4, r5
 8000f1a:	42a3      	cmp	r3, r4
 8000f1c:	6025      	str	r5, [r4, #0]
 8000f1e:	bf18      	it	ne
 8000f20:	6059      	strne	r1, [r3, #4]
 8000f22:	6863      	ldr	r3, [r4, #4]
 8000f24:	bf08      	it	eq
 8000f26:	6031      	streq	r1, [r6, #0]
 8000f28:	5162      	str	r2, [r4, r5]
 8000f2a:	604b      	str	r3, [r1, #4]
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	f104 060b 	add.w	r6, r4, #11
 8000f32:	f000 f865 	bl	8001000 <__malloc_unlock>
 8000f36:	f026 0607 	bic.w	r6, r6, #7
 8000f3a:	1d23      	adds	r3, r4, #4
 8000f3c:	1af2      	subs	r2, r6, r3
 8000f3e:	d0b6      	beq.n	8000eae <_malloc_r+0x22>
 8000f40:	1b9b      	subs	r3, r3, r6
 8000f42:	50a3      	str	r3, [r4, r2]
 8000f44:	e7b3      	b.n	8000eae <_malloc_r+0x22>
 8000f46:	6862      	ldr	r2, [r4, #4]
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	bf0c      	ite	eq
 8000f4c:	6032      	streq	r2, [r6, #0]
 8000f4e:	605a      	strne	r2, [r3, #4]
 8000f50:	e7ec      	b.n	8000f2c <_malloc_r+0xa0>
 8000f52:	4623      	mov	r3, r4
 8000f54:	6864      	ldr	r4, [r4, #4]
 8000f56:	e7b2      	b.n	8000ebe <_malloc_r+0x32>
 8000f58:	4634      	mov	r4, r6
 8000f5a:	6876      	ldr	r6, [r6, #4]
 8000f5c:	e7b9      	b.n	8000ed2 <_malloc_r+0x46>
 8000f5e:	230c      	movs	r3, #12
 8000f60:	603b      	str	r3, [r7, #0]
 8000f62:	4638      	mov	r0, r7
 8000f64:	f000 f84c 	bl	8001000 <__malloc_unlock>
 8000f68:	e7a1      	b.n	8000eae <_malloc_r+0x22>
 8000f6a:	6025      	str	r5, [r4, #0]
 8000f6c:	e7de      	b.n	8000f2c <_malloc_r+0xa0>
 8000f6e:	bf00      	nop
 8000f70:	200000a8 	.word	0x200000a8

08000f74 <_realloc_r>:
 8000f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f78:	4680      	mov	r8, r0
 8000f7a:	4614      	mov	r4, r2
 8000f7c:	460e      	mov	r6, r1
 8000f7e:	b921      	cbnz	r1, 8000f8a <_realloc_r+0x16>
 8000f80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f84:	4611      	mov	r1, r2
 8000f86:	f7ff bf81 	b.w	8000e8c <_malloc_r>
 8000f8a:	b92a      	cbnz	r2, 8000f98 <_realloc_r+0x24>
 8000f8c:	f7ff ff12 	bl	8000db4 <_free_r>
 8000f90:	4625      	mov	r5, r4
 8000f92:	4628      	mov	r0, r5
 8000f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f98:	f000 f838 	bl	800100c <_malloc_usable_size_r>
 8000f9c:	4284      	cmp	r4, r0
 8000f9e:	4607      	mov	r7, r0
 8000fa0:	d802      	bhi.n	8000fa8 <_realloc_r+0x34>
 8000fa2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8000fa6:	d812      	bhi.n	8000fce <_realloc_r+0x5a>
 8000fa8:	4621      	mov	r1, r4
 8000faa:	4640      	mov	r0, r8
 8000fac:	f7ff ff6e 	bl	8000e8c <_malloc_r>
 8000fb0:	4605      	mov	r5, r0
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	d0ed      	beq.n	8000f92 <_realloc_r+0x1e>
 8000fb6:	42bc      	cmp	r4, r7
 8000fb8:	4622      	mov	r2, r4
 8000fba:	4631      	mov	r1, r6
 8000fbc:	bf28      	it	cs
 8000fbe:	463a      	movcs	r2, r7
 8000fc0:	f7ff fed0 	bl	8000d64 <memcpy>
 8000fc4:	4631      	mov	r1, r6
 8000fc6:	4640      	mov	r0, r8
 8000fc8:	f7ff fef4 	bl	8000db4 <_free_r>
 8000fcc:	e7e1      	b.n	8000f92 <_realloc_r+0x1e>
 8000fce:	4635      	mov	r5, r6
 8000fd0:	e7df      	b.n	8000f92 <_realloc_r+0x1e>
	...

08000fd4 <_sbrk_r>:
 8000fd4:	b538      	push	{r3, r4, r5, lr}
 8000fd6:	4d06      	ldr	r5, [pc, #24]	; (8000ff0 <_sbrk_r+0x1c>)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	4604      	mov	r4, r0
 8000fdc:	4608      	mov	r0, r1
 8000fde:	602b      	str	r3, [r5, #0]
 8000fe0:	f7ff fb26 	bl	8000630 <_sbrk>
 8000fe4:	1c43      	adds	r3, r0, #1
 8000fe6:	d102      	bne.n	8000fee <_sbrk_r+0x1a>
 8000fe8:	682b      	ldr	r3, [r5, #0]
 8000fea:	b103      	cbz	r3, 8000fee <_sbrk_r+0x1a>
 8000fec:	6023      	str	r3, [r4, #0]
 8000fee:	bd38      	pop	{r3, r4, r5, pc}
 8000ff0:	200000b0 	.word	0x200000b0

08000ff4 <__malloc_lock>:
 8000ff4:	4801      	ldr	r0, [pc, #4]	; (8000ffc <__malloc_lock+0x8>)
 8000ff6:	f000 b811 	b.w	800101c <__retarget_lock_acquire_recursive>
 8000ffa:	bf00      	nop
 8000ffc:	200000b4 	.word	0x200000b4

08001000 <__malloc_unlock>:
 8001000:	4801      	ldr	r0, [pc, #4]	; (8001008 <__malloc_unlock+0x8>)
 8001002:	f000 b80c 	b.w	800101e <__retarget_lock_release_recursive>
 8001006:	bf00      	nop
 8001008:	200000b4 	.word	0x200000b4

0800100c <_malloc_usable_size_r>:
 800100c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001010:	1f18      	subs	r0, r3, #4
 8001012:	2b00      	cmp	r3, #0
 8001014:	bfbc      	itt	lt
 8001016:	580b      	ldrlt	r3, [r1, r0]
 8001018:	18c0      	addlt	r0, r0, r3
 800101a:	4770      	bx	lr

0800101c <__retarget_lock_acquire_recursive>:
 800101c:	4770      	bx	lr

0800101e <__retarget_lock_release_recursive>:
 800101e:	4770      	bx	lr

08001020 <_init>:
 8001020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001022:	bf00      	nop
 8001024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001026:	bc08      	pop	{r3}
 8001028:	469e      	mov	lr, r3
 800102a:	4770      	bx	lr

0800102c <_fini>:
 800102c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800102e:	bf00      	nop
 8001030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001032:	bc08      	pop	{r3}
 8001034:	469e      	mov	lr, r3
 8001036:	4770      	bx	lr
