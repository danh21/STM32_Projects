
ADC_Reg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013ec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800159c  0800159c  0001159c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015ec  080015ec  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080015ec  080015ec  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015ec  080015ec  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015ec  080015ec  000115ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015f0  080015f0  000115f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080015f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000044  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000bc  200000bc  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001b02  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006f4  00000000  00000000  00021baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  000222a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000d0  00000000  00000000  000223d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019651  00000000  00000000  000224a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002648  00000000  00000000  0003baf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c0fb  00000000  00000000  0003e141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000ca23c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006dc  00000000  00000000  000ca28c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001584 	.word	0x08001584

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08001584 	.word	0x08001584

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <ADC_Init>:
#include "ADC.h"


// APIs
void ADC_Init(ADC_TypeDef *pADC, uint32_t channel)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	6039      	str	r1, [r7, #0]
	/* enable ADC clock */
	if (pADC == ADC1)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a80      	ldr	r2, [pc, #512]	; (80004a0 <ADC_Init+0x210>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d106      	bne.n	80002b0 <ADC_Init+0x20>
	{
		RCC->APB2ENR |= (1<<8);		// enable ADC1 clock
 80002a2:	4b80      	ldr	r3, [pc, #512]	; (80004a4 <ADC_Init+0x214>)
 80002a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002a6:	4a7f      	ldr	r2, [pc, #508]	; (80004a4 <ADC_Init+0x214>)
 80002a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ac:	6453      	str	r3, [r2, #68]	; 0x44
 80002ae:	e014      	b.n	80002da <ADC_Init+0x4a>
	}
	else if (pADC == ADC2)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a7d      	ldr	r2, [pc, #500]	; (80004a8 <ADC_Init+0x218>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d106      	bne.n	80002c6 <ADC_Init+0x36>
	{
		RCC->APB2ENR |= (1<<9);		// enable ADC2 clock
 80002b8:	4b7a      	ldr	r3, [pc, #488]	; (80004a4 <ADC_Init+0x214>)
 80002ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002bc:	4a79      	ldr	r2, [pc, #484]	; (80004a4 <ADC_Init+0x214>)
 80002be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002c2:	6453      	str	r3, [r2, #68]	; 0x44
 80002c4:	e009      	b.n	80002da <ADC_Init+0x4a>
	}
	else if (pADC == ADC3)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a78      	ldr	r2, [pc, #480]	; (80004ac <ADC_Init+0x21c>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d105      	bne.n	80002da <ADC_Init+0x4a>
	{
		RCC->APB2ENR |= (1<<10);	// enable ADC3 clock
 80002ce:	4b75      	ldr	r3, [pc, #468]	; (80004a4 <ADC_Init+0x214>)
 80002d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002d2:	4a74      	ldr	r2, [pc, #464]	; (80004a4 <ADC_Init+0x214>)
 80002d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d8:	6453      	str	r3, [r2, #68]	; 0x44
	}

	/* init analog mode */
	if ( (0 <= channel && channel <= 3) || ((pADC == ADC1 || pADC == ADC2) && (4 <= channel && channel <= 7)) )
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	2b03      	cmp	r3, #3
 80002de:	d90d      	bls.n	80002fc <ADC_Init+0x6c>
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4a6f      	ldr	r2, [pc, #444]	; (80004a0 <ADC_Init+0x210>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d003      	beq.n	80002f0 <ADC_Init+0x60>
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a6f      	ldr	r2, [pc, #444]	; (80004a8 <ADC_Init+0x218>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d117      	bne.n	8000320 <ADC_Init+0x90>
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	2b03      	cmp	r3, #3
 80002f4:	d914      	bls.n	8000320 <ADC_Init+0x90>
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	2b07      	cmp	r3, #7
 80002fa:	d811      	bhi.n	8000320 <ADC_Init+0x90>
	{
		RCC->AHB1ENR |= (1<<0);					// enable GPIOA clock
 80002fc:	4b69      	ldr	r3, [pc, #420]	; (80004a4 <ADC_Init+0x214>)
 80002fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000300:	4a68      	ldr	r2, [pc, #416]	; (80004a4 <ADC_Init+0x214>)
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER |= (3<<(channel*2));
 8000308:	4b69      	ldr	r3, [pc, #420]	; (80004b0 <ADC_Init+0x220>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	683a      	ldr	r2, [r7, #0]
 800030e:	0052      	lsls	r2, r2, #1
 8000310:	2103      	movs	r1, #3
 8000312:	fa01 f202 	lsl.w	r2, r1, r2
 8000316:	4611      	mov	r1, r2
 8000318:	4a65      	ldr	r2, [pc, #404]	; (80004b0 <ADC_Init+0x220>)
 800031a:	430b      	orrs	r3, r1
 800031c:	6013      	str	r3, [r2, #0]
 800031e:	e07c      	b.n	800041a <ADC_Init+0x18a>
	}
	else if ((pADC == ADC1 || pADC == ADC2) && (8 <= channel && channel <= 9))
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4a5f      	ldr	r2, [pc, #380]	; (80004a0 <ADC_Init+0x210>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d003      	beq.n	8000330 <ADC_Init+0xa0>
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a5f      	ldr	r2, [pc, #380]	; (80004a8 <ADC_Init+0x218>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d118      	bne.n	8000362 <ADC_Init+0xd2>
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	2b07      	cmp	r3, #7
 8000334:	d915      	bls.n	8000362 <ADC_Init+0xd2>
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	2b09      	cmp	r3, #9
 800033a:	d812      	bhi.n	8000362 <ADC_Init+0xd2>
	{
		RCC->AHB1ENR |= (1<<1);					// enable GPIOB clock
 800033c:	4b59      	ldr	r3, [pc, #356]	; (80004a4 <ADC_Init+0x214>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4a58      	ldr	r2, [pc, #352]	; (80004a4 <ADC_Init+0x214>)
 8000342:	f043 0302 	orr.w	r3, r3, #2
 8000346:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOB->MODER |= (3<<((channel-8)*2));
 8000348:	4b5a      	ldr	r3, [pc, #360]	; (80004b4 <ADC_Init+0x224>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	683a      	ldr	r2, [r7, #0]
 800034e:	3a08      	subs	r2, #8
 8000350:	0052      	lsls	r2, r2, #1
 8000352:	2103      	movs	r1, #3
 8000354:	fa01 f202 	lsl.w	r2, r1, r2
 8000358:	4611      	mov	r1, r2
 800035a:	4a56      	ldr	r2, [pc, #344]	; (80004b4 <ADC_Init+0x224>)
 800035c:	430b      	orrs	r3, r1
 800035e:	6013      	str	r3, [r2, #0]
 8000360:	e05b      	b.n	800041a <ADC_Init+0x18a>
	}
	else if ( (10 <= channel && channel <= 13) || ((pADC == ADC1 || pADC == ADC2) && (14 <= channel && channel <= 15)) )
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	2b09      	cmp	r3, #9
 8000366:	d902      	bls.n	800036e <ADC_Init+0xde>
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	2b0d      	cmp	r3, #13
 800036c:	d90d      	bls.n	800038a <ADC_Init+0xfa>
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a4b      	ldr	r2, [pc, #300]	; (80004a0 <ADC_Init+0x210>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d003      	beq.n	800037e <ADC_Init+0xee>
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a4b      	ldr	r2, [pc, #300]	; (80004a8 <ADC_Init+0x218>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d118      	bne.n	80003b0 <ADC_Init+0x120>
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	2b0d      	cmp	r3, #13
 8000382:	d915      	bls.n	80003b0 <ADC_Init+0x120>
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	2b0f      	cmp	r3, #15
 8000388:	d812      	bhi.n	80003b0 <ADC_Init+0x120>
	{
		RCC->AHB1ENR |= (1<<2);					// enable GPIOC clock
 800038a:	4b46      	ldr	r3, [pc, #280]	; (80004a4 <ADC_Init+0x214>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038e:	4a45      	ldr	r2, [pc, #276]	; (80004a4 <ADC_Init+0x214>)
 8000390:	f043 0304 	orr.w	r3, r3, #4
 8000394:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOC->MODER |= (3<<((channel-10)*2));
 8000396:	4b48      	ldr	r3, [pc, #288]	; (80004b8 <ADC_Init+0x228>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	683a      	ldr	r2, [r7, #0]
 800039c:	3a0a      	subs	r2, #10
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	2103      	movs	r1, #3
 80003a2:	fa01 f202 	lsl.w	r2, r1, r2
 80003a6:	4611      	mov	r1, r2
 80003a8:	4a43      	ldr	r2, [pc, #268]	; (80004b8 <ADC_Init+0x228>)
 80003aa:	430b      	orrs	r3, r1
 80003ac:	6013      	str	r3, [r2, #0]
 80003ae:	e034      	b.n	800041a <ADC_Init+0x18a>
	}
	else 										// ADC3
	{
		RCC->AHB1ENR |= (1<<5);					// enable GPIOF clock
 80003b0:	4b3c      	ldr	r3, [pc, #240]	; (80004a4 <ADC_Init+0x214>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b4:	4a3b      	ldr	r2, [pc, #236]	; (80004a4 <ADC_Init+0x214>)
 80003b6:	f043 0320 	orr.w	r3, r3, #32
 80003ba:	6313      	str	r3, [r2, #48]	; 0x30
		if (4 <= channel && channel <= 8)
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	2b03      	cmp	r3, #3
 80003c0:	d90f      	bls.n	80003e2 <ADC_Init+0x152>
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	2b08      	cmp	r3, #8
 80003c6:	d80c      	bhi.n	80003e2 <ADC_Init+0x152>
			GPIOC->MODER |= (3<<((channel+2)*2));
 80003c8:	4b3b      	ldr	r3, [pc, #236]	; (80004b8 <ADC_Init+0x228>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	683a      	ldr	r2, [r7, #0]
 80003ce:	3202      	adds	r2, #2
 80003d0:	0052      	lsls	r2, r2, #1
 80003d2:	2103      	movs	r1, #3
 80003d4:	fa01 f202 	lsl.w	r2, r1, r2
 80003d8:	4611      	mov	r1, r2
 80003da:	4a37      	ldr	r2, [pc, #220]	; (80004b8 <ADC_Init+0x228>)
 80003dc:	430b      	orrs	r3, r1
 80003de:	6013      	str	r3, [r2, #0]
 80003e0:	e01b      	b.n	800041a <ADC_Init+0x18a>
		else if (channel == 9)
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	2b09      	cmp	r3, #9
 80003e6:	d106      	bne.n	80003f6 <ADC_Init+0x166>
			GPIOC->MODER |= (3<<(3*2));
 80003e8:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <ADC_Init+0x228>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a32      	ldr	r2, [pc, #200]	; (80004b8 <ADC_Init+0x228>)
 80003ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80003f2:	6013      	str	r3, [r2, #0]
 80003f4:	e011      	b.n	800041a <ADC_Init+0x18a>
		else if (14 <= channel && channel <= 15)
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	2b0d      	cmp	r3, #13
 80003fa:	d90e      	bls.n	800041a <ADC_Init+0x18a>
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	2b0f      	cmp	r3, #15
 8000400:	d80b      	bhi.n	800041a <ADC_Init+0x18a>
			GPIOC->MODER |= (3<<((channel-10)*2));
 8000402:	4b2d      	ldr	r3, [pc, #180]	; (80004b8 <ADC_Init+0x228>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	683a      	ldr	r2, [r7, #0]
 8000408:	3a0a      	subs	r2, #10
 800040a:	0052      	lsls	r2, r2, #1
 800040c:	2103      	movs	r1, #3
 800040e:	fa01 f202 	lsl.w	r2, r1, r2
 8000412:	4611      	mov	r1, r2
 8000414:	4a28      	ldr	r2, [pc, #160]	; (80004b8 <ADC_Init+0x228>)
 8000416:	430b      	orrs	r3, r1
 8000418:	6013      	str	r3, [r2, #0]
	}

	ADC->CCR &= ~(31<<0);  		// independent mode
 800041a:	4b28      	ldr	r3, [pc, #160]	; (80004bc <ADC_Init+0x22c>)
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	4a27      	ldr	r2, [pc, #156]	; (80004bc <ADC_Init+0x22c>)
 8000420:	f023 031f 	bic.w	r3, r3, #31
 8000424:	6053      	str	r3, [r2, #4]
	ADC->CCR &= ~(3<<16);  		// PCLK2 divided by 2
 8000426:	4b25      	ldr	r3, [pc, #148]	; (80004bc <ADC_Init+0x22c>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	4a24      	ldr	r2, [pc, #144]	; (80004bc <ADC_Init+0x22c>)
 800042c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000430:	6053      	str	r3, [r2, #4]
	ADC->CCR &= ~(3<<14);  		// disable DMA
 8000432:	4b22      	ldr	r3, [pc, #136]	; (80004bc <ADC_Init+0x22c>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	4a21      	ldr	r2, [pc, #132]	; (80004bc <ADC_Init+0x22c>)
 8000438:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800043c:	6053      	str	r3, [r2, #4]
	ADC->CCR &= ~(15<<8);  		// delay between 2 sampling phases
 800043e:	4b1f      	ldr	r3, [pc, #124]	; (80004bc <ADC_Init+0x22c>)
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	4a1e      	ldr	r2, [pc, #120]	; (80004bc <ADC_Init+0x22c>)
 8000444:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000448:	6053      	str	r3, [r2, #4]

//	pADC->CR1 |= (1<<24);		// resolution 10-bit, default is 12-bit

	pADC->CR2 |= (1<<0);		// enable ADC
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	689b      	ldr	r3, [r3, #8]
 800044e:	f043 0201 	orr.w	r2, r3, #1
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	609a      	str	r2, [r3, #8]
	pADC->CR2 |= (1<<1);		// continuous conversion mode
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	689b      	ldr	r3, [r3, #8]
 800045a:	f043 0202 	orr.w	r2, r3, #2
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	609a      	str	r2, [r3, #8]
	pADC->CR2 |= (15<<24);		// external event to trigger start of conversion is EXTI line11
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	689b      	ldr	r3, [r3, #8]
 8000466:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	609a      	str	r2, [r3, #8]
	pADC->CR2 &= ~(1<<11);		// data alignment right
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	609a      	str	r2, [r3, #8]

	pADC->SQR1 &= ~(15<<20);	// 1 conversion in the regular channel conversion sequence
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800047e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	62da      	str	r2, [r3, #44]	; 0x2c
	pADC->SQR3 |= (channel<<0);	// channel is assigned to 1st conversion in regular sequence
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	431a      	orrs	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40012000 	.word	0x40012000
 80004a4:	40023800 	.word	0x40023800
 80004a8:	40012100 	.word	0x40012100
 80004ac:	40012200 	.word	0x40012200
 80004b0:	40020000 	.word	0x40020000
 80004b4:	40020400 	.word	0x40020400
 80004b8:	40020800 	.word	0x40020800
 80004bc:	40012300 	.word	0x40012300

080004c0 <ADC_Read>:
	while ((pADC->SR & (1<<4)) == 0);	// wait until conversion starts
}


uint32_t ADC_Read(ADC_TypeDef *pADC)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	return pADC->DR;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr

080004d8 <ADC_Start_IT>:
	pADC->CR2 &= ~(1<<0);		// disable adc
}


void ADC_Start_IT(ADC_TypeDef *pADC)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	pADC->CR2 |= (1<<30);		// start regular conversion
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	609a      	str	r2, [r3, #8]
	pADC->SR &= ~(1<<1);		// reset EOC bit
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f023 0202 	bic.w	r2, r3, #2
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	601a      	str	r2, [r3, #0]
	pADC->CR1 |= (1<<5);		// enable interrupt when bit EOC is set
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	f043 0220 	orr.w	r2, r3, #32
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	605a      	str	r2, [r3, #4]

	SCB->AIRCR &= (7<<8);		// choose priority group
 8000504:	4b0d      	ldr	r3, [pc, #52]	; (800053c <ADC_Start_IT+0x64>)
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	4a0c      	ldr	r2, [pc, #48]	; (800053c <ADC_Start_IT+0x64>)
 800050a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800050e:	60d3      	str	r3, [r2, #12]
	NVIC->IP[18] |= (1<<4);		// set priority is 1
 8000510:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <ADC_Start_IT+0x68>)
 8000512:	f893 3312 	ldrb.w	r3, [r3, #786]	; 0x312
 8000516:	b2db      	uxtb	r3, r3
 8000518:	4a09      	ldr	r2, [pc, #36]	; (8000540 <ADC_Start_IT+0x68>)
 800051a:	f043 0310 	orr.w	r3, r3, #16
 800051e:	b2db      	uxtb	r3, r3
 8000520:	f882 3312 	strb.w	r3, [r2, #786]	; 0x312
	NVIC->ISER[0] |= (1<<18);	// Interrupt Set Enable
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <ADC_Start_IT+0x68>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a05      	ldr	r2, [pc, #20]	; (8000540 <ADC_Start_IT+0x68>)
 800052a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800052e:	6013      	str	r3, [r2, #0]
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	e000ed00 	.word	0xe000ed00
 8000540:	e000e100 	.word	0xe000e100

08000544 <SystemClock_config>:
const uint8_t APBPrescTable[8]  = {0, 0, 0, 0, 1, 2, 3, 4};


// APIs
void SystemClock_config(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSION;				// enable HSI
 8000548:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <SystemClock_config+0x5c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a14      	ldr	r2, [pc, #80]	; (80005a0 <SystemClock_config+0x5c>)
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSIRDY));		// see that HSI is ready or not
 8000554:	bf00      	nop
 8000556:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <SystemClock_config+0x5c>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f003 0302 	and.w	r3, r3, #2
 800055e:	2b00      	cmp	r3, #0
 8000560:	d0f9      	beq.n	8000556 <SystemClock_config+0x12>

	// Power regulator
	PWR->CR |= PWR_CR_VOS;
 8000562:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <SystemClock_config+0x60>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a0f      	ldr	r2, [pc, #60]	; (80005a4 <SystemClock_config+0x60>)
 8000568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056c:	6013      	str	r3, [r2, #0]

	// Flash latency setup
	FLASH->ACR |= FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_5WS;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <SystemClock_config+0x64>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a0d      	ldr	r2, [pc, #52]	; (80005a8 <SystemClock_config+0x64>)
 8000574:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000578:	f043 0305 	orr.w	r3, r3, #5
 800057c:	6013      	str	r3, [r2, #0]

	// HSI oscillator used as system clock
	RCC->CFGR |= RCC_CFGR_SW_HSI;
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <SystemClock_config+0x5c>)
 8000580:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <SystemClock_config+0x5c>)
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);
 8000586:	bf00      	nop
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <SystemClock_config+0x5c>)
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	f003 030c 	and.w	r3, r3, #12
 8000590:	2b00      	cmp	r3, #0
 8000592:	d1f9      	bne.n	8000588 <SystemClock_config+0x44>
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	40023800 	.word	0x40023800
 80005a4:	40007000 	.word	0x40007000
 80005a8:	40023c00 	.word	0x40023c00

080005ac <Get_HCLK_freq>:


uint32_t Get_HCLK_freq(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <Get_HCLK_freq+0x14>)
 80005b2:	681b      	ldr	r3, [r3, #0]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000000 	.word	0x20000000

080005c4 <Get_PCLK1_freq>:


uint32_t Get_PCLK1_freq(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (Get_HCLK_freq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80005c8:	f7ff fff0 	bl	80005ac <Get_HCLK_freq>
 80005cc:	4602      	mov	r2, r0
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <Get_PCLK1_freq+0x20>)
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	0a9b      	lsrs	r3, r3, #10
 80005d4:	f003 0307 	and.w	r3, r3, #7
 80005d8:	4903      	ldr	r1, [pc, #12]	; (80005e8 <Get_PCLK1_freq+0x24>)
 80005da:	5ccb      	ldrb	r3, [r1, r3]
 80005dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40023800 	.word	0x40023800
 80005e8:	080015b0 	.word	0x080015b0

080005ec <Get_PCLK2_freq>:


uint32_t Get_PCLK2_freq(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (Get_HCLK_freq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80005f0:	f7ff ffdc 	bl	80005ac <Get_HCLK_freq>
 80005f4:	4602      	mov	r2, r0
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <Get_PCLK2_freq+0x20>)
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	0b5b      	lsrs	r3, r3, #13
 80005fc:	f003 0307 	and.w	r3, r3, #7
 8000600:	4903      	ldr	r1, [pc, #12]	; (8000610 <Get_PCLK2_freq+0x24>)
 8000602:	5ccb      	ldrb	r3, [r1, r3]
 8000604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000608:	4618      	mov	r0, r3
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	080015b0 	.word	0x080015b0

08000614 <Timer_init>:
#include "Timer.h"


// APIs
void Timer_init(TIM_TypeDef *pTIM)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	uint32_t F_timer, prescaler, f_CLK;

	// get frequency of CLK
	if (pTIM == TIM1 || pTIM == TIM8 || pTIM == TIM9 || pTIM == TIM10 || pTIM == TIM11)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a7d      	ldr	r2, [pc, #500]	; (8000814 <Timer_init+0x200>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d00f      	beq.n	8000644 <Timer_init+0x30>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a7c      	ldr	r2, [pc, #496]	; (8000818 <Timer_init+0x204>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d00b      	beq.n	8000644 <Timer_init+0x30>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a7b      	ldr	r2, [pc, #492]	; (800081c <Timer_init+0x208>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d007      	beq.n	8000644 <Timer_init+0x30>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a7a      	ldr	r2, [pc, #488]	; (8000820 <Timer_init+0x20c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d003      	beq.n	8000644 <Timer_init+0x30>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a79      	ldr	r2, [pc, #484]	; (8000824 <Timer_init+0x210>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d103      	bne.n	800064c <Timer_init+0x38>
		f_CLK = Get_PCLK2_freq();
 8000644:	f7ff ffd2 	bl	80005ec <Get_PCLK2_freq>
 8000648:	6178      	str	r0, [r7, #20]
 800064a:	e026      	b.n	800069a <Timer_init+0x86>
	else if (pTIM == TIM2 || pTIM == TIM3 || pTIM == TIM4 || pTIM == TIM5 || pTIM == TIM6 || pTIM == TIM7 || pTIM == TIM12 || pTIM == TIM13 || pTIM == TIM14)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000652:	d01f      	beq.n	8000694 <Timer_init+0x80>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a74      	ldr	r2, [pc, #464]	; (8000828 <Timer_init+0x214>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d01b      	beq.n	8000694 <Timer_init+0x80>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a73      	ldr	r2, [pc, #460]	; (800082c <Timer_init+0x218>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d017      	beq.n	8000694 <Timer_init+0x80>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a72      	ldr	r2, [pc, #456]	; (8000830 <Timer_init+0x21c>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d013      	beq.n	8000694 <Timer_init+0x80>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a71      	ldr	r2, [pc, #452]	; (8000834 <Timer_init+0x220>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d00f      	beq.n	8000694 <Timer_init+0x80>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a70      	ldr	r2, [pc, #448]	; (8000838 <Timer_init+0x224>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d00b      	beq.n	8000694 <Timer_init+0x80>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a6f      	ldr	r2, [pc, #444]	; (800083c <Timer_init+0x228>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d007      	beq.n	8000694 <Timer_init+0x80>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a6e      	ldr	r2, [pc, #440]	; (8000840 <Timer_init+0x22c>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d003      	beq.n	8000694 <Timer_init+0x80>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a6d      	ldr	r2, [pc, #436]	; (8000844 <Timer_init+0x230>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d102      	bne.n	800069a <Timer_init+0x86>
		f_CLK = Get_PCLK1_freq();
 8000694:	f7ff ff96 	bl	80005c4 <Get_PCLK1_freq>
 8000698:	6178      	str	r0, [r7, #20]

	// pTIM clock enable
	if (pTIM == TIM1)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a5d      	ldr	r2, [pc, #372]	; (8000814 <Timer_init+0x200>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d106      	bne.n	80006b0 <Timer_init+0x9c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80006a2:	4b69      	ldr	r3, [pc, #420]	; (8000848 <Timer_init+0x234>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a6:	4a68      	ldr	r2, [pc, #416]	; (8000848 <Timer_init+0x234>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6453      	str	r3, [r2, #68]	; 0x44
 80006ae:	e08d      	b.n	80007cc <Timer_init+0x1b8>
	else if (pTIM == TIM8)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4a59      	ldr	r2, [pc, #356]	; (8000818 <Timer_init+0x204>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d106      	bne.n	80006c6 <Timer_init+0xb2>
		RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 80006b8:	4b63      	ldr	r3, [pc, #396]	; (8000848 <Timer_init+0x234>)
 80006ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006bc:	4a62      	ldr	r2, [pc, #392]	; (8000848 <Timer_init+0x234>)
 80006be:	f043 0302 	orr.w	r3, r3, #2
 80006c2:	6453      	str	r3, [r2, #68]	; 0x44
 80006c4:	e082      	b.n	80007cc <Timer_init+0x1b8>
	else if (pTIM == TIM9)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a54      	ldr	r2, [pc, #336]	; (800081c <Timer_init+0x208>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d106      	bne.n	80006dc <Timer_init+0xc8>
		RCC->APB2ENR |= RCC_APB2ENR_TIM9EN;
 80006ce:	4b5e      	ldr	r3, [pc, #376]	; (8000848 <Timer_init+0x234>)
 80006d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d2:	4a5d      	ldr	r2, [pc, #372]	; (8000848 <Timer_init+0x234>)
 80006d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006d8:	6453      	str	r3, [r2, #68]	; 0x44
 80006da:	e077      	b.n	80007cc <Timer_init+0x1b8>
	else if (pTIM == TIM10)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a50      	ldr	r2, [pc, #320]	; (8000820 <Timer_init+0x20c>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d106      	bne.n	80006f2 <Timer_init+0xde>
		RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 80006e4:	4b58      	ldr	r3, [pc, #352]	; (8000848 <Timer_init+0x234>)
 80006e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e8:	4a57      	ldr	r2, [pc, #348]	; (8000848 <Timer_init+0x234>)
 80006ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ee:	6453      	str	r3, [r2, #68]	; 0x44
 80006f0:	e06c      	b.n	80007cc <Timer_init+0x1b8>
	else if (pTIM == TIM11)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a4b      	ldr	r2, [pc, #300]	; (8000824 <Timer_init+0x210>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d106      	bne.n	8000708 <Timer_init+0xf4>
		RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
 80006fa:	4b53      	ldr	r3, [pc, #332]	; (8000848 <Timer_init+0x234>)
 80006fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fe:	4a52      	ldr	r2, [pc, #328]	; (8000848 <Timer_init+0x234>)
 8000700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000704:	6453      	str	r3, [r2, #68]	; 0x44
 8000706:	e061      	b.n	80007cc <Timer_init+0x1b8>
	else if (pTIM == TIM2)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800070e:	d106      	bne.n	800071e <Timer_init+0x10a>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000710:	4b4d      	ldr	r3, [pc, #308]	; (8000848 <Timer_init+0x234>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	4a4c      	ldr	r2, [pc, #304]	; (8000848 <Timer_init+0x234>)
 8000716:	f043 0301 	orr.w	r3, r3, #1
 800071a:	6413      	str	r3, [r2, #64]	; 0x40
 800071c:	e056      	b.n	80007cc <Timer_init+0x1b8>
	else if (pTIM == TIM3)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a41      	ldr	r2, [pc, #260]	; (8000828 <Timer_init+0x214>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d106      	bne.n	8000734 <Timer_init+0x120>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000726:	4b48      	ldr	r3, [pc, #288]	; (8000848 <Timer_init+0x234>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	4a47      	ldr	r2, [pc, #284]	; (8000848 <Timer_init+0x234>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6413      	str	r3, [r2, #64]	; 0x40
 8000732:	e04b      	b.n	80007cc <Timer_init+0x1b8>
	else if (pTIM == TIM4)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a3d      	ldr	r2, [pc, #244]	; (800082c <Timer_init+0x218>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d106      	bne.n	800074a <Timer_init+0x136>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800073c:	4b42      	ldr	r3, [pc, #264]	; (8000848 <Timer_init+0x234>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a41      	ldr	r2, [pc, #260]	; (8000848 <Timer_init+0x234>)
 8000742:	f043 0304 	orr.w	r3, r3, #4
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	e040      	b.n	80007cc <Timer_init+0x1b8>
	else if (pTIM == TIM5)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a38      	ldr	r2, [pc, #224]	; (8000830 <Timer_init+0x21c>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d106      	bne.n	8000760 <Timer_init+0x14c>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8000752:	4b3d      	ldr	r3, [pc, #244]	; (8000848 <Timer_init+0x234>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	4a3c      	ldr	r2, [pc, #240]	; (8000848 <Timer_init+0x234>)
 8000758:	f043 0308 	orr.w	r3, r3, #8
 800075c:	6413      	str	r3, [r2, #64]	; 0x40
 800075e:	e035      	b.n	80007cc <Timer_init+0x1b8>
	else if (pTIM == TIM6)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a34      	ldr	r2, [pc, #208]	; (8000834 <Timer_init+0x220>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d106      	bne.n	8000776 <Timer_init+0x162>
		RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8000768:	4b37      	ldr	r3, [pc, #220]	; (8000848 <Timer_init+0x234>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	4a36      	ldr	r2, [pc, #216]	; (8000848 <Timer_init+0x234>)
 800076e:	f043 0310 	orr.w	r3, r3, #16
 8000772:	6413      	str	r3, [r2, #64]	; 0x40
 8000774:	e02a      	b.n	80007cc <Timer_init+0x1b8>
	else if (pTIM == TIM7)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a2f      	ldr	r2, [pc, #188]	; (8000838 <Timer_init+0x224>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d106      	bne.n	800078c <Timer_init+0x178>
		RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 800077e:	4b32      	ldr	r3, [pc, #200]	; (8000848 <Timer_init+0x234>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	4a31      	ldr	r2, [pc, #196]	; (8000848 <Timer_init+0x234>)
 8000784:	f043 0320 	orr.w	r3, r3, #32
 8000788:	6413      	str	r3, [r2, #64]	; 0x40
 800078a:	e01f      	b.n	80007cc <Timer_init+0x1b8>
	else if (pTIM == TIM12)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a2b      	ldr	r2, [pc, #172]	; (800083c <Timer_init+0x228>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d106      	bne.n	80007a2 <Timer_init+0x18e>
		RCC->APB1ENR |= RCC_APB1ENR_TIM12EN;
 8000794:	4b2c      	ldr	r3, [pc, #176]	; (8000848 <Timer_init+0x234>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	4a2b      	ldr	r2, [pc, #172]	; (8000848 <Timer_init+0x234>)
 800079a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800079e:	6413      	str	r3, [r2, #64]	; 0x40
 80007a0:	e014      	b.n	80007cc <Timer_init+0x1b8>
	else if (pTIM == TIM13)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4a26      	ldr	r2, [pc, #152]	; (8000840 <Timer_init+0x22c>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d106      	bne.n	80007b8 <Timer_init+0x1a4>
		RCC->APB1ENR |= RCC_APB1ENR_TIM13EN;
 80007aa:	4b27      	ldr	r3, [pc, #156]	; (8000848 <Timer_init+0x234>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	4a26      	ldr	r2, [pc, #152]	; (8000848 <Timer_init+0x234>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6413      	str	r3, [r2, #64]	; 0x40
 80007b6:	e009      	b.n	80007cc <Timer_init+0x1b8>
	else if (pTIM == TIM14)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a22      	ldr	r2, [pc, #136]	; (8000844 <Timer_init+0x230>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d105      	bne.n	80007cc <Timer_init+0x1b8>
		RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 80007c0:	4b21      	ldr	r3, [pc, #132]	; (8000848 <Timer_init+0x234>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	4a20      	ldr	r2, [pc, #128]	; (8000848 <Timer_init+0x234>)
 80007c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ca:	6413      	str	r3, [r2, #64]	; 0x40

	// F_timer = f_CLK / (PSC + 1)
	F_timer = 1 / T_timer;
 80007cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d0:	613b      	str	r3, [r7, #16]
	prescaler = f_CLK / F_timer - 1;
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007da:	3b01      	subs	r3, #1
 80007dc:	60fb      	str	r3, [r7, #12]

	pTIM->PSC |= prescaler;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	431a      	orrs	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	629a      	str	r2, [r3, #40]	; 0x28
	pTIM->ARR = AutoReload;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007f0:	62da      	str	r2, [r3, #44]	; 0x2c

	pTIM->CR1 |= TIM_CR1_CEN;		// Counter enable
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f043 0201 	orr.w	r2, r3, #1
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	601a      	str	r2, [r3, #0]
	pTIM->CR1 &= ~(TIM_CR1_DIR);		// Counter used as up counter
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f023 0210 	bic.w	r2, r3, #16
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	601a      	str	r2, [r3, #0]
}
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40010000 	.word	0x40010000
 8000818:	40010400 	.word	0x40010400
 800081c:	40014000 	.word	0x40014000
 8000820:	40014400 	.word	0x40014400
 8000824:	40014800 	.word	0x40014800
 8000828:	40000400 	.word	0x40000400
 800082c:	40000800 	.word	0x40000800
 8000830:	40000c00 	.word	0x40000c00
 8000834:	40001000 	.word	0x40001000
 8000838:	40001400 	.word	0x40001400
 800083c:	40001800 	.word	0x40001800
 8000840:	40001c00 	.word	0x40001c00
 8000844:	40002000 	.word	0x40002000
 8000848:	40023800 	.word	0x40023800

0800084c <Timer_delay_ms>:


void Timer_delay_ms(TIM_TypeDef *pTIM, int ms)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
	pTIM->CNT = 0;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
	while (pTIM->CNT < ms);
 800085c:	bf00      	nop
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	429a      	cmp	r2, r3
 8000866:	d3fa      	bcc.n	800085e <Timer_delay_ms+0x12>
}
 8000868:	bf00      	nop
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
	...

08000878 <USART_init>:
#include "USART.h"


// APIs
void USART_init(USART_TypeDef *pUSART)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	uint32_t USART_DIV, DIV_Mantissa, DIV_Fraction, f_CLK;

	// get frequency of CLK
	if (pUSART == USART2 || pUSART == USART3 || pUSART == UART4 || pUSART == UART5)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a7e      	ldr	r2, [pc, #504]	; (8000a7c <USART_init+0x204>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d00b      	beq.n	80008a0 <USART_init+0x28>
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a7d      	ldr	r2, [pc, #500]	; (8000a80 <USART_init+0x208>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d007      	beq.n	80008a0 <USART_init+0x28>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a7c      	ldr	r2, [pc, #496]	; (8000a84 <USART_init+0x20c>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d003      	beq.n	80008a0 <USART_init+0x28>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a7b      	ldr	r2, [pc, #492]	; (8000a88 <USART_init+0x210>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d103      	bne.n	80008a8 <USART_init+0x30>
		f_CLK = Get_PCLK1_freq();
 80008a0:	f7ff fe90 	bl	80005c4 <Get_PCLK1_freq>
 80008a4:	6178      	str	r0, [r7, #20]
 80008a6:	e00c      	b.n	80008c2 <USART_init+0x4a>
	else if (pUSART == USART1 || pUSART == USART6)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a78      	ldr	r2, [pc, #480]	; (8000a8c <USART_init+0x214>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d004      	beq.n	80008ba <USART_init+0x42>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a77      	ldr	r2, [pc, #476]	; (8000a90 <USART_init+0x218>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	f040 80dc 	bne.w	8000a72 <USART_init+0x1fa>
		f_CLK = Get_PCLK2_freq();
 80008ba:	f7ff fe97 	bl	80005ec <Get_PCLK2_freq>
 80008be:	6178      	str	r0, [r7, #20]
 80008c0:	bf00      	nop
	else
		return;

	// IO port clock enable
	if (pUSART == USART1)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4a71      	ldr	r2, [pc, #452]	; (8000a8c <USART_init+0x214>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d106      	bne.n	80008d8 <USART_init+0x60>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;		// IO port B clock enable
 80008ca:	4b72      	ldr	r3, [pc, #456]	; (8000a94 <USART_init+0x21c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a71      	ldr	r2, [pc, #452]	; (8000a94 <USART_init+0x21c>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	e020      	b.n	800091a <USART_init+0xa2>
	else if (pUSART == USART2 || pUSART == USART3)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a68      	ldr	r2, [pc, #416]	; (8000a7c <USART_init+0x204>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d003      	beq.n	80008e8 <USART_init+0x70>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a67      	ldr	r2, [pc, #412]	; (8000a80 <USART_init+0x208>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d106      	bne.n	80008f6 <USART_init+0x7e>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;		// IO port D clock enable
 80008e8:	4b6a      	ldr	r3, [pc, #424]	; (8000a94 <USART_init+0x21c>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	4a69      	ldr	r2, [pc, #420]	; (8000a94 <USART_init+0x21c>)
 80008ee:	f043 0308 	orr.w	r3, r3, #8
 80008f2:	6313      	str	r3, [r2, #48]	; 0x30
 80008f4:	e011      	b.n	800091a <USART_init+0xa2>
	else if (pUSART == UART4 || pUSART == UART5 || pUSART == USART6)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a62      	ldr	r2, [pc, #392]	; (8000a84 <USART_init+0x20c>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d007      	beq.n	800090e <USART_init+0x96>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a61      	ldr	r2, [pc, #388]	; (8000a88 <USART_init+0x210>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d003      	beq.n	800090e <USART_init+0x96>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a61      	ldr	r2, [pc, #388]	; (8000a90 <USART_init+0x218>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d105      	bne.n	800091a <USART_init+0xa2>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;		// IO port C clock enable
 800090e:	4b61      	ldr	r3, [pc, #388]	; (8000a94 <USART_init+0x21c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a60      	ldr	r2, [pc, #384]	; (8000a94 <USART_init+0x21c>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6313      	str	r3, [r2, #48]	; 0x30

	// pUSART setting
	if (pUSART == USART1)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a5b      	ldr	r2, [pc, #364]	; (8000a8c <USART_init+0x214>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d112      	bne.n	8000948 <USART_init+0xd0>
	{
		GPIOB->MODER |= GPIO_MODER_MODER6_1;		// alternate function for PB6
 8000922:	4b5d      	ldr	r3, [pc, #372]	; (8000a98 <USART_init+0x220>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a5c      	ldr	r2, [pc, #368]	; (8000a98 <USART_init+0x220>)
 8000928:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800092c:	6013      	str	r3, [r2, #0]
		GPIOB->AFR[0] |= (7<<24);					// USART1 mode for PB6
 800092e:	4b5a      	ldr	r3, [pc, #360]	; (8000a98 <USART_init+0x220>)
 8000930:	6a1b      	ldr	r3, [r3, #32]
 8000932:	4a59      	ldr	r2, [pc, #356]	; (8000a98 <USART_init+0x220>)
 8000934:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000938:	6213      	str	r3, [r2, #32]
		/*
		 * PB6 - USART1_TX
		 * */

		RCC->APB2ENR |= RCC_APB2ENR_USART1EN; 		// USART1 clock enable
 800093a:	4b56      	ldr	r3, [pc, #344]	; (8000a94 <USART_init+0x21c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a55      	ldr	r2, [pc, #340]	; (8000a94 <USART_init+0x21c>)
 8000940:	f043 0310 	orr.w	r3, r3, #16
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	e071      	b.n	8000a2c <USART_init+0x1b4>
	}
	else if (pUSART == USART2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a4c      	ldr	r2, [pc, #304]	; (8000a7c <USART_init+0x204>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d112      	bne.n	8000976 <USART_init+0xfe>
	{
		GPIOD->MODER |= GPIO_MODER_MODER5_1;		// alternate function for PD5
 8000950:	4b52      	ldr	r3, [pc, #328]	; (8000a9c <USART_init+0x224>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a51      	ldr	r2, [pc, #324]	; (8000a9c <USART_init+0x224>)
 8000956:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800095a:	6013      	str	r3, [r2, #0]
		GPIOD->AFR[0] |= (7<<20);					// USART2 mode for PD5
 800095c:	4b4f      	ldr	r3, [pc, #316]	; (8000a9c <USART_init+0x224>)
 800095e:	6a1b      	ldr	r3, [r3, #32]
 8000960:	4a4e      	ldr	r2, [pc, #312]	; (8000a9c <USART_init+0x224>)
 8000962:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8000966:	6213      	str	r3, [r2, #32]
		/*
		 * PD5 - USART2_TX
		 * */

		RCC->APB1ENR |= RCC_APB1ENR_USART2EN; 		// USART2 clock enable
 8000968:	4b4a      	ldr	r3, [pc, #296]	; (8000a94 <USART_init+0x21c>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	4a49      	ldr	r2, [pc, #292]	; (8000a94 <USART_init+0x21c>)
 800096e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000972:	6413      	str	r3, [r2, #64]	; 0x40
 8000974:	e05a      	b.n	8000a2c <USART_init+0x1b4>
	}
	else if (pUSART == USART3)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a41      	ldr	r2, [pc, #260]	; (8000a80 <USART_init+0x208>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d112      	bne.n	80009a4 <USART_init+0x12c>
	{
		GPIOD->MODER |= GPIO_MODER_MODER8_1;		// alternate function for PD8
 800097e:	4b47      	ldr	r3, [pc, #284]	; (8000a9c <USART_init+0x224>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a46      	ldr	r2, [pc, #280]	; (8000a9c <USART_init+0x224>)
 8000984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000988:	6013      	str	r3, [r2, #0]
		GPIOD->AFR[1] |= (7<<0);					// USART3 mode for PD8
 800098a:	4b44      	ldr	r3, [pc, #272]	; (8000a9c <USART_init+0x224>)
 800098c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098e:	4a43      	ldr	r2, [pc, #268]	; (8000a9c <USART_init+0x224>)
 8000990:	f043 0307 	orr.w	r3, r3, #7
 8000994:	6253      	str	r3, [r2, #36]	; 0x24
		/*
		 * PD8 - USART3_TX
		 * */

		RCC->APB1ENR |= RCC_APB1ENR_USART3EN; 		// USART3 clock enable
 8000996:	4b3f      	ldr	r3, [pc, #252]	; (8000a94 <USART_init+0x21c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	4a3e      	ldr	r2, [pc, #248]	; (8000a94 <USART_init+0x21c>)
 800099c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
 80009a2:	e043      	b.n	8000a2c <USART_init+0x1b4>
	}
	else if (pUSART == UART4)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a37      	ldr	r2, [pc, #220]	; (8000a84 <USART_init+0x20c>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d112      	bne.n	80009d2 <USART_init+0x15a>
	{
		GPIOC->MODER |= GPIO_MODER_MODER10_1;		// alternate function for PC10
 80009ac:	4b3c      	ldr	r3, [pc, #240]	; (8000aa0 <USART_init+0x228>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a3b      	ldr	r2, [pc, #236]	; (8000aa0 <USART_init+0x228>)
 80009b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009b6:	6013      	str	r3, [r2, #0]
		GPIOC->AFR[1] |= GPIO_AFRH_AFSEL10_3;		// UART4 mode for PC10
 80009b8:	4b39      	ldr	r3, [pc, #228]	; (8000aa0 <USART_init+0x228>)
 80009ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009bc:	4a38      	ldr	r2, [pc, #224]	; (8000aa0 <USART_init+0x228>)
 80009be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009c2:	6253      	str	r3, [r2, #36]	; 0x24
		/*
		 * PC10 - UART4_TX
		 * */

		RCC->APB1ENR |= RCC_APB1ENR_UART4EN; 		// UART4 clock enable
 80009c4:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <USART_init+0x21c>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c8:	4a32      	ldr	r2, [pc, #200]	; (8000a94 <USART_init+0x21c>)
 80009ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009ce:	6413      	str	r3, [r2, #64]	; 0x40
 80009d0:	e02c      	b.n	8000a2c <USART_init+0x1b4>
	}
	else if (pUSART == UART5)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a2c      	ldr	r2, [pc, #176]	; (8000a88 <USART_init+0x210>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d112      	bne.n	8000a00 <USART_init+0x188>
	{
		GPIOC->MODER |= GPIO_MODER_MODER12_1;		// alternate function for PC12
 80009da:	4b31      	ldr	r3, [pc, #196]	; (8000aa0 <USART_init+0x228>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a30      	ldr	r2, [pc, #192]	; (8000aa0 <USART_init+0x228>)
 80009e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009e4:	6013      	str	r3, [r2, #0]
		GPIOC->AFR[1] |= GPIO_AFRH_AFSEL12_3;		// UART5 mode for PC12
 80009e6:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <USART_init+0x228>)
 80009e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ea:	4a2d      	ldr	r2, [pc, #180]	; (8000aa0 <USART_init+0x228>)
 80009ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009f0:	6253      	str	r3, [r2, #36]	; 0x24
		/*
		 * PC12 - UART5_TX
		 * */

		RCC->APB1ENR |= RCC_APB1ENR_UART5EN; 		// UART5 clock enable
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <USART_init+0x21c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	4a27      	ldr	r2, [pc, #156]	; (8000a94 <USART_init+0x21c>)
 80009f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	e015      	b.n	8000a2c <USART_init+0x1b4>
	}
	else if (pUSART == USART6)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a23      	ldr	r2, [pc, #140]	; (8000a90 <USART_init+0x218>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d111      	bne.n	8000a2c <USART_init+0x1b4>
	{
		GPIOC->MODER |= GPIO_MODER_MODER6_1;		// alternate function for PC6
 8000a08:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <USART_init+0x228>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a24      	ldr	r2, [pc, #144]	; (8000aa0 <USART_init+0x228>)
 8000a0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a12:	6013      	str	r3, [r2, #0]
		GPIOC->AFR[0] |= GPIO_AFRL_AFSEL6_3;		// USART6 mode for PC6
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <USART_init+0x228>)
 8000a16:	6a1b      	ldr	r3, [r3, #32]
 8000a18:	4a21      	ldr	r2, [pc, #132]	; (8000aa0 <USART_init+0x228>)
 8000a1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a1e:	6213      	str	r3, [r2, #32]
		/*
		 * PC6 - USART6_TX
		 * */

		RCC->APB2ENR |= RCC_APB2ENR_USART6EN; 		// USART6 clock enable
 8000a20:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <USART_init+0x21c>)
 8000a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a24:	4a1b      	ldr	r2, [pc, #108]	; (8000a94 <USART_init+0x21c>)
 8000a26:	f043 0320 	orr.w	r3, r3, #32
 8000a2a:	6453      	str	r3, [r2, #68]	; 0x44
	}

	// pUSART setting
	pUSART->CR1 |= USART_CR1_TE; 					// transmit enable
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	f043 0208 	orr.w	r2, r3, #8
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	60da      	str	r2, [r3, #12]
	pUSART->CR1 |= USART_CR1_UE;					// pUSART enable
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	60da      	str	r2, [r3, #12]

	USART_DIV = f_CLK / (baudrate * 16);
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	4a17      	ldr	r2, [pc, #92]	; (8000aa4 <USART_init+0x22c>)
 8000a48:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4c:	0d1b      	lsrs	r3, r3, #20
 8000a4e:	613b      	str	r3, [r7, #16]
	DIV_Mantissa = USART_DIV;
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	60fb      	str	r3, [r7, #12]
	DIV_Fraction = (USART_DIV - DIV_Mantissa) * 16;
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	011b      	lsls	r3, r3, #4
 8000a5c:	60bb      	str	r3, [r7, #8]
	pUSART->BRR |= (DIV_Mantissa<<4) | (DIV_Fraction);	// set baudrate
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	689a      	ldr	r2, [r3, #8]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	0119      	lsls	r1, r3, #4
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	430b      	orrs	r3, r1
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	e000      	b.n	8000a74 <USART_init+0x1fc>
		return;
 8000a72:	bf00      	nop
}
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40004400 	.word	0x40004400
 8000a80:	40004800 	.word	0x40004800
 8000a84:	40004c00 	.word	0x40004c00
 8000a88:	40005000 	.word	0x40005000
 8000a8c:	40011000 	.word	0x40011000
 8000a90:	40011400 	.word	0x40011400
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	40020c00 	.word	0x40020c00
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	91a2b3c5 	.word	0x91a2b3c5

08000aa8 <USART_transmit>:


void USART_transmit(USART_TypeDef *pUSART, char *pData)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
	while (*pData != '\0')
 8000ab2:	e00e      	b.n	8000ad2 <USART_transmit+0x2a>
	{
		pUSART->DR = *pData;									// load data
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	605a      	str	r2, [r3, #4]
		while ((pUSART->SR & USART_SR_TC_Msk) != USART_SR_TC);	// wait until Transmission is complete
 8000abe:	bf00      	nop
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac8:	2b40      	cmp	r3, #64	; 0x40
 8000aca:	d1f9      	bne.n	8000ac0 <USART_transmit+0x18>
		pData++;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	603b      	str	r3, [r7, #0]
	while (*pData != '\0')
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d1ec      	bne.n	8000ab4 <USART_transmit+0xc>
	}
}
 8000ada:	bf00      	nop
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <main>:



/* MAIN */
int main()
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	SystemClock_config();
 8000aec:	f7ff fd2a 	bl	8000544 <SystemClock_config>
	ADC_Init(pADC, adc_channel);
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <main+0x38>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <main+0x3c>)
 8000af6:	6812      	ldr	r2, [r2, #0]
 8000af8:	4611      	mov	r1, r2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff fbc8 	bl	8000290 <ADC_Init>
	Timer_init(pTIM);
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <main+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fd85 	bl	8000614 <Timer_init>
	USART_init(pUSART);
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <main+0x44>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff feb2 	bl	8000878 <USART_init>

	ADC_Start_IT(pADC);
 8000b14:	4b02      	ldr	r3, [pc, #8]	; (8000b20 <main+0x38>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fcdd 	bl	80004d8 <ADC_Start_IT>

	while(1)
 8000b1e:	e7fe      	b.n	8000b1e <main+0x36>
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000010 	.word	0x20000010
 8000b28:	20000004 	.word	0x20000004
 8000b2c:	2000000c 	.word	0x2000000c

08000b30 <ADC_IRQHandler>:



/* ADC ISR */
void ADC_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
	uint32_t ADC_data = ADC_Read(pADC);
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <ADC_IRQHandler+0x50>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fcc0 	bl	80004c0 <ADC_Read>
 8000b40:	6078      	str	r0, [r7, #4]
	sprintf(result, "adc value = %ld\n", ADC_data);
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	490f      	ldr	r1, [pc, #60]	; (8000b84 <ADC_IRQHandler+0x54>)
 8000b46:	4810      	ldr	r0, [pc, #64]	; (8000b88 <ADC_IRQHandler+0x58>)
 8000b48:	f000 f8ae 	bl	8000ca8 <siprintf>
	send_data(result);
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <ADC_IRQHandler+0x5c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	490d      	ldr	r1, [pc, #52]	; (8000b88 <ADC_IRQHandler+0x58>)
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ffa8 	bl	8000aa8 <USART_transmit>
	delay_ms(1000);
 8000b58:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <ADC_IRQHandler+0x60>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fe73 	bl	800084c <Timer_delay_ms>
	pADC->SR &= ~(1<<1);		// reset EOC bit
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <ADC_IRQHandler+0x50>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <ADC_IRQHandler+0x50>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f022 0202 	bic.w	r2, r2, #2
 8000b74:	601a      	str	r2, [r3, #0]
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008
 8000b84:	0800159c 	.word	0x0800159c
 8000b88:	20000094 	.word	0x20000094
 8000b8c:	2000000c 	.word	0x2000000c
 8000b90:	20000004 	.word	0x20000004

08000b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b9c:	4a14      	ldr	r2, [pc, #80]	; (8000bf0 <_sbrk+0x5c>)
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <_sbrk+0x60>)
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d102      	bne.n	8000bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <_sbrk+0x64>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <_sbrk+0x68>)
 8000bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d207      	bcs.n	8000bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc4:	f000 f846 	bl	8000c54 <__errno>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	220c      	movs	r2, #12
 8000bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	e009      	b.n	8000be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <_sbrk+0x64>)
 8000be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be6:	68fb      	ldr	r3, [r7, #12]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20020000 	.word	0x20020000
 8000bf4:	00000400 	.word	0x00000400
 8000bf8:	200000a8 	.word	0x200000a8
 8000bfc:	200000c0 	.word	0x200000c0

08000c00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c00:	480d      	ldr	r0, [pc, #52]	; (8000c38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c02:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c04:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0a:	490d      	ldr	r1, [pc, #52]	; (8000c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <LoopForever+0xe>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c20:	4c0a      	ldr	r4, [pc, #40]	; (8000c4c <LoopForever+0x16>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c2e:	f000 f817 	bl	8000c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c32:	f7ff ff59 	bl	8000ae8 <main>

08000c36 <LoopForever>:

LoopForever:
  b LoopForever
 8000c36:	e7fe      	b.n	8000c36 <LoopForever>
  ldr   r0, =_estack
 8000c38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c44:	080015f4 	.word	0x080015f4
  ldr r2, =_sbss
 8000c48:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c4c:	200000bc 	.word	0x200000bc

08000c50 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <BusFault_Handler>
	...

08000c54 <__errno>:
 8000c54:	4b01      	ldr	r3, [pc, #4]	; (8000c5c <__errno+0x8>)
 8000c56:	6818      	ldr	r0, [r3, #0]
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20000014 	.word	0x20000014

08000c60 <__libc_init_array>:
 8000c60:	b570      	push	{r4, r5, r6, lr}
 8000c62:	4d0d      	ldr	r5, [pc, #52]	; (8000c98 <__libc_init_array+0x38>)
 8000c64:	4c0d      	ldr	r4, [pc, #52]	; (8000c9c <__libc_init_array+0x3c>)
 8000c66:	1b64      	subs	r4, r4, r5
 8000c68:	10a4      	asrs	r4, r4, #2
 8000c6a:	2600      	movs	r6, #0
 8000c6c:	42a6      	cmp	r6, r4
 8000c6e:	d109      	bne.n	8000c84 <__libc_init_array+0x24>
 8000c70:	4d0b      	ldr	r5, [pc, #44]	; (8000ca0 <__libc_init_array+0x40>)
 8000c72:	4c0c      	ldr	r4, [pc, #48]	; (8000ca4 <__libc_init_array+0x44>)
 8000c74:	f000 fc86 	bl	8001584 <_init>
 8000c78:	1b64      	subs	r4, r4, r5
 8000c7a:	10a4      	asrs	r4, r4, #2
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	42a6      	cmp	r6, r4
 8000c80:	d105      	bne.n	8000c8e <__libc_init_array+0x2e>
 8000c82:	bd70      	pop	{r4, r5, r6, pc}
 8000c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c88:	4798      	blx	r3
 8000c8a:	3601      	adds	r6, #1
 8000c8c:	e7ee      	b.n	8000c6c <__libc_init_array+0xc>
 8000c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c92:	4798      	blx	r3
 8000c94:	3601      	adds	r6, #1
 8000c96:	e7f2      	b.n	8000c7e <__libc_init_array+0x1e>
 8000c98:	080015ec 	.word	0x080015ec
 8000c9c:	080015ec 	.word	0x080015ec
 8000ca0:	080015ec 	.word	0x080015ec
 8000ca4:	080015f0 	.word	0x080015f0

08000ca8 <siprintf>:
 8000ca8:	b40e      	push	{r1, r2, r3}
 8000caa:	b500      	push	{lr}
 8000cac:	b09c      	sub	sp, #112	; 0x70
 8000cae:	ab1d      	add	r3, sp, #116	; 0x74
 8000cb0:	9002      	str	r0, [sp, #8]
 8000cb2:	9006      	str	r0, [sp, #24]
 8000cb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000cb8:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <siprintf+0x38>)
 8000cba:	9107      	str	r1, [sp, #28]
 8000cbc:	9104      	str	r1, [sp, #16]
 8000cbe:	4909      	ldr	r1, [pc, #36]	; (8000ce4 <siprintf+0x3c>)
 8000cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8000cc4:	9105      	str	r1, [sp, #20]
 8000cc6:	6800      	ldr	r0, [r0, #0]
 8000cc8:	9301      	str	r3, [sp, #4]
 8000cca:	a902      	add	r1, sp, #8
 8000ccc:	f000 f868 	bl	8000da0 <_svfiprintf_r>
 8000cd0:	9b02      	ldr	r3, [sp, #8]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
 8000cd6:	b01c      	add	sp, #112	; 0x70
 8000cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8000cdc:	b003      	add	sp, #12
 8000cde:	4770      	bx	lr
 8000ce0:	20000014 	.word	0x20000014
 8000ce4:	ffff0208 	.word	0xffff0208

08000ce8 <__ssputs_r>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	688e      	ldr	r6, [r1, #8]
 8000cee:	429e      	cmp	r6, r3
 8000cf0:	4682      	mov	sl, r0
 8000cf2:	460c      	mov	r4, r1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	461f      	mov	r7, r3
 8000cf8:	d838      	bhi.n	8000d6c <__ssputs_r+0x84>
 8000cfa:	898a      	ldrh	r2, [r1, #12]
 8000cfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000d00:	d032      	beq.n	8000d68 <__ssputs_r+0x80>
 8000d02:	6825      	ldr	r5, [r4, #0]
 8000d04:	6909      	ldr	r1, [r1, #16]
 8000d06:	eba5 0901 	sub.w	r9, r5, r1
 8000d0a:	6965      	ldr	r5, [r4, #20]
 8000d0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000d10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000d14:	3301      	adds	r3, #1
 8000d16:	444b      	add	r3, r9
 8000d18:	106d      	asrs	r5, r5, #1
 8000d1a:	429d      	cmp	r5, r3
 8000d1c:	bf38      	it	cc
 8000d1e:	461d      	movcc	r5, r3
 8000d20:	0553      	lsls	r3, r2, #21
 8000d22:	d531      	bpl.n	8000d88 <__ssputs_r+0xa0>
 8000d24:	4629      	mov	r1, r5
 8000d26:	f000 fb63 	bl	80013f0 <_malloc_r>
 8000d2a:	4606      	mov	r6, r0
 8000d2c:	b950      	cbnz	r0, 8000d44 <__ssputs_r+0x5c>
 8000d2e:	230c      	movs	r3, #12
 8000d30:	f8ca 3000 	str.w	r3, [sl]
 8000d34:	89a3      	ldrh	r3, [r4, #12]
 8000d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d3a:	81a3      	strh	r3, [r4, #12]
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	6921      	ldr	r1, [r4, #16]
 8000d46:	464a      	mov	r2, r9
 8000d48:	f000 fabe 	bl	80012c8 <memcpy>
 8000d4c:	89a3      	ldrh	r3, [r4, #12]
 8000d4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d56:	81a3      	strh	r3, [r4, #12]
 8000d58:	6126      	str	r6, [r4, #16]
 8000d5a:	6165      	str	r5, [r4, #20]
 8000d5c:	444e      	add	r6, r9
 8000d5e:	eba5 0509 	sub.w	r5, r5, r9
 8000d62:	6026      	str	r6, [r4, #0]
 8000d64:	60a5      	str	r5, [r4, #8]
 8000d66:	463e      	mov	r6, r7
 8000d68:	42be      	cmp	r6, r7
 8000d6a:	d900      	bls.n	8000d6e <__ssputs_r+0x86>
 8000d6c:	463e      	mov	r6, r7
 8000d6e:	6820      	ldr	r0, [r4, #0]
 8000d70:	4632      	mov	r2, r6
 8000d72:	4641      	mov	r1, r8
 8000d74:	f000 fab6 	bl	80012e4 <memmove>
 8000d78:	68a3      	ldr	r3, [r4, #8]
 8000d7a:	1b9b      	subs	r3, r3, r6
 8000d7c:	60a3      	str	r3, [r4, #8]
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	4433      	add	r3, r6
 8000d82:	6023      	str	r3, [r4, #0]
 8000d84:	2000      	movs	r0, #0
 8000d86:	e7db      	b.n	8000d40 <__ssputs_r+0x58>
 8000d88:	462a      	mov	r2, r5
 8000d8a:	f000 fba5 	bl	80014d8 <_realloc_r>
 8000d8e:	4606      	mov	r6, r0
 8000d90:	2800      	cmp	r0, #0
 8000d92:	d1e1      	bne.n	8000d58 <__ssputs_r+0x70>
 8000d94:	6921      	ldr	r1, [r4, #16]
 8000d96:	4650      	mov	r0, sl
 8000d98:	f000 fabe 	bl	8001318 <_free_r>
 8000d9c:	e7c7      	b.n	8000d2e <__ssputs_r+0x46>
	...

08000da0 <_svfiprintf_r>:
 8000da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000da4:	4698      	mov	r8, r3
 8000da6:	898b      	ldrh	r3, [r1, #12]
 8000da8:	061b      	lsls	r3, r3, #24
 8000daa:	b09d      	sub	sp, #116	; 0x74
 8000dac:	4607      	mov	r7, r0
 8000dae:	460d      	mov	r5, r1
 8000db0:	4614      	mov	r4, r2
 8000db2:	d50e      	bpl.n	8000dd2 <_svfiprintf_r+0x32>
 8000db4:	690b      	ldr	r3, [r1, #16]
 8000db6:	b963      	cbnz	r3, 8000dd2 <_svfiprintf_r+0x32>
 8000db8:	2140      	movs	r1, #64	; 0x40
 8000dba:	f000 fb19 	bl	80013f0 <_malloc_r>
 8000dbe:	6028      	str	r0, [r5, #0]
 8000dc0:	6128      	str	r0, [r5, #16]
 8000dc2:	b920      	cbnz	r0, 8000dce <_svfiprintf_r+0x2e>
 8000dc4:	230c      	movs	r3, #12
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dcc:	e0d1      	b.n	8000f72 <_svfiprintf_r+0x1d2>
 8000dce:	2340      	movs	r3, #64	; 0x40
 8000dd0:	616b      	str	r3, [r5, #20]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8000dd6:	2320      	movs	r3, #32
 8000dd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000ddc:	f8cd 800c 	str.w	r8, [sp, #12]
 8000de0:	2330      	movs	r3, #48	; 0x30
 8000de2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000f8c <_svfiprintf_r+0x1ec>
 8000de6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000dea:	f04f 0901 	mov.w	r9, #1
 8000dee:	4623      	mov	r3, r4
 8000df0:	469a      	mov	sl, r3
 8000df2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000df6:	b10a      	cbz	r2, 8000dfc <_svfiprintf_r+0x5c>
 8000df8:	2a25      	cmp	r2, #37	; 0x25
 8000dfa:	d1f9      	bne.n	8000df0 <_svfiprintf_r+0x50>
 8000dfc:	ebba 0b04 	subs.w	fp, sl, r4
 8000e00:	d00b      	beq.n	8000e1a <_svfiprintf_r+0x7a>
 8000e02:	465b      	mov	r3, fp
 8000e04:	4622      	mov	r2, r4
 8000e06:	4629      	mov	r1, r5
 8000e08:	4638      	mov	r0, r7
 8000e0a:	f7ff ff6d 	bl	8000ce8 <__ssputs_r>
 8000e0e:	3001      	adds	r0, #1
 8000e10:	f000 80aa 	beq.w	8000f68 <_svfiprintf_r+0x1c8>
 8000e14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e16:	445a      	add	r2, fp
 8000e18:	9209      	str	r2, [sp, #36]	; 0x24
 8000e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 80a2 	beq.w	8000f68 <_svfiprintf_r+0x1c8>
 8000e24:	2300      	movs	r3, #0
 8000e26:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e2e:	f10a 0a01 	add.w	sl, sl, #1
 8000e32:	9304      	str	r3, [sp, #16]
 8000e34:	9307      	str	r3, [sp, #28]
 8000e36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e3a:	931a      	str	r3, [sp, #104]	; 0x68
 8000e3c:	4654      	mov	r4, sl
 8000e3e:	2205      	movs	r2, #5
 8000e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e44:	4851      	ldr	r0, [pc, #324]	; (8000f8c <_svfiprintf_r+0x1ec>)
 8000e46:	f7ff f9d3 	bl	80001f0 <memchr>
 8000e4a:	9a04      	ldr	r2, [sp, #16]
 8000e4c:	b9d8      	cbnz	r0, 8000e86 <_svfiprintf_r+0xe6>
 8000e4e:	06d0      	lsls	r0, r2, #27
 8000e50:	bf44      	itt	mi
 8000e52:	2320      	movmi	r3, #32
 8000e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e58:	0711      	lsls	r1, r2, #28
 8000e5a:	bf44      	itt	mi
 8000e5c:	232b      	movmi	r3, #43	; 0x2b
 8000e5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e62:	f89a 3000 	ldrb.w	r3, [sl]
 8000e66:	2b2a      	cmp	r3, #42	; 0x2a
 8000e68:	d015      	beq.n	8000e96 <_svfiprintf_r+0xf6>
 8000e6a:	9a07      	ldr	r2, [sp, #28]
 8000e6c:	4654      	mov	r4, sl
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f04f 0c0a 	mov.w	ip, #10
 8000e74:	4621      	mov	r1, r4
 8000e76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e7a:	3b30      	subs	r3, #48	; 0x30
 8000e7c:	2b09      	cmp	r3, #9
 8000e7e:	d94e      	bls.n	8000f1e <_svfiprintf_r+0x17e>
 8000e80:	b1b0      	cbz	r0, 8000eb0 <_svfiprintf_r+0x110>
 8000e82:	9207      	str	r2, [sp, #28]
 8000e84:	e014      	b.n	8000eb0 <_svfiprintf_r+0x110>
 8000e86:	eba0 0308 	sub.w	r3, r0, r8
 8000e8a:	fa09 f303 	lsl.w	r3, r9, r3
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	9304      	str	r3, [sp, #16]
 8000e92:	46a2      	mov	sl, r4
 8000e94:	e7d2      	b.n	8000e3c <_svfiprintf_r+0x9c>
 8000e96:	9b03      	ldr	r3, [sp, #12]
 8000e98:	1d19      	adds	r1, r3, #4
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	9103      	str	r1, [sp, #12]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	bfbb      	ittet	lt
 8000ea2:	425b      	neglt	r3, r3
 8000ea4:	f042 0202 	orrlt.w	r2, r2, #2
 8000ea8:	9307      	strge	r3, [sp, #28]
 8000eaa:	9307      	strlt	r3, [sp, #28]
 8000eac:	bfb8      	it	lt
 8000eae:	9204      	strlt	r2, [sp, #16]
 8000eb0:	7823      	ldrb	r3, [r4, #0]
 8000eb2:	2b2e      	cmp	r3, #46	; 0x2e
 8000eb4:	d10c      	bne.n	8000ed0 <_svfiprintf_r+0x130>
 8000eb6:	7863      	ldrb	r3, [r4, #1]
 8000eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8000eba:	d135      	bne.n	8000f28 <_svfiprintf_r+0x188>
 8000ebc:	9b03      	ldr	r3, [sp, #12]
 8000ebe:	1d1a      	adds	r2, r3, #4
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	9203      	str	r2, [sp, #12]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	bfb8      	it	lt
 8000ec8:	f04f 33ff 	movlt.w	r3, #4294967295
 8000ecc:	3402      	adds	r4, #2
 8000ece:	9305      	str	r3, [sp, #20]
 8000ed0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000f9c <_svfiprintf_r+0x1fc>
 8000ed4:	7821      	ldrb	r1, [r4, #0]
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	4650      	mov	r0, sl
 8000eda:	f7ff f989 	bl	80001f0 <memchr>
 8000ede:	b140      	cbz	r0, 8000ef2 <_svfiprintf_r+0x152>
 8000ee0:	2340      	movs	r3, #64	; 0x40
 8000ee2:	eba0 000a 	sub.w	r0, r0, sl
 8000ee6:	fa03 f000 	lsl.w	r0, r3, r0
 8000eea:	9b04      	ldr	r3, [sp, #16]
 8000eec:	4303      	orrs	r3, r0
 8000eee:	3401      	adds	r4, #1
 8000ef0:	9304      	str	r3, [sp, #16]
 8000ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ef6:	4826      	ldr	r0, [pc, #152]	; (8000f90 <_svfiprintf_r+0x1f0>)
 8000ef8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000efc:	2206      	movs	r2, #6
 8000efe:	f7ff f977 	bl	80001f0 <memchr>
 8000f02:	2800      	cmp	r0, #0
 8000f04:	d038      	beq.n	8000f78 <_svfiprintf_r+0x1d8>
 8000f06:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <_svfiprintf_r+0x1f4>)
 8000f08:	bb1b      	cbnz	r3, 8000f52 <_svfiprintf_r+0x1b2>
 8000f0a:	9b03      	ldr	r3, [sp, #12]
 8000f0c:	3307      	adds	r3, #7
 8000f0e:	f023 0307 	bic.w	r3, r3, #7
 8000f12:	3308      	adds	r3, #8
 8000f14:	9303      	str	r3, [sp, #12]
 8000f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f18:	4433      	add	r3, r6
 8000f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8000f1c:	e767      	b.n	8000dee <_svfiprintf_r+0x4e>
 8000f1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f22:	460c      	mov	r4, r1
 8000f24:	2001      	movs	r0, #1
 8000f26:	e7a5      	b.n	8000e74 <_svfiprintf_r+0xd4>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	3401      	adds	r4, #1
 8000f2c:	9305      	str	r3, [sp, #20]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f04f 0c0a 	mov.w	ip, #10
 8000f34:	4620      	mov	r0, r4
 8000f36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f3a:	3a30      	subs	r2, #48	; 0x30
 8000f3c:	2a09      	cmp	r2, #9
 8000f3e:	d903      	bls.n	8000f48 <_svfiprintf_r+0x1a8>
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d0c5      	beq.n	8000ed0 <_svfiprintf_r+0x130>
 8000f44:	9105      	str	r1, [sp, #20]
 8000f46:	e7c3      	b.n	8000ed0 <_svfiprintf_r+0x130>
 8000f48:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f4c:	4604      	mov	r4, r0
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e7f0      	b.n	8000f34 <_svfiprintf_r+0x194>
 8000f52:	ab03      	add	r3, sp, #12
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	462a      	mov	r2, r5
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <_svfiprintf_r+0x1f8>)
 8000f5a:	a904      	add	r1, sp, #16
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	f3af 8000 	nop.w
 8000f62:	1c42      	adds	r2, r0, #1
 8000f64:	4606      	mov	r6, r0
 8000f66:	d1d6      	bne.n	8000f16 <_svfiprintf_r+0x176>
 8000f68:	89ab      	ldrh	r3, [r5, #12]
 8000f6a:	065b      	lsls	r3, r3, #25
 8000f6c:	f53f af2c 	bmi.w	8000dc8 <_svfiprintf_r+0x28>
 8000f70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f72:	b01d      	add	sp, #116	; 0x74
 8000f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f78:	ab03      	add	r3, sp, #12
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	462a      	mov	r2, r5
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <_svfiprintf_r+0x1f8>)
 8000f80:	a904      	add	r1, sp, #16
 8000f82:	4638      	mov	r0, r7
 8000f84:	f000 f87a 	bl	800107c <_printf_i>
 8000f88:	e7eb      	b.n	8000f62 <_svfiprintf_r+0x1c2>
 8000f8a:	bf00      	nop
 8000f8c:	080015b8 	.word	0x080015b8
 8000f90:	080015c2 	.word	0x080015c2
 8000f94:	00000000 	.word	0x00000000
 8000f98:	08000ce9 	.word	0x08000ce9
 8000f9c:	080015be 	.word	0x080015be

08000fa0 <_printf_common>:
 8000fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fa4:	4616      	mov	r6, r2
 8000fa6:	4699      	mov	r9, r3
 8000fa8:	688a      	ldr	r2, [r1, #8]
 8000faa:	690b      	ldr	r3, [r1, #16]
 8000fac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	bfb8      	it	lt
 8000fb4:	4613      	movlt	r3, r2
 8000fb6:	6033      	str	r3, [r6, #0]
 8000fb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000fbc:	4607      	mov	r7, r0
 8000fbe:	460c      	mov	r4, r1
 8000fc0:	b10a      	cbz	r2, 8000fc6 <_printf_common+0x26>
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	6033      	str	r3, [r6, #0]
 8000fc6:	6823      	ldr	r3, [r4, #0]
 8000fc8:	0699      	lsls	r1, r3, #26
 8000fca:	bf42      	ittt	mi
 8000fcc:	6833      	ldrmi	r3, [r6, #0]
 8000fce:	3302      	addmi	r3, #2
 8000fd0:	6033      	strmi	r3, [r6, #0]
 8000fd2:	6825      	ldr	r5, [r4, #0]
 8000fd4:	f015 0506 	ands.w	r5, r5, #6
 8000fd8:	d106      	bne.n	8000fe8 <_printf_common+0x48>
 8000fda:	f104 0a19 	add.w	sl, r4, #25
 8000fde:	68e3      	ldr	r3, [r4, #12]
 8000fe0:	6832      	ldr	r2, [r6, #0]
 8000fe2:	1a9b      	subs	r3, r3, r2
 8000fe4:	42ab      	cmp	r3, r5
 8000fe6:	dc26      	bgt.n	8001036 <_printf_common+0x96>
 8000fe8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000fec:	1e13      	subs	r3, r2, #0
 8000fee:	6822      	ldr	r2, [r4, #0]
 8000ff0:	bf18      	it	ne
 8000ff2:	2301      	movne	r3, #1
 8000ff4:	0692      	lsls	r2, r2, #26
 8000ff6:	d42b      	bmi.n	8001050 <_printf_common+0xb0>
 8000ff8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ffc:	4649      	mov	r1, r9
 8000ffe:	4638      	mov	r0, r7
 8001000:	47c0      	blx	r8
 8001002:	3001      	adds	r0, #1
 8001004:	d01e      	beq.n	8001044 <_printf_common+0xa4>
 8001006:	6823      	ldr	r3, [r4, #0]
 8001008:	68e5      	ldr	r5, [r4, #12]
 800100a:	6832      	ldr	r2, [r6, #0]
 800100c:	f003 0306 	and.w	r3, r3, #6
 8001010:	2b04      	cmp	r3, #4
 8001012:	bf08      	it	eq
 8001014:	1aad      	subeq	r5, r5, r2
 8001016:	68a3      	ldr	r3, [r4, #8]
 8001018:	6922      	ldr	r2, [r4, #16]
 800101a:	bf0c      	ite	eq
 800101c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001020:	2500      	movne	r5, #0
 8001022:	4293      	cmp	r3, r2
 8001024:	bfc4      	itt	gt
 8001026:	1a9b      	subgt	r3, r3, r2
 8001028:	18ed      	addgt	r5, r5, r3
 800102a:	2600      	movs	r6, #0
 800102c:	341a      	adds	r4, #26
 800102e:	42b5      	cmp	r5, r6
 8001030:	d11a      	bne.n	8001068 <_printf_common+0xc8>
 8001032:	2000      	movs	r0, #0
 8001034:	e008      	b.n	8001048 <_printf_common+0xa8>
 8001036:	2301      	movs	r3, #1
 8001038:	4652      	mov	r2, sl
 800103a:	4649      	mov	r1, r9
 800103c:	4638      	mov	r0, r7
 800103e:	47c0      	blx	r8
 8001040:	3001      	adds	r0, #1
 8001042:	d103      	bne.n	800104c <_printf_common+0xac>
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800104c:	3501      	adds	r5, #1
 800104e:	e7c6      	b.n	8000fde <_printf_common+0x3e>
 8001050:	18e1      	adds	r1, r4, r3
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	2030      	movs	r0, #48	; 0x30
 8001056:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800105a:	4422      	add	r2, r4
 800105c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001060:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001064:	3302      	adds	r3, #2
 8001066:	e7c7      	b.n	8000ff8 <_printf_common+0x58>
 8001068:	2301      	movs	r3, #1
 800106a:	4622      	mov	r2, r4
 800106c:	4649      	mov	r1, r9
 800106e:	4638      	mov	r0, r7
 8001070:	47c0      	blx	r8
 8001072:	3001      	adds	r0, #1
 8001074:	d0e6      	beq.n	8001044 <_printf_common+0xa4>
 8001076:	3601      	adds	r6, #1
 8001078:	e7d9      	b.n	800102e <_printf_common+0x8e>
	...

0800107c <_printf_i>:
 800107c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001080:	7e0f      	ldrb	r7, [r1, #24]
 8001082:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001084:	2f78      	cmp	r7, #120	; 0x78
 8001086:	4691      	mov	r9, r2
 8001088:	4680      	mov	r8, r0
 800108a:	460c      	mov	r4, r1
 800108c:	469a      	mov	sl, r3
 800108e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001092:	d807      	bhi.n	80010a4 <_printf_i+0x28>
 8001094:	2f62      	cmp	r7, #98	; 0x62
 8001096:	d80a      	bhi.n	80010ae <_printf_i+0x32>
 8001098:	2f00      	cmp	r7, #0
 800109a:	f000 80d8 	beq.w	800124e <_printf_i+0x1d2>
 800109e:	2f58      	cmp	r7, #88	; 0x58
 80010a0:	f000 80a3 	beq.w	80011ea <_printf_i+0x16e>
 80010a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80010a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80010ac:	e03a      	b.n	8001124 <_printf_i+0xa8>
 80010ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80010b2:	2b15      	cmp	r3, #21
 80010b4:	d8f6      	bhi.n	80010a4 <_printf_i+0x28>
 80010b6:	a101      	add	r1, pc, #4	; (adr r1, 80010bc <_printf_i+0x40>)
 80010b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80010bc:	08001115 	.word	0x08001115
 80010c0:	08001129 	.word	0x08001129
 80010c4:	080010a5 	.word	0x080010a5
 80010c8:	080010a5 	.word	0x080010a5
 80010cc:	080010a5 	.word	0x080010a5
 80010d0:	080010a5 	.word	0x080010a5
 80010d4:	08001129 	.word	0x08001129
 80010d8:	080010a5 	.word	0x080010a5
 80010dc:	080010a5 	.word	0x080010a5
 80010e0:	080010a5 	.word	0x080010a5
 80010e4:	080010a5 	.word	0x080010a5
 80010e8:	08001235 	.word	0x08001235
 80010ec:	08001159 	.word	0x08001159
 80010f0:	08001217 	.word	0x08001217
 80010f4:	080010a5 	.word	0x080010a5
 80010f8:	080010a5 	.word	0x080010a5
 80010fc:	08001257 	.word	0x08001257
 8001100:	080010a5 	.word	0x080010a5
 8001104:	08001159 	.word	0x08001159
 8001108:	080010a5 	.word	0x080010a5
 800110c:	080010a5 	.word	0x080010a5
 8001110:	0800121f 	.word	0x0800121f
 8001114:	682b      	ldr	r3, [r5, #0]
 8001116:	1d1a      	adds	r2, r3, #4
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	602a      	str	r2, [r5, #0]
 800111c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001124:	2301      	movs	r3, #1
 8001126:	e0a3      	b.n	8001270 <_printf_i+0x1f4>
 8001128:	6820      	ldr	r0, [r4, #0]
 800112a:	6829      	ldr	r1, [r5, #0]
 800112c:	0606      	lsls	r6, r0, #24
 800112e:	f101 0304 	add.w	r3, r1, #4
 8001132:	d50a      	bpl.n	800114a <_printf_i+0xce>
 8001134:	680e      	ldr	r6, [r1, #0]
 8001136:	602b      	str	r3, [r5, #0]
 8001138:	2e00      	cmp	r6, #0
 800113a:	da03      	bge.n	8001144 <_printf_i+0xc8>
 800113c:	232d      	movs	r3, #45	; 0x2d
 800113e:	4276      	negs	r6, r6
 8001140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001144:	485e      	ldr	r0, [pc, #376]	; (80012c0 <_printf_i+0x244>)
 8001146:	230a      	movs	r3, #10
 8001148:	e019      	b.n	800117e <_printf_i+0x102>
 800114a:	680e      	ldr	r6, [r1, #0]
 800114c:	602b      	str	r3, [r5, #0]
 800114e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001152:	bf18      	it	ne
 8001154:	b236      	sxthne	r6, r6
 8001156:	e7ef      	b.n	8001138 <_printf_i+0xbc>
 8001158:	682b      	ldr	r3, [r5, #0]
 800115a:	6820      	ldr	r0, [r4, #0]
 800115c:	1d19      	adds	r1, r3, #4
 800115e:	6029      	str	r1, [r5, #0]
 8001160:	0601      	lsls	r1, r0, #24
 8001162:	d501      	bpl.n	8001168 <_printf_i+0xec>
 8001164:	681e      	ldr	r6, [r3, #0]
 8001166:	e002      	b.n	800116e <_printf_i+0xf2>
 8001168:	0646      	lsls	r6, r0, #25
 800116a:	d5fb      	bpl.n	8001164 <_printf_i+0xe8>
 800116c:	881e      	ldrh	r6, [r3, #0]
 800116e:	4854      	ldr	r0, [pc, #336]	; (80012c0 <_printf_i+0x244>)
 8001170:	2f6f      	cmp	r7, #111	; 0x6f
 8001172:	bf0c      	ite	eq
 8001174:	2308      	moveq	r3, #8
 8001176:	230a      	movne	r3, #10
 8001178:	2100      	movs	r1, #0
 800117a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800117e:	6865      	ldr	r5, [r4, #4]
 8001180:	60a5      	str	r5, [r4, #8]
 8001182:	2d00      	cmp	r5, #0
 8001184:	bfa2      	ittt	ge
 8001186:	6821      	ldrge	r1, [r4, #0]
 8001188:	f021 0104 	bicge.w	r1, r1, #4
 800118c:	6021      	strge	r1, [r4, #0]
 800118e:	b90e      	cbnz	r6, 8001194 <_printf_i+0x118>
 8001190:	2d00      	cmp	r5, #0
 8001192:	d04d      	beq.n	8001230 <_printf_i+0x1b4>
 8001194:	4615      	mov	r5, r2
 8001196:	fbb6 f1f3 	udiv	r1, r6, r3
 800119a:	fb03 6711 	mls	r7, r3, r1, r6
 800119e:	5dc7      	ldrb	r7, [r0, r7]
 80011a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80011a4:	4637      	mov	r7, r6
 80011a6:	42bb      	cmp	r3, r7
 80011a8:	460e      	mov	r6, r1
 80011aa:	d9f4      	bls.n	8001196 <_printf_i+0x11a>
 80011ac:	2b08      	cmp	r3, #8
 80011ae:	d10b      	bne.n	80011c8 <_printf_i+0x14c>
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	07de      	lsls	r6, r3, #31
 80011b4:	d508      	bpl.n	80011c8 <_printf_i+0x14c>
 80011b6:	6923      	ldr	r3, [r4, #16]
 80011b8:	6861      	ldr	r1, [r4, #4]
 80011ba:	4299      	cmp	r1, r3
 80011bc:	bfde      	ittt	le
 80011be:	2330      	movle	r3, #48	; 0x30
 80011c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80011c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80011c8:	1b52      	subs	r2, r2, r5
 80011ca:	6122      	str	r2, [r4, #16]
 80011cc:	f8cd a000 	str.w	sl, [sp]
 80011d0:	464b      	mov	r3, r9
 80011d2:	aa03      	add	r2, sp, #12
 80011d4:	4621      	mov	r1, r4
 80011d6:	4640      	mov	r0, r8
 80011d8:	f7ff fee2 	bl	8000fa0 <_printf_common>
 80011dc:	3001      	adds	r0, #1
 80011de:	d14c      	bne.n	800127a <_printf_i+0x1fe>
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	b004      	add	sp, #16
 80011e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ea:	4835      	ldr	r0, [pc, #212]	; (80012c0 <_printf_i+0x244>)
 80011ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80011f0:	6829      	ldr	r1, [r5, #0]
 80011f2:	6823      	ldr	r3, [r4, #0]
 80011f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80011f8:	6029      	str	r1, [r5, #0]
 80011fa:	061d      	lsls	r5, r3, #24
 80011fc:	d514      	bpl.n	8001228 <_printf_i+0x1ac>
 80011fe:	07df      	lsls	r7, r3, #31
 8001200:	bf44      	itt	mi
 8001202:	f043 0320 	orrmi.w	r3, r3, #32
 8001206:	6023      	strmi	r3, [r4, #0]
 8001208:	b91e      	cbnz	r6, 8001212 <_printf_i+0x196>
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	f023 0320 	bic.w	r3, r3, #32
 8001210:	6023      	str	r3, [r4, #0]
 8001212:	2310      	movs	r3, #16
 8001214:	e7b0      	b.n	8001178 <_printf_i+0xfc>
 8001216:	6823      	ldr	r3, [r4, #0]
 8001218:	f043 0320 	orr.w	r3, r3, #32
 800121c:	6023      	str	r3, [r4, #0]
 800121e:	2378      	movs	r3, #120	; 0x78
 8001220:	4828      	ldr	r0, [pc, #160]	; (80012c4 <_printf_i+0x248>)
 8001222:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001226:	e7e3      	b.n	80011f0 <_printf_i+0x174>
 8001228:	0659      	lsls	r1, r3, #25
 800122a:	bf48      	it	mi
 800122c:	b2b6      	uxthmi	r6, r6
 800122e:	e7e6      	b.n	80011fe <_printf_i+0x182>
 8001230:	4615      	mov	r5, r2
 8001232:	e7bb      	b.n	80011ac <_printf_i+0x130>
 8001234:	682b      	ldr	r3, [r5, #0]
 8001236:	6826      	ldr	r6, [r4, #0]
 8001238:	6961      	ldr	r1, [r4, #20]
 800123a:	1d18      	adds	r0, r3, #4
 800123c:	6028      	str	r0, [r5, #0]
 800123e:	0635      	lsls	r5, r6, #24
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	d501      	bpl.n	8001248 <_printf_i+0x1cc>
 8001244:	6019      	str	r1, [r3, #0]
 8001246:	e002      	b.n	800124e <_printf_i+0x1d2>
 8001248:	0670      	lsls	r0, r6, #25
 800124a:	d5fb      	bpl.n	8001244 <_printf_i+0x1c8>
 800124c:	8019      	strh	r1, [r3, #0]
 800124e:	2300      	movs	r3, #0
 8001250:	6123      	str	r3, [r4, #16]
 8001252:	4615      	mov	r5, r2
 8001254:	e7ba      	b.n	80011cc <_printf_i+0x150>
 8001256:	682b      	ldr	r3, [r5, #0]
 8001258:	1d1a      	adds	r2, r3, #4
 800125a:	602a      	str	r2, [r5, #0]
 800125c:	681d      	ldr	r5, [r3, #0]
 800125e:	6862      	ldr	r2, [r4, #4]
 8001260:	2100      	movs	r1, #0
 8001262:	4628      	mov	r0, r5
 8001264:	f7fe ffc4 	bl	80001f0 <memchr>
 8001268:	b108      	cbz	r0, 800126e <_printf_i+0x1f2>
 800126a:	1b40      	subs	r0, r0, r5
 800126c:	6060      	str	r0, [r4, #4]
 800126e:	6863      	ldr	r3, [r4, #4]
 8001270:	6123      	str	r3, [r4, #16]
 8001272:	2300      	movs	r3, #0
 8001274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001278:	e7a8      	b.n	80011cc <_printf_i+0x150>
 800127a:	6923      	ldr	r3, [r4, #16]
 800127c:	462a      	mov	r2, r5
 800127e:	4649      	mov	r1, r9
 8001280:	4640      	mov	r0, r8
 8001282:	47d0      	blx	sl
 8001284:	3001      	adds	r0, #1
 8001286:	d0ab      	beq.n	80011e0 <_printf_i+0x164>
 8001288:	6823      	ldr	r3, [r4, #0]
 800128a:	079b      	lsls	r3, r3, #30
 800128c:	d413      	bmi.n	80012b6 <_printf_i+0x23a>
 800128e:	68e0      	ldr	r0, [r4, #12]
 8001290:	9b03      	ldr	r3, [sp, #12]
 8001292:	4298      	cmp	r0, r3
 8001294:	bfb8      	it	lt
 8001296:	4618      	movlt	r0, r3
 8001298:	e7a4      	b.n	80011e4 <_printf_i+0x168>
 800129a:	2301      	movs	r3, #1
 800129c:	4632      	mov	r2, r6
 800129e:	4649      	mov	r1, r9
 80012a0:	4640      	mov	r0, r8
 80012a2:	47d0      	blx	sl
 80012a4:	3001      	adds	r0, #1
 80012a6:	d09b      	beq.n	80011e0 <_printf_i+0x164>
 80012a8:	3501      	adds	r5, #1
 80012aa:	68e3      	ldr	r3, [r4, #12]
 80012ac:	9903      	ldr	r1, [sp, #12]
 80012ae:	1a5b      	subs	r3, r3, r1
 80012b0:	42ab      	cmp	r3, r5
 80012b2:	dcf2      	bgt.n	800129a <_printf_i+0x21e>
 80012b4:	e7eb      	b.n	800128e <_printf_i+0x212>
 80012b6:	2500      	movs	r5, #0
 80012b8:	f104 0619 	add.w	r6, r4, #25
 80012bc:	e7f5      	b.n	80012aa <_printf_i+0x22e>
 80012be:	bf00      	nop
 80012c0:	080015c9 	.word	0x080015c9
 80012c4:	080015da 	.word	0x080015da

080012c8 <memcpy>:
 80012c8:	440a      	add	r2, r1
 80012ca:	4291      	cmp	r1, r2
 80012cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80012d0:	d100      	bne.n	80012d4 <memcpy+0xc>
 80012d2:	4770      	bx	lr
 80012d4:	b510      	push	{r4, lr}
 80012d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80012da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80012de:	4291      	cmp	r1, r2
 80012e0:	d1f9      	bne.n	80012d6 <memcpy+0xe>
 80012e2:	bd10      	pop	{r4, pc}

080012e4 <memmove>:
 80012e4:	4288      	cmp	r0, r1
 80012e6:	b510      	push	{r4, lr}
 80012e8:	eb01 0402 	add.w	r4, r1, r2
 80012ec:	d902      	bls.n	80012f4 <memmove+0x10>
 80012ee:	4284      	cmp	r4, r0
 80012f0:	4623      	mov	r3, r4
 80012f2:	d807      	bhi.n	8001304 <memmove+0x20>
 80012f4:	1e43      	subs	r3, r0, #1
 80012f6:	42a1      	cmp	r1, r4
 80012f8:	d008      	beq.n	800130c <memmove+0x28>
 80012fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80012fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001302:	e7f8      	b.n	80012f6 <memmove+0x12>
 8001304:	4402      	add	r2, r0
 8001306:	4601      	mov	r1, r0
 8001308:	428a      	cmp	r2, r1
 800130a:	d100      	bne.n	800130e <memmove+0x2a>
 800130c:	bd10      	pop	{r4, pc}
 800130e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001312:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001316:	e7f7      	b.n	8001308 <memmove+0x24>

08001318 <_free_r>:
 8001318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800131a:	2900      	cmp	r1, #0
 800131c:	d044      	beq.n	80013a8 <_free_r+0x90>
 800131e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001322:	9001      	str	r0, [sp, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	f1a1 0404 	sub.w	r4, r1, #4
 800132a:	bfb8      	it	lt
 800132c:	18e4      	addlt	r4, r4, r3
 800132e:	f000 f913 	bl	8001558 <__malloc_lock>
 8001332:	4a1e      	ldr	r2, [pc, #120]	; (80013ac <_free_r+0x94>)
 8001334:	9801      	ldr	r0, [sp, #4]
 8001336:	6813      	ldr	r3, [r2, #0]
 8001338:	b933      	cbnz	r3, 8001348 <_free_r+0x30>
 800133a:	6063      	str	r3, [r4, #4]
 800133c:	6014      	str	r4, [r2, #0]
 800133e:	b003      	add	sp, #12
 8001340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001344:	f000 b90e 	b.w	8001564 <__malloc_unlock>
 8001348:	42a3      	cmp	r3, r4
 800134a:	d908      	bls.n	800135e <_free_r+0x46>
 800134c:	6825      	ldr	r5, [r4, #0]
 800134e:	1961      	adds	r1, r4, r5
 8001350:	428b      	cmp	r3, r1
 8001352:	bf01      	itttt	eq
 8001354:	6819      	ldreq	r1, [r3, #0]
 8001356:	685b      	ldreq	r3, [r3, #4]
 8001358:	1949      	addeq	r1, r1, r5
 800135a:	6021      	streq	r1, [r4, #0]
 800135c:	e7ed      	b.n	800133a <_free_r+0x22>
 800135e:	461a      	mov	r2, r3
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	b10b      	cbz	r3, 8001368 <_free_r+0x50>
 8001364:	42a3      	cmp	r3, r4
 8001366:	d9fa      	bls.n	800135e <_free_r+0x46>
 8001368:	6811      	ldr	r1, [r2, #0]
 800136a:	1855      	adds	r5, r2, r1
 800136c:	42a5      	cmp	r5, r4
 800136e:	d10b      	bne.n	8001388 <_free_r+0x70>
 8001370:	6824      	ldr	r4, [r4, #0]
 8001372:	4421      	add	r1, r4
 8001374:	1854      	adds	r4, r2, r1
 8001376:	42a3      	cmp	r3, r4
 8001378:	6011      	str	r1, [r2, #0]
 800137a:	d1e0      	bne.n	800133e <_free_r+0x26>
 800137c:	681c      	ldr	r4, [r3, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	6053      	str	r3, [r2, #4]
 8001382:	4421      	add	r1, r4
 8001384:	6011      	str	r1, [r2, #0]
 8001386:	e7da      	b.n	800133e <_free_r+0x26>
 8001388:	d902      	bls.n	8001390 <_free_r+0x78>
 800138a:	230c      	movs	r3, #12
 800138c:	6003      	str	r3, [r0, #0]
 800138e:	e7d6      	b.n	800133e <_free_r+0x26>
 8001390:	6825      	ldr	r5, [r4, #0]
 8001392:	1961      	adds	r1, r4, r5
 8001394:	428b      	cmp	r3, r1
 8001396:	bf04      	itt	eq
 8001398:	6819      	ldreq	r1, [r3, #0]
 800139a:	685b      	ldreq	r3, [r3, #4]
 800139c:	6063      	str	r3, [r4, #4]
 800139e:	bf04      	itt	eq
 80013a0:	1949      	addeq	r1, r1, r5
 80013a2:	6021      	streq	r1, [r4, #0]
 80013a4:	6054      	str	r4, [r2, #4]
 80013a6:	e7ca      	b.n	800133e <_free_r+0x26>
 80013a8:	b003      	add	sp, #12
 80013aa:	bd30      	pop	{r4, r5, pc}
 80013ac:	200000ac 	.word	0x200000ac

080013b0 <sbrk_aligned>:
 80013b0:	b570      	push	{r4, r5, r6, lr}
 80013b2:	4e0e      	ldr	r6, [pc, #56]	; (80013ec <sbrk_aligned+0x3c>)
 80013b4:	460c      	mov	r4, r1
 80013b6:	6831      	ldr	r1, [r6, #0]
 80013b8:	4605      	mov	r5, r0
 80013ba:	b911      	cbnz	r1, 80013c2 <sbrk_aligned+0x12>
 80013bc:	f000 f8bc 	bl	8001538 <_sbrk_r>
 80013c0:	6030      	str	r0, [r6, #0]
 80013c2:	4621      	mov	r1, r4
 80013c4:	4628      	mov	r0, r5
 80013c6:	f000 f8b7 	bl	8001538 <_sbrk_r>
 80013ca:	1c43      	adds	r3, r0, #1
 80013cc:	d00a      	beq.n	80013e4 <sbrk_aligned+0x34>
 80013ce:	1cc4      	adds	r4, r0, #3
 80013d0:	f024 0403 	bic.w	r4, r4, #3
 80013d4:	42a0      	cmp	r0, r4
 80013d6:	d007      	beq.n	80013e8 <sbrk_aligned+0x38>
 80013d8:	1a21      	subs	r1, r4, r0
 80013da:	4628      	mov	r0, r5
 80013dc:	f000 f8ac 	bl	8001538 <_sbrk_r>
 80013e0:	3001      	adds	r0, #1
 80013e2:	d101      	bne.n	80013e8 <sbrk_aligned+0x38>
 80013e4:	f04f 34ff 	mov.w	r4, #4294967295
 80013e8:	4620      	mov	r0, r4
 80013ea:	bd70      	pop	{r4, r5, r6, pc}
 80013ec:	200000b0 	.word	0x200000b0

080013f0 <_malloc_r>:
 80013f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013f4:	1ccd      	adds	r5, r1, #3
 80013f6:	f025 0503 	bic.w	r5, r5, #3
 80013fa:	3508      	adds	r5, #8
 80013fc:	2d0c      	cmp	r5, #12
 80013fe:	bf38      	it	cc
 8001400:	250c      	movcc	r5, #12
 8001402:	2d00      	cmp	r5, #0
 8001404:	4607      	mov	r7, r0
 8001406:	db01      	blt.n	800140c <_malloc_r+0x1c>
 8001408:	42a9      	cmp	r1, r5
 800140a:	d905      	bls.n	8001418 <_malloc_r+0x28>
 800140c:	230c      	movs	r3, #12
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	2600      	movs	r6, #0
 8001412:	4630      	mov	r0, r6
 8001414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001418:	4e2e      	ldr	r6, [pc, #184]	; (80014d4 <_malloc_r+0xe4>)
 800141a:	f000 f89d 	bl	8001558 <__malloc_lock>
 800141e:	6833      	ldr	r3, [r6, #0]
 8001420:	461c      	mov	r4, r3
 8001422:	bb34      	cbnz	r4, 8001472 <_malloc_r+0x82>
 8001424:	4629      	mov	r1, r5
 8001426:	4638      	mov	r0, r7
 8001428:	f7ff ffc2 	bl	80013b0 <sbrk_aligned>
 800142c:	1c43      	adds	r3, r0, #1
 800142e:	4604      	mov	r4, r0
 8001430:	d14d      	bne.n	80014ce <_malloc_r+0xde>
 8001432:	6834      	ldr	r4, [r6, #0]
 8001434:	4626      	mov	r6, r4
 8001436:	2e00      	cmp	r6, #0
 8001438:	d140      	bne.n	80014bc <_malloc_r+0xcc>
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	4631      	mov	r1, r6
 800143e:	4638      	mov	r0, r7
 8001440:	eb04 0803 	add.w	r8, r4, r3
 8001444:	f000 f878 	bl	8001538 <_sbrk_r>
 8001448:	4580      	cmp	r8, r0
 800144a:	d13a      	bne.n	80014c2 <_malloc_r+0xd2>
 800144c:	6821      	ldr	r1, [r4, #0]
 800144e:	3503      	adds	r5, #3
 8001450:	1a6d      	subs	r5, r5, r1
 8001452:	f025 0503 	bic.w	r5, r5, #3
 8001456:	3508      	adds	r5, #8
 8001458:	2d0c      	cmp	r5, #12
 800145a:	bf38      	it	cc
 800145c:	250c      	movcc	r5, #12
 800145e:	4629      	mov	r1, r5
 8001460:	4638      	mov	r0, r7
 8001462:	f7ff ffa5 	bl	80013b0 <sbrk_aligned>
 8001466:	3001      	adds	r0, #1
 8001468:	d02b      	beq.n	80014c2 <_malloc_r+0xd2>
 800146a:	6823      	ldr	r3, [r4, #0]
 800146c:	442b      	add	r3, r5
 800146e:	6023      	str	r3, [r4, #0]
 8001470:	e00e      	b.n	8001490 <_malloc_r+0xa0>
 8001472:	6822      	ldr	r2, [r4, #0]
 8001474:	1b52      	subs	r2, r2, r5
 8001476:	d41e      	bmi.n	80014b6 <_malloc_r+0xc6>
 8001478:	2a0b      	cmp	r2, #11
 800147a:	d916      	bls.n	80014aa <_malloc_r+0xba>
 800147c:	1961      	adds	r1, r4, r5
 800147e:	42a3      	cmp	r3, r4
 8001480:	6025      	str	r5, [r4, #0]
 8001482:	bf18      	it	ne
 8001484:	6059      	strne	r1, [r3, #4]
 8001486:	6863      	ldr	r3, [r4, #4]
 8001488:	bf08      	it	eq
 800148a:	6031      	streq	r1, [r6, #0]
 800148c:	5162      	str	r2, [r4, r5]
 800148e:	604b      	str	r3, [r1, #4]
 8001490:	4638      	mov	r0, r7
 8001492:	f104 060b 	add.w	r6, r4, #11
 8001496:	f000 f865 	bl	8001564 <__malloc_unlock>
 800149a:	f026 0607 	bic.w	r6, r6, #7
 800149e:	1d23      	adds	r3, r4, #4
 80014a0:	1af2      	subs	r2, r6, r3
 80014a2:	d0b6      	beq.n	8001412 <_malloc_r+0x22>
 80014a4:	1b9b      	subs	r3, r3, r6
 80014a6:	50a3      	str	r3, [r4, r2]
 80014a8:	e7b3      	b.n	8001412 <_malloc_r+0x22>
 80014aa:	6862      	ldr	r2, [r4, #4]
 80014ac:	42a3      	cmp	r3, r4
 80014ae:	bf0c      	ite	eq
 80014b0:	6032      	streq	r2, [r6, #0]
 80014b2:	605a      	strne	r2, [r3, #4]
 80014b4:	e7ec      	b.n	8001490 <_malloc_r+0xa0>
 80014b6:	4623      	mov	r3, r4
 80014b8:	6864      	ldr	r4, [r4, #4]
 80014ba:	e7b2      	b.n	8001422 <_malloc_r+0x32>
 80014bc:	4634      	mov	r4, r6
 80014be:	6876      	ldr	r6, [r6, #4]
 80014c0:	e7b9      	b.n	8001436 <_malloc_r+0x46>
 80014c2:	230c      	movs	r3, #12
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	4638      	mov	r0, r7
 80014c8:	f000 f84c 	bl	8001564 <__malloc_unlock>
 80014cc:	e7a1      	b.n	8001412 <_malloc_r+0x22>
 80014ce:	6025      	str	r5, [r4, #0]
 80014d0:	e7de      	b.n	8001490 <_malloc_r+0xa0>
 80014d2:	bf00      	nop
 80014d4:	200000ac 	.word	0x200000ac

080014d8 <_realloc_r>:
 80014d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014dc:	4680      	mov	r8, r0
 80014de:	4614      	mov	r4, r2
 80014e0:	460e      	mov	r6, r1
 80014e2:	b921      	cbnz	r1, 80014ee <_realloc_r+0x16>
 80014e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80014e8:	4611      	mov	r1, r2
 80014ea:	f7ff bf81 	b.w	80013f0 <_malloc_r>
 80014ee:	b92a      	cbnz	r2, 80014fc <_realloc_r+0x24>
 80014f0:	f7ff ff12 	bl	8001318 <_free_r>
 80014f4:	4625      	mov	r5, r4
 80014f6:	4628      	mov	r0, r5
 80014f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014fc:	f000 f838 	bl	8001570 <_malloc_usable_size_r>
 8001500:	4284      	cmp	r4, r0
 8001502:	4607      	mov	r7, r0
 8001504:	d802      	bhi.n	800150c <_realloc_r+0x34>
 8001506:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800150a:	d812      	bhi.n	8001532 <_realloc_r+0x5a>
 800150c:	4621      	mov	r1, r4
 800150e:	4640      	mov	r0, r8
 8001510:	f7ff ff6e 	bl	80013f0 <_malloc_r>
 8001514:	4605      	mov	r5, r0
 8001516:	2800      	cmp	r0, #0
 8001518:	d0ed      	beq.n	80014f6 <_realloc_r+0x1e>
 800151a:	42bc      	cmp	r4, r7
 800151c:	4622      	mov	r2, r4
 800151e:	4631      	mov	r1, r6
 8001520:	bf28      	it	cs
 8001522:	463a      	movcs	r2, r7
 8001524:	f7ff fed0 	bl	80012c8 <memcpy>
 8001528:	4631      	mov	r1, r6
 800152a:	4640      	mov	r0, r8
 800152c:	f7ff fef4 	bl	8001318 <_free_r>
 8001530:	e7e1      	b.n	80014f6 <_realloc_r+0x1e>
 8001532:	4635      	mov	r5, r6
 8001534:	e7df      	b.n	80014f6 <_realloc_r+0x1e>
	...

08001538 <_sbrk_r>:
 8001538:	b538      	push	{r3, r4, r5, lr}
 800153a:	4d06      	ldr	r5, [pc, #24]	; (8001554 <_sbrk_r+0x1c>)
 800153c:	2300      	movs	r3, #0
 800153e:	4604      	mov	r4, r0
 8001540:	4608      	mov	r0, r1
 8001542:	602b      	str	r3, [r5, #0]
 8001544:	f7ff fb26 	bl	8000b94 <_sbrk>
 8001548:	1c43      	adds	r3, r0, #1
 800154a:	d102      	bne.n	8001552 <_sbrk_r+0x1a>
 800154c:	682b      	ldr	r3, [r5, #0]
 800154e:	b103      	cbz	r3, 8001552 <_sbrk_r+0x1a>
 8001550:	6023      	str	r3, [r4, #0]
 8001552:	bd38      	pop	{r3, r4, r5, pc}
 8001554:	200000b4 	.word	0x200000b4

08001558 <__malloc_lock>:
 8001558:	4801      	ldr	r0, [pc, #4]	; (8001560 <__malloc_lock+0x8>)
 800155a:	f000 b811 	b.w	8001580 <__retarget_lock_acquire_recursive>
 800155e:	bf00      	nop
 8001560:	200000b8 	.word	0x200000b8

08001564 <__malloc_unlock>:
 8001564:	4801      	ldr	r0, [pc, #4]	; (800156c <__malloc_unlock+0x8>)
 8001566:	f000 b80c 	b.w	8001582 <__retarget_lock_release_recursive>
 800156a:	bf00      	nop
 800156c:	200000b8 	.word	0x200000b8

08001570 <_malloc_usable_size_r>:
 8001570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001574:	1f18      	subs	r0, r3, #4
 8001576:	2b00      	cmp	r3, #0
 8001578:	bfbc      	itt	lt
 800157a:	580b      	ldrlt	r3, [r1, r0]
 800157c:	18c0      	addlt	r0, r0, r3
 800157e:	4770      	bx	lr

08001580 <__retarget_lock_acquire_recursive>:
 8001580:	4770      	bx	lr

08001582 <__retarget_lock_release_recursive>:
 8001582:	4770      	bx	lr

08001584 <_init>:
 8001584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001586:	bf00      	nop
 8001588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800158a:	bc08      	pop	{r3}
 800158c:	469e      	mov	lr, r3
 800158e:	4770      	bx	lr

08001590 <_fini>:
 8001590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001592:	bf00      	nop
 8001594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001596:	bc08      	pop	{r3}
 8001598:	469e      	mov	lr, r3
 800159a:	4770      	bx	lr
